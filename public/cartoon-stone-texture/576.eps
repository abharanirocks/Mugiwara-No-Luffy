%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 32 stone texture.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Ленка
%%CreationDate: 2/25/2015
%%BoundingBox: 0 0 2000 2000
%%HiResBoundingBox: 0 0 2000 2000
%%CropBox: 0 0 2000 2000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:B63EA66C27BDE411B6ABB18F47633900</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:B63EA66C27BDE411B6ABB18F47633900</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:6DBDDE6F45ADE3118E08C5FAE6248AB3</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:B53EA66C27BDE411B6ABB18F47633900</stRef:instanceID>
            <stRef:documentID>xmp.did:B53EA66C27BDE411B6ABB18F47633900</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:6DBDDE6F45ADE3118E08C5FAE6248AB3</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6DBDDE6F45ADE3118E08C5FAE6248AB3</stEvt:instanceID>
                  <stEvt:when>2014-03-17T00:39:16+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:08F63BB179AEE3118697CAB96AE76677</stEvt:instanceID>
                  <stEvt:when>2014-03-18T11:45:43+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6E02584DB2AEE3118697CAB96AE76677</stEvt:instanceID>
                  <stEvt:when>2014-03-18T19:10:55+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6F02584DB2AEE3118697CAB96AE76677</stEvt:instanceID>
                  <stEvt:when>2014-03-18T19:12:59+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7002584DB2AEE3118697CAB96AE76677</stEvt:instanceID>
                  <stEvt:when>2014-03-18T19:14:15+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7102584DB2AEE3118697CAB96AE76677</stEvt:instanceID>
                  <stEvt:when>2014-03-18T19:14:54+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:235EB784F4A6E4118440CA26F719F9C6</stEvt:instanceID>
                  <stEvt:when>2015-01-28T16:49:45+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:DE894EF357ACE411A08CE559779CF91E</stEvt:instanceID>
                  <stEvt:when>2015-02-04T21:21:06+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2A25786FDBB9E411BE83924570E9B56B</stEvt:instanceID>
                  <stEvt:when>2015-02-21T21:18+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FBB6DCD450BBE4119A7DAA25E075CF52</stEvt:instanceID>
                  <stEvt:when>2015-02-23T14:40:57+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FCB6DCD450BBE4119A7DAA25E075CF52</stEvt:instanceID>
                  <stEvt:when>2015-02-23T14:49:49+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FEB6DCD450BBE4119A7DAA25E075CF52</stEvt:instanceID>
                  <stEvt:when>2015-02-23T17:10:52+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EB1941034BBCE411B2E2CF085FC77D32</stEvt:instanceID>
                  <stEvt:when>2015-02-24T22:16:45+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B53EA66C27BDE411B6ABB18F47633900</stEvt:instanceID>
                  <stEvt:when>2015-02-25T22:49:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B63EA66C27BDE411B6ABB18F47633900</stEvt:instanceID>
                  <stEvt:when>2015-02-25T22:50:54+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">cloudcastle</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2015-02-25T22:50:53+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-02-25T22:50:54+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-02-25T22:50:54+03:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A5F+iLPY0felFruSe3Stc&#xA;irP/ACd5ADhbm8iEcexWAiv0v4n/ACfvyJLKnpUMEUKBI14qMiq/FWI/mD5Wi1bTfrEKgahb1aFq&#xA;fa23RvZu+EFXlSXesXtnFpiXDfUi4j+rHZ+ZIURFuvHl0rk0PTvKHljTrAKhUPOFAkmpQk9aL4L7&#xA;ffvkCUs0RFQcVAA8BgVvFVskSSIVcVBxVgHnb8u7K/Vrq2AguuomA2Y+EgH6+uSBVhvkiW50fzDP&#xA;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&#xA;M4NWSXeKaOYHpxKn3/ZwK//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2000.000000</stDim:w>
            <stDim:h>2000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2000 li
2000 2000 li
2000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2000 2000 mo
0 2000 li
0 0 li
2000 0 li
2000 2000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.14902 .14902 .141176 rgb
f
520.272 450.359 mo
517.819 476.116 539.896 368.181 552.162 339.97 cv
564.428 311.76 625.754 247.979 633.114 236.94 cv
640.473 225.902 565.654 310.533 546.029 306.854 cv
526.405 303.174 483.475 249.206 479.796 255.339 cv
476.641 260.598 530.084 316.666 532.538 341.197 cv
534.991 365.728 522.725 424.602 520.272 450.359 cv
cp
.27451 .27451 .258824 rgb
f
352.234 138.819 mo
370.632 140.045 427.055 206.276 429.508 202.597 cv
431.961 198.918 373.085 137.59 362.047 98.3408 cv
360.92 94.3325 360.092 90.4639 359.508 86.7119 cv
359.726 85.7837 359.562 84.3223 358.938 82.3169 cv
356.421 58.2729 364.645 39.4063 376.292 23.0654 cv
377.655 21.7412 379.085 20.418 380.624 19.0996 cv
386.864 13.751 394.66 7.10693 403.472 0 cv
392.575 0 li
377.06 16.833 362.417 31.8452 358.795 35.4668 cv
355.191 39.0703 352.117 41.8779 349.338 43.4292 cv
336.166 46.2715 312.719 5.48096 309.307 10.0303 cv
309.104 10.2998 309.021 10.6606 309.034 11.0991 cv
305.461 7.39063 301.881 3.63867 298.458 0 cv
294.889 0 li
309.384 19.6055 331.105 48.0103 339.528 63.8169 cv
342.747 71.6279 344.876 79.6196 344.876 87.3022 cv
344.876 120.419 274.964 186.653 266.378 197.691 cv
257.792 208.73 333.836 137.592 352.234 138.819 cv
cp
f
121.608 0 mo
114.673 0 li
101.071 0 li
100.955 0 li
93.4766 4.6084 85.7524 9.11914 78.7148 12.4849 cv
50.5044 25.9771 40.6924 23.5239 13.7085 21.0708 cv
9.05273 20.6475 4.43799 20.1143 0 19.5537 cv
0 22.8916 li
0 32.4023 li
0 38.4111 li
3.11572 40.3394 5.12256 42.2988 5.12256 44.375 cv
5.12256 46.9351 3.34668 52.75 0 60.645 cv
0 70.7578 li
0 95.5718 li
0 98.4819 li
12.959 87.4927 26.3267 75.9512 37.0127 66.4526 cv
61.9482 44.2876 100.093 18.6465 121.608 0 cv
cp
f
11.2554 298.27 mo
7.07764 306.624 90.98 301.949 108.152 317.894 cv
125.324 333.839 180.519 429.51 190.331 443.001 cv
200.143 456.493 158.44 376.768 178.065 331.386 cv
197.689 286.004 228.353 247.981 233.259 239.396 cv
238.166 230.81 178.065 289.683 155.987 300.722 cv
133.91 311.761 111.832 301.949 88.5273 299.496 cv
74.0044 297.967 48.5269 295.963 30.7939 295.856 cv
21.9194 295.02 11.2622 294.01 0 292.929 cv
0 296.43 li
5.35547 296.45 10.5249 296.516 15.4131 296.61 cv
13.1001 296.993 11.623 297.534 11.2554 298.27 cv
cp
f
297.038 655.195 mo
304.397 672.367 303.17 698.125 293.358 732.467 cv
283.546 766.81 301.944 714.069 326.475 685.858 cv
351.006 657.648 373.083 649.063 381.669 644.156 cv
390.255 639.25 354.686 655.195 322.795 642.93 cv
290.905 630.664 267.799 582.215 272.507 598.774 cv
279.154 622.151 263.994 624.046 235.711 620.852 cv
222.305 619.337 289.679 638.023 297.038 655.195 cv
cp
f
749.118 140.817 mo
768.068 148.397 762.383 135.132 752.908 118.077 cv
743.433 101.021 735.853 82.0713 730.168 95.3364 cv
724.483 108.602 656.262 207.143 652.472 214.723 cv
647.046 225.576 730.168 133.237 749.118 140.817 cv
cp
f
834.394 307.578 mo
836.289 322.738 834.394 237.463 840.079 216.618 cv
845.764 195.772 843.869 197.667 828.709 193.877 cv
813.549 190.087 798.389 178.717 798.389 178.717 cv
792.704 173.032 798.389 190.087 805.969 210.933 cv
813.549 231.778 832.499 292.418 834.394 307.578 cv
cp
f
1067.48 116.182 mo
1075.06 110.497 1075.06 66.9111 1069.38 74.4912 cv
1063.69 82.0713 1050.43 99.1265 982.205 135.132 cv
972.011 140.512 1059.9 121.867 1067.48 116.182 cv
cp
f
1107.28 239.358 mo
1106.58 252.605 1114.86 167.347 1124.33 142.712 cv
1133.81 118.077 1154.65 104.812 1133.81 114.287 cv
1112.96 123.762 1101.59 121.867 1101.59 121.867 cv
1099.7 127.552 1111.07 167.348 1107.28 239.358 cv
cp
f
1245.61 101.021 mo
1183.08 57.436 li
1190.66 68.8062 1192.55 85.8613 1175.5 95.3364 cv
1175.5 95.3364 1205.82 93.4414 1245.61 101.021 cv
cp
f
1365 157.872 mo
1368.79 163.557 1356.97 122.776 1383.5 96.2461 cv
1392.98 86.771 1347.94 116.182 1277.83 104.812 cv
1272.54 103.954 1328.99 118.077 1347.94 131.342 cv
1366.89 144.607 1361.21 152.187 1365 157.872 cv
cp
f
1368.79 182.507 mo
1367.64 227.314 1341.42 284.654 1320.94 322.864 cv
1370.12 244.748 1427.96 184.269 1408.58 199.563 cv
1372.58 227.988 1369.13 169.112 1368.79 182.507 cv
cp
f
1320.94 322.864 mo
1312.49 336.297 1304.29 350.248 1296.78 364.429 cv
1296.78 364.429 1307.65 347.678 1320.94 322.864 cv
cp
f
1184.97 394.749 mo
1190.65 400.434 1245.61 426.964 1247.51 464.865 cv
1249.4 502.765 1207.71 578.565 1205.82 586.146 cv
1203.92 593.726 1238.03 534.98 1249.4 525.505 cv
1260.77 516.031 1311.94 557.72 1304.36 544.455 cv
1296.78 531.19 1262.67 480.025 1262.67 457.285 cv
1262.67 434.544 1284.16 396.691 1281.62 389.064 cv
1279.72 383.379 1262.67 411.804 1247.51 411.804 cv
1232.35 411.804 1179.29 389.064 1184.97 394.749 cv
cp
f
984.1 372.009 mo
995.47 370.114 1054.22 345.479 1080.75 351.164 cv
1107.28 356.849 1148.97 381.484 1164.13 387.169 cv
1179.29 392.854 1122.44 358.744 1112.96 341.688 cv
1103.49 324.633 1107.28 286.733 1107.28 279.153 cv
1107.28 279.153 1095.91 317.053 1082.64 328.423 cv
1069.38 339.793 972.73 373.904 984.1 372.009 cv
cp
f
840.257 369.782 mo
840.153 367.594 840.079 366.324 840.079 366.324 cv
840.079 367.325 840.141 368.494 840.257 369.782 cv
cp
f
840.079 421.279 mo
838.184 444.02 826.814 540.665 826.814 540.665 cv
826.814 540.665 845.764 464.865 849.554 447.81 cv
853.344 430.754 912.089 398.539 912.089 398.539 cv
912.089 398.539 874.189 409.909 860.924 409.909 cv
848.827 409.909 841.46 383.124 840.257 369.782 cv
840.68 378.685 841.6 403.027 840.079 421.279 cv
cp
f
805.969 608.886 mo
796.494 616.466 741.538 646.786 737.748 650.576 cv
733.958 654.366 811.654 622.151 823.024 633.521 cv
834.394 644.891 866.609 690.372 866.609 690.372 cv
866.609 690.372 832.498 627.836 826.813 612.676 cv
821.129 597.516 824.919 559.615 824.919 559.615 cv
824.919 559.615 815.444 601.306 805.969 608.886 cv
cp
f
605.097 652.471 mo
584.251 644.891 506.556 618.361 498.976 601.306 cv
491.396 584.25 508.451 523.61 508.451 523.61 cv
508.451 523.61 487.606 597.516 480.026 610.781 cv
472.446 624.046 432.65 635.416 432.65 635.416 cv
432.65 635.416 461.076 635.416 493.291 635.416 cv
525.506 635.416 625.942 660.051 605.097 652.471 cv
cp
f
722.588 652.472 mo
722.588 652.472 692.103 668.291 673.317 671.422 cv
661.947 673.317 625.942 660.052 625.942 660.052 cv
625.942 660.052 652.472 671.421 665.737 686.582 cv
679.002 701.742 709.323 747.222 709.323 747.222 cv
709.323 747.222 688.478 690.372 697.953 679.002 cv
707.428 667.632 722.588 652.472 722.588 652.472 cv
cp
f
265.889 804.073 mo
254.519 821.128 216.619 870.398 191.983 913.984 cv
233.674 851.448 263.994 834.393 277.259 828.708 cv
290.524 823.023 309.475 841.973 309.475 841.973 cv
286.734 794.598 290.524 756.698 290.524 756.698 cv
290.524 756.698 277.259 787.018 265.889 804.073 cv
cp
f
172.593 939.135 mo
172.879 938.801 173.033 938.619 173.033 938.619 cv
173.033 938.619 172.876 938.802 172.593 939.135 cv
cp
f
172.593 939.135 mo
168.105 944.382 130.093 988.344 110.498 995.47 cv
89.6523 1003.05 13.8521 991.68 13.8521 991.68 cv
13.8521 991.68 83.9673 1004.94 101.022 1010.63 cv
118.078 1016.32 135.133 1073.17 135.133 1073.17 cv
135.133 1073.17 123.763 1025.79 125.658 1008.73 cv
127.444 992.659 167.945 944.604 172.593 939.135 cv
cp
f
430.755 1054.21 mo
449.706 1058 517.926 1124.33 517.926 1124.33 cv
517.926 1124.33 445.916 1039.06 440.23 1022 cv
434.545 1004.94 498.976 953.779 498.976 953.779 cv
498.976 953.779 442.125 984.1 421.28 989.785 cv
400.435 995.47 370.115 948.094 370.115 948.094 cv
370.115 948.094 396.645 999.26 394.75 1018.21 cv
392.855 1037.16 334.11 1103.49 318.95 1118.65 cv
364.43 1084.54 411.805 1050.42 430.755 1054.21 cv
cp
f
771.491 829.492 mo
780.239 828.506 787.019 826.813 787.019 826.813 cv
787.019 826.813 781.605 827.38 771.491 829.492 cv
cp
f
771.491 829.492 mo
761.735 830.591 749.531 830.81 741.538 826.813 cv
726.378 819.233 722.588 783.228 722.588 783.228 cv
722.588 783.228 716.903 804.073 703.638 819.233 cv
690.373 834.393 561.512 923.459 561.512 923.459 cv
663.277 857.526 740.093 836.047 771.491 829.492 cv
cp
f
870.399 701.742 mo
891.244 741.538 893.139 758.593 885.559 768.068 cv
877.979 777.543 857.134 796.493 815.444 815.443 cv
806.818 819.364 841.974 826.813 862.819 859.028 cv
883.664 891.244 898.824 913.984 891.244 893.139 cv
883.664 872.293 857.135 834.393 864.714 813.548 cv
872.294 792.703 908.299 766.173 932.935 769.963 cv
957.57 773.753 957.57 771.858 932.935 762.383 cv
908.299 752.908 887.454 724.482 870.399 701.742 cv
cp
f
1013.27 799.251 mo
1007.41 796.751 1001.46 794.524 995.47 792.703 cv
1001.7 795.252 1007.63 797.413 1013.27 799.251 cv
cp
f
671.423 1281.62 mo
652.473 1285.41 622.152 1249.4 588.042 1219.08 cv
588.042 1219.08 665.738 1302.46 665.738 1325.2 cv
673.318 1311.94 720.693 1264.56 741.539 1241.82 cv
762.384 1219.08 787.019 1219.08 821.129 1236.14 cv
788.914 1211.5 840.079 1099.7 864.714 1056.11 cv
851.449 1073.17 792.704 1156.55 768.068 1183.08 cv
743.433 1209.61 690.373 1277.83 671.423 1281.62 cv
cp
f
233.674 1277.83 mo
227.989 1247.51 224.199 1232.35 248.834 1192.55 cv
273.469 1152.76 245.044 1179.29 233.674 1186.87 cv
222.304 1194.45 205.249 1211.5 186.299 1184.97 cv
167.349 1158.44 144.608 1109.17 144.608 1109.17 cv
144.608 1109.17 152.188 1137.6 140.818 1152.76 cv
129.448 1167.92 51.7524 1167.92 51.7524 1167.92 cv
97.2329 1169.81 152.188 1164.13 182.509 1196.34 cv
212.829 1228.56 216.619 1247.51 233.674 1277.83 cv
cp
f
351.165 1455.96 mo
301.895 1454.07 281.049 1437.01 265.889 1401 cv
282.944 1448.38 271.574 1476.8 248.834 1514.71 cv
273.469 1486.28 294.314 1459.75 351.165 1455.96 cv
cp
f
728.273 1499.54 mo
697.954 1463.54 656.263 1402.9 650.578 1376.37 cv
648.683 1389.63 629.732 1421.85 616.467 1425.64 cv
603.202 1429.43 491.396 1442.7 436.441 1448.38 cv
436.441 1448.38 618.362 1437.01 646.788 1437.01 cv
675.213 1437.01 697.953 1474.91 728.273 1499.54 cv
cp
f
1105.04 1346.52 mo
1104.21 1346.31 1103.07 1346.11 1101.69 1345.94 cv
1105.81 1346.82 1107.35 1347.09 1105.04 1346.52 cv
cp
f
1015 1358.8 mo
1032.63 1344.94 1085.14 1343.88 1101.69 1345.94 cv
1086.35 1342.69 1035.16 1331.14 1013.64 1324.69 cv
986.354 1316.5 923.598 1279.67 927.69 1287.85 cv
931.142 1294.76 989.082 1319.23 994.539 1339.7 cv
999.996 1360.16 965.89 1451.56 961.797 1462.48 cv
957.704 1473.39 995.903 1373.8 1015 1358.8 cv
cp
f
1085.94 1733.97 mo
1080.49 1717.59 1088.67 1675.3 1094.13 1665.75 cv
1099.59 1656.2 1069.57 1673.94 1006.82 1669.85 cv
944.062 1665.75 930.419 1641.2 924.962 1631.65 cv
919.505 1622.1 930.419 1574.35 941.333 1532.06 cv
952.247 1489.76 957.704 1477.49 949.519 1491.13 cv
941.333 1504.77 893.584 1581.17 878.577 1603 cv
869.801 1615.76 859.162 1615.46 850.201 1612.19 cv
836.715 1603.24 818.375 1592.14 800.815 1581.17 cv
789.901 1574.35 754.43 1523.87 753.066 1529.33 cv
753.066 1529.33 784.444 1568.89 783.08 1581.17 cv
781.715 1593.45 742.152 1627.55 729.874 1637.1 cv
717.595 1646.65 652.111 1688.95 611.183 1710.77 cv
590.719 1721.69 608.455 1718.96 638.468 1703.95 cv
668.482 1688.95 703.953 1669.85 713.502 1679.4 cv
723.052 1688.95 732.602 1723.05 732.602 1706.68 cv
732.602 1690.31 738.059 1653.47 754.43 1630.28 cv
770.801 1607.09 786.137 1603.96 795.358 1600.27 cv
805.579 1596.18 838.763 1610.08 851.903 1615.31 cv
863.153 1622.28 878.553 1631.31 893.584 1638.47 cv
922.233 1652.11 959.068 1678.03 956.34 1688.95 cv
954.039 1698.15 902.27 1720.93 895.09 1724.58 cv
865.475 1734.78 837.133 1743.93 811.729 1746.24 cv
781.715 1748.97 751.702 1738.06 751.702 1738.06 cv
758.523 1747.61 778.987 1766.71 783.08 1783.08 cv
787.172 1799.45 792.629 1821.28 788.537 1836.29 cv
784.444 1851.29 811.729 1793.99 833.557 1772.17 cv
854.597 1751.13 880.711 1733.9 908.227 1720.46 cv
948.1 1708.38 1000.46 1702.97 1031.37 1706.68 cv
1065.48 1710.77 1091.4 1750.34 1085.94 1733.97 cv
cp
f
195.539 1611.46 mo
196.988 1609.56 197.813 1608.46 197.813 1608.46 cv
197.813 1608.46 196.889 1609.55 195.539 1611.46 cv
cp
f
294.889 2000 mo
298.458 2000 li
292.202 1993.35 286.487 1987.1 282.397 1982.26 cv
284.601 1985.93 289.189 1992.29 294.889 2000 cv
cp
f
481.923 1873.81 mo
474.757 1859.48 li
465.208 1841.74 448.836 1810.36 462.479 1792.63 cv
490.428 1756.29 556.613 1740.79 566.163 1733.97 cv
566.163 1733.97 526.599 1743.52 508.864 1740.79 cv
491.128 1738.06 473.393 1732.6 461.115 1728.51 cv
478.85 1740.79 491.128 1743.52 481.579 1753.07 cv
472.029 1762.62 465.208 1788.54 439.287 1800.81 cv
413.366 1813.09 398.359 1783.08 387.445 1768.07 cv
376.531 1753.07 372.438 1732.6 388.809 1729.87 cv
405.18 1727.14 427.008 1727.14 427.008 1727.14 cv
427.008 1727.14 357.431 1718.96 313.775 1706.68 cv
270.119 1694.4 204.634 1682.12 189.627 1658.93 cv
177.604 1640.35 190.095 1619.15 195.539 1611.46 cv
186.922 1622.71 156.088 1661.86 143.243 1663.02 cv
128.236 1664.39 83.2158 1664.39 83.2158 1664.39 cv
83.2158 1664.39 166.435 1667.12 192.356 1679.4 cv
218.277 1691.67 225.098 1702.59 227.827 1718.96 cv
230.555 1735.33 234.648 1754.43 219.641 1772.17 cv
204.634 1789.9 107.772 1778.99 88.6729 1778.99 cv
125.507 1788.54 184.17 1800.81 189.627 1814.46 cv
193.44 1823.99 189.928 1844.83 187.465 1856.53 cv
167.232 1920.44 145.706 1956.59 125.507 1975.44 cv
117.222 1983.17 109.831 1992.02 101.071 2000 cv
114.673 2000 li
133.409 1984.64 149.602 1971.35 156.885 1965.89 cv
173.256 1953.61 208.727 1926.33 223.733 1933.15 cv
238.74 1939.97 279.668 1969.98 279.668 1969.98 cv
279.668 1969.98 212.819 1914.05 201.905 1896.31 cv
195.584 1886.04 198.873 1851.51 198.785 1837 cv
205.126 1824.13 212.808 1809.27 219.641 1798.09 cv
234.648 1773.53 255.112 1727.14 271.483 1721.69 cv
287.854 1716.23 313.775 1720.32 338.332 1736.69 cv
362.888 1753.07 422.916 1815.82 442.015 1836.29 cv
449.644 1844.46 459.666 1856.33 468.953 1867.65 cv
486.09 1912.88 443.979 1936.16 429.737 1956.34 cv
421.889 1967.46 406.862 1984.5 392.575 2000 cv
403.472 2000 li
435.114 1974.48 479.877 1942.99 512.957 1944.06 cv
555.249 1945.43 619.369 1968.62 619.369 1968.62 cv
619.369 1968.62 553.884 1938.6 533.42 1926.33 cv
520.066 1918.31 499.743 1894.62 481.923 1873.81 cv
cp
f
2000 95.5718 mo
2000 70.7583 li
1986.22 91.8135 1961.8 125.508 1961.8 125.508 cv
1965.69 127.843 1981.13 113.303 2000 95.5718 cv
cp
f
1987.72 25.917 mo
1992.53 27.9775 1996.64 30.1255 2000 32.4023 cv
2000 22.8916 li
1983.56 21.9395 1976.56 21.1367 1987.72 25.917 cv
cp
f
683.488 1990.45 mo
671.21 1993.17 642.561 1986.35 631.646 1980.9 cv
627.995 1979.07 639.163 1988.08 654.5 2000 cv
700.933 2000 li
701.009 1999.53 701.104 1999.07 701.224 1998.64 cv
705.316 1983.63 713.502 1967.25 713.502 1967.25 cv
713.502 1967.25 695.767 1987.72 683.488 1990.45 cv
cp
f
1152.79 1810.36 mo
1139.15 1819.91 1129.6 1817.19 1118.69 1793.99 cv
1107.77 1770.8 1091.4 1750.34 1094.13 1762.62 cv
1096.12 1771.55 1102.32 1813.09 1100.95 1839.01 cv
1099.59 1864.93 1094.13 1920.87 1094.13 1929.05 cv
1094.13 1937.24 1110.5 1866.3 1126.87 1844.47 cv
1143.24 1822.64 1166.44 1800.81 1152.79 1810.36 cv
cp
f
1083.12 2000 mo
1091.63 2000 li
1095.03 1990.54 1098.67 1983.17 1102.32 1984.99 cv
1106.9 1987.28 1118.34 1994.28 1127.51 2000 cv
1132.28 2000 li
1118.88 1986.5 1093.76 1960.24 1092.77 1952.25 cv
1092.38 1949.14 1086.93 1976.51 1083.12 2000 cv
cp
f
1438.84 1797.04 mo
1412.88 1788.32 1325.09 1757.97 1304.23 1739.42 cv
1279.67 1717.59 1260.57 1671.21 1264.66 1641.2 cv
1268.75 1611.18 1311.05 1611.18 1334.24 1611.18 cv
1357.43 1611.18 1413.37 1601.63 1362.89 1597.54 cv
1312.41 1593.45 1252.38 1596.18 1240.11 1566.16 cv
1253.75 1601.63 1255.11 1612.55 1251.02 1628.92 cv
1246.93 1645.29 1221.01 1654.84 1171.89 1658.93 cv
1171.89 1658.93 1220.39 1666.02 1227.83 1682.13 cv
1236.01 1699.86 1218.28 1731.24 1215.55 1738.06 cv
1233.28 1717.59 1253.75 1713.5 1264.66 1721.69 cv
1275.58 1729.87 1327.42 1759.89 1358.8 1819.91 cv
1391.23 1881.95 1354.7 1795.36 1362.89 1784.44 cv
1369.51 1775.62 1419.8 1790.87 1438.84 1797.04 cv
cp
f
1438.84 1797.04 mo
1443.44 1798.58 1446.11 1799.45 1446.11 1799.45 cv
1446.11 1799.45 1443.35 1798.5 1438.84 1797.04 cv
cp
f
1404.79 1914.55 mo
1404.79 1914.55 1409.17 1962.74 1407.94 2000 cv
1427.6 2000 li
1442.16 1985.11 1458.71 1974.28 1473.01 1969.51 cv
1440.8 1977.09 1416.16 1944.87 1404.79 1914.55 cv
cp
f
1780.97 1941.6 mo
1782.79 1934.57 1783.8 1929.71 1783.8 1929.71 cv
1783.8 1929.71 1782.31 1934.6 1780.97 1941.6 cv
cp
f
1629.57 1791.72 mo
1628.88 1789.14 1628.41 1787.59 1628.41 1787.59 cv
1628.41 1787.59 1628.82 1789.16 1629.57 1791.72 cv
cp
f
1653.04 1834.96 mo
1642.29 1831.89 1632.79 1802.69 1629.57 1791.72 cv
1632.54 1802.83 1639.52 1832.96 1630.3 1840.65 cv
1618.93 1850.12 1584.82 1844.44 1546.92 1831.17 cv
1509.02 1817.91 1467.33 1810.33 1467.33 1810.33 cv
1473.01 1812.22 1545.02 1844.44 1560.18 1857.7 cv
1573.03 1868.94 1591.32 1878.83 1589.68 1897.73 cv
1586.94 1901.13 1583.49 1904.95 1579.13 1908.87 cv
1560.18 1925.92 1533.65 1939.19 1491.96 1961.93 cv
1486.97 1964.65 1539.34 1948.66 1579.13 1952.45 cv
1618.93 1956.24 1653.04 1971.75 1689.05 2000 cv
1833.96 2000 li
1813.23 1996.32 1794.23 1991.73 1787.59 1986.56 cv
1776.24 1977.74 1778.31 1955.5 1780.97 1941.6 cv
1776.69 1958.17 1767.91 1986.8 1757.27 1992.25 cv
1742.11 2000 1656.83 1969.51 1626.51 1950.56 cv
1596.67 1931.9 1599.87 1904.08 1599.98 1890.56 cv
1605.75 1877.16 1620.29 1858.51 1656.83 1846.33 cv
1719.37 1825.49 1745.9 1816.01 1745.9 1816.01 cv
1745.9 1816.01 1666.3 1838.75 1653.04 1834.96 cv
cp
f
1897.5 1696.63 mo
1886.13 1732.63 1884.23 1747.79 1867.18 1759.16 cv
1850.12 1770.53 1812.22 1791.38 1745.9 1816.01 cv
1766.74 1816.01 1783.8 1814.12 1783.8 1825.49 cv
1783.8 1836.86 1793.27 1850.12 1787.59 1908.87 cv
1787.59 1908.87 1823.59 1821.7 1844.44 1793.27 cv
1865.28 1764.85 1903.18 1762.95 1927.82 1764.85 cv
1901.29 1757.27 1893.71 1732.63 1897.5 1696.63 cv
cp
f
1816.01 1582.92 mo
1800.85 1571.55 1781.9 1563.97 1789.48 1524.18 cv
1781.9 1554.5 1687.15 1569.66 1628.41 1571.55 cv
1755.37 1573.45 1859.6 1620.82 1876.65 1628.4 cv
1893.71 1635.98 1897.5 1649.25 1901.29 1681.46 cv
1906.97 1654.93 1920.24 1649.25 1948.66 1647.36 cv
1963.13 1646.39 1983.49 1648.86 2000 1651.52 cv
2000 1649.77 li
1972.91 1643 1933.44 1633.13 1914.55 1628.4 cv
1884.23 1620.82 1831.17 1594.29 1816.01 1582.92 cv
cp
f
1637.34 1575.5 mo
1626.72 1576.16 1584.29 1578.41 1567.76 1573.45 cv
1548.81 1567.76 1509.02 1505.23 1509.02 1505.23 cv
1537.45 1565.87 1529.86 1577.24 1482.49 1584.82 cv
1435.11 1592.4 1391.53 1607.56 1406.69 1605.66 cv
1421.85 1603.77 1509.02 1596.19 1522.28 1599.98 cv
1535.55 1603.77 1543.13 1624.61 1565.87 1662.51 cv
1554.5 1628.4 1569.66 1615.14 1582.92 1596.19 cv
1594.3 1579.94 1627.98 1576.23 1637.34 1575.5 cv
cp
f
1637.34 1575.5 mo
1638.9 1575.41 1639.78 1575.34 1639.78 1575.34 cv
1639.78 1575.34 1638.89 1575.38 1637.34 1575.5 cv
cp
f
1449.53 1426.12 mo
1454.91 1435.95 1459.75 1440.8 1459.75 1440.8 cv
1459.75 1440.8 1455.45 1434.49 1449.53 1426.12 cv
cp
f
1449.53 1426.12 mo
1442.76 1413.75 1435.11 1393.5 1435.11 1365 cv
1435.11 1313.83 1425.64 1292.99 1471.12 1279.72 cv
1431.32 1285.41 1410.48 1292.99 1376.37 1245.61 cv
1393.42 1281.62 1406.69 1304.36 1412.37 1327.1 cv
1418.06 1349.84 1419.95 1372.58 1404.79 1368.79 cv
1389.63 1365 1306.25 1340.36 1306.25 1340.36 cv
1306.25 1340.36 1408.58 1376.37 1419.95 1387.74 cv
1426.9 1394.69 1440.22 1412.96 1449.53 1426.12 cv
cp
f
1211.5 1336.57 mo
1228.56 1328.99 1292.99 1340.36 1292.99 1340.36 cv
1292.99 1340.36 1228.56 1313.83 1230.45 1304.36 cv
1232.35 1294.88 1256.98 1228.56 1256.98 1228.56 cv
1256.98 1228.56 1222.87 1292.99 1198.24 1317.62 cv
1173.6 1342.26 1122.44 1346.05 1122.44 1346.05 cv
1122.44 1346.05 1179.29 1346.05 1184.97 1357.42 cv
1190.66 1368.79 1203.92 1395.32 1209.61 1421.85 cv
1209.61 1421.85 1194.45 1344.15 1211.5 1336.57 cv
cp
f
1306.25 1162.23 mo
1319.52 1169.81 1368.79 1234.24 1368.79 1234.24 cv
1368.79 1234.24 1313.83 1141.38 1306.25 1111.06 cv
1298.67 1080.74 1300.57 1042.85 1325.2 1018.21 cv
1300.57 1035.26 1262.76 1017.62 1251.39 1002.46 cv
1240.02 987.295 1232.91 958.823 1244.28 945.558 cv
1217.75 951.243 1211.5 938.618 1179.29 921.563 cv
1183.18 925.193 1187.78 930.108 1192.82 935.876 cv
1191.25 934.648 1189.51 933.397 1187.59 932.168 cv
1190.69 934.878 1193.35 937.154 1195.44 938.905 cv
1227.27 976.029 1274.04 1042.84 1274.04 1042.84 cv
1281.62 1054.21 1292.99 1067.48 1289.2 1107.27 cv
1285.41 1147.07 1270.25 1200.13 1270.25 1200.13 cv
1270.25 1200.13 1292.99 1154.65 1306.25 1162.23 cv
cp
f
1115.47 858.141 mo
1111.41 851.71 1107.69 845.277 1105.38 840.078 cv
1097.8 823.023 1122.44 773.753 1135.7 735.853 cv
1124.33 760.488 1095.91 805.968 1080.75 807.863 cv
1067.85 809.475 1045.36 809.708 1013.27 799.251 cv
1050.11 814.956 1083.61 841.9 1101.59 853.343 cv
1112.96 866.607 1120.54 883.663 1112.96 900.717 cv
1105.38 917.772 1042.84 959.462 1042.84 959.462 cv
1042.84 959.462 1111.07 923.457 1143.28 921.562 cv
1163.62 920.366 1177.91 925.968 1187.59 932.168 cv
1169.4 916.242 1136.24 885.353 1115.47 858.141 cv
cp
f
995.986 977.217 mo
1010.18 973.666 1022 968.938 1022 968.938 cv
1022 968.938 1011.04 972.11 995.986 977.217 cv
cp
f
900.719 915.877 mo
900.719 915.877 913.984 967.042 904.509 993.573 cv
895.034 1020.1 864.714 1056.11 864.714 1056.11 cv
864.714 1056.11 893.139 1031.47 921.564 1010.63 cv
938.9 997.916 972.449 985.202 995.986 977.217 cv
981.764 980.776 965.159 983.155 955.674 978.413 cv
936.724 968.938 910.194 925.352 900.719 915.877 cv
cp
f
1272.73 934.889 mo
1332.57 894.898 1332.01 921.858 1350.96 931.333 cv
1345.28 925.648 1349.84 904.507 1344.15 870.397 cv
1342.01 857.552 1344.56 841.67 1348.31 827.396 cv
1359.85 804.26 1382.88 760.693 1410.48 722.585 cv
1450.27 667.63 1463.54 648.68 1497.65 650.575 cv
1531.76 652.47 1579.13 669.525 1596.19 692.265 cv
1613.25 715.005 1605.67 764.276 1590.5 815.441 cv
1611.35 751.011 1626.51 707.425 1643.57 696.055 cv
1659.28 685.58 1699.11 686.364 1705.29 686.552 cv
1697.72 686.27 1639.04 683.578 1628.41 667.63 cv
1617.04 650.575 1618.93 572.879 1624.62 544.454 cv
1609.46 597.515 1605.66 603.2 1596.19 612.675 cv
1586.71 622.15 1520.39 635.415 1476.8 642.995 cv
1433.22 650.575 1399.11 654.365 1346.05 593.725 cv
1385.84 639.205 1408.58 665.735 1404.79 682.79 cv
1401.69 696.741 1370.7 770.28 1351.22 817.334 cv
1354.74 806.1 1358.53 796.852 1360.45 792.427 cv
1328.44 861.646 1293.41 908.565 1272.73 934.889 cv
cp
f
1360.45 792.427 mo
1360.71 791.884 1360.96 791.352 1361.21 790.806 cv
1362.18 788.681 1361.73 789.502 1360.45 792.427 cv
cp
f
1343.95 999.611 mo
1340.55 1002.86 1338.47 1004.94 1338.47 1004.94 cv
1338.47 1004.94 1340.75 1002.97 1343.95 999.611 cv
cp
f
1591.61 799.327 mo
1592.12 797.504 1592.4 796.491 1592.4 796.491 cv
1592.4 796.491 1592.12 797.49 1591.61 799.327 cv
cp
f
1705.29 686.552 mo
1705.82 686.572 1706.1 686.58 1706.1 686.58 cv
1706.1 686.58 1705.82 686.568 1705.29 686.552 cv
cp
f
1572.85 973.998 mo
1573.19 974.083 1573.46 974.15 1573.68 974.207 cv
1573.44 974.146 1573.16 974.075 1572.85 973.998 cv
cp
f
1572.85 973.998 mo
1572.09 973.81 1571.19 973.584 1570.35 973.374 cv
1571.4 973.637 1572.22 973.842 1572.85 973.998 cv
cp
f
1574.44 974.396 mo
1574.51 974.414 1574.51 974.414 1574.44 974.396 cv
1574.44 974.396 li
cp
f
1574.44 974.396 mo
1574.36 974.376 1574.19 974.333 1573.88 974.257 cv
1574.15 974.324 1574.35 974.373 1574.44 974.396 cv
cp
f
1570.71 975.215 mo
1570.36 974.574 1570 973.902 1569.65 973.198 cv
1566.18 966.299 1562.9 956.294 1562.08 942.407 cv
1560.36 913.211 1586.66 817.089 1591.61 799.327 cv
1587.04 815.444 1563.56 896.026 1543.13 921.562 cv
1520.39 949.987 1469.22 944.302 1425.64 948.092 cv
1382.05 951.882 1366.89 944.302 1351.73 936.722 cv
1378.95 957.545 1355.47 987.539 1343.95 999.611 cv
1353.14 990.826 1372.01 973.448 1385.84 965.147 cv
1404.79 953.777 1455.96 957.567 1518.49 965.147 cv
1548.91 968.834 1564.08 973.866 1571.65 978.063 cv
1582.93 993.573 li
1590.51 1004.94 1588.61 1044.74 1590.51 1076.95 cv
1596.19 1020.1 1598.09 993.573 1620.83 991.678 cv
1643.57 989.783 1721.26 967.042 1721.26 967.042 cv
1721.26 967.042 1599.95 995.168 1570.71 975.215 cv
cp
f
1789.48 1302.46 mo
1774.32 1306.25 1717.47 1289.2 1717.47 1289.2 cv
1717.47 1289.2 1785.69 1317.62 1798.96 1323.31 cv
1812.22 1328.99 1797.06 1393.42 1800.85 1450.27 cv
1800.85 1431.32 1814.12 1355.52 1821.7 1323.31 cv
1829.28 1291.09 1878.55 1203.92 1878.55 1203.92 cv
1878.55 1203.92 1804.64 1298.67 1789.48 1302.46 cv
cp
f
1601.88 1243.71 mo
1584.82 1232.34 1590.51 1188.76 1590.51 1188.76 cv
1590.51 1188.76 1582.93 1232.34 1577.24 1241.82 cv
1571.56 1251.3 1518.5 1270.25 1518.5 1270.25 cv
1518.5 1270.25 1567.77 1253.19 1582.93 1253.19 cv
1598.09 1253.19 1656.83 1264.56 1656.83 1264.56 cv
1656.83 1264.56 1618.93 1255.08 1601.88 1243.71 cv
cp
f
1836.86 917.772 mo
1836.86 917.772 1833.07 934.828 1810.33 944.303 cv
1787.59 953.777 1734.53 970.833 1734.53 970.833 cv
1734.53 970.833 1817.91 957.567 1842.54 961.357 cv
1867.18 965.147 1893.71 968.938 1905.08 985.993 cv
1916.45 1003.05 1922.13 1046.63 1916.45 1088.32 cv
1910.76 1130.01 1878.55 1203.92 1878.55 1203.92 cv
1878.55 1203.92 1920.24 1173.6 1990.35 1167.91 cv
1961.93 1162.23 1929.71 1160.33 1929.71 1152.75 cv
1929.71 1145.17 1925.92 1099.69 1931.61 1075.06 cv
1937.29 1050.42 1963.83 991.678 1992.25 993.573 cv
1994.83 993.745 1997.42 993.964 2000 994.219 cv
2000 989.276 li
1982.46 984.91 1963.53 980.642 1948.66 978.413 cv
1910.76 972.728 1836.86 940.513 1836.86 917.772 cv
cp
f
1747.79 688.475 mo
1791.38 699.845 1836.86 709.32 1840.65 720.69 cv
1844.44 732.06 1846.33 815.441 1846.33 815.441 cv
1846.33 815.441 1865.28 728.27 1893.71 677.104 cv
1874.76 696.055 1806.54 699.845 1747.79 688.475 cv
cp
f
1927.82 489.498 mo
1927.82 489.498 1965.72 517.923 1965.72 538.768 cv
1965.72 559.613 1931.61 612.673 1931.61 612.673 cv
1931.61 612.673 1971.58 564.373 2000 561.458 cv
2000 533.757 li
1996.79 532.065 1994.15 530.558 1992.25 529.293 cv
1969.51 514.133 1927.82 489.498 1927.82 489.498 cv
cp
f
1751.56 649.296 mo
1750.35 652.552 1749.69 654.364 1749.69 654.364 cv
1749.69 654.364 1750.36 652.55 1751.56 649.296 cv
cp
f
1797.06 353.056 mo
1797.06 353.056 1764 366.582 1738.02 374.896 cv
1760.86 369.735 1767.99 383.77 1778.11 402.327 cv
1789.48 423.172 1810.33 459.177 1808.43 480.022 cv
1806.74 498.604 1761.39 622.588 1751.56 649.296 cv
1761.75 621.826 1810.94 491.147 1832.04 471.056 cv
1839.43 464.02 1853.91 468.652 1880.44 470.547 cv
1859.6 459.177 1804.64 423.172 1791.38 396.642 cv
1778.11 370.111 1797.06 353.056 1797.06 353.056 cv
cp
f
1738.02 374.896 mo
1735.21 375.533 1732.17 376.443 1728.84 377.691 cv
1731.75 376.862 1734.83 375.918 1738.02 374.896 cv
cp
f
1872.3 267.616 mo
1859.02 244.625 1880.96 210.54 1910.62 184.176 cv
1873.7 217.58 1843.81 224.612 1843.81 224.612 cv
1813.92 212.306 1789.31 145.499 1775.25 106.82 cv
1765.22 79.2568 1761.45 55.2739 1762.66 40.5801 cv
1772.67 28.5527 1787.72 15.165 1808.43 13.0938 cv
1846.33 9.30273 1903.18 9.30273 1903.18 9.30273 cv
1903.18 9.30273 1866.45 5.77051 1833.96 0 cv
1689.05 0 li
1709.11 15.7466 1723.88 33.3062 1733.68 45.4443 cv
1756.3 89.3833 1785.61 171.772 1794.58 191.209 cv
1799.67 202.221 1788.01 217.721 1774.58 230.829 cv
1787.34 222.631 1801.91 216.335 1813.92 219.338 cv
1838.54 225.491 1849.69 246.45 1867.4 264.549 cv
1868.8 268.109 1876.13 287.955 1870.97 299.996 cv
1865.28 313.261 1823.59 334.106 1823.59 334.106 cv
1823.59 334.106 1859.6 324.631 1897.5 307.576 cv
1918.24 298.244 1963.38 296.288 2000 296.43 cv
2000 292.929 li
1970.29 290.078 1936.42 286.74 1920.24 284.836 cv
1897.45 282.154 1880.36 272.839 1872.3 267.616 cv
cp
f
0 1651.52 mo
15.9189 1654.09 28.2539 1656.83 28.2539 1656.83 cv
28.2539 1656.83 16.396 1653.87 0 1649.77 cv
0 1651.52 li
cp
f
0 994.219 mo
25.9209 996.78 50.9951 1003.05 50.9951 1003.05 cv
50.9951 1003.05 27.1855 996.045 0 989.276 cv
0 994.219 li
cp
f
5.51465 561.508 mo
33.9404 565.298 141.956 593.724 141.956 593.724 cv
141.956 593.724 35.3105 552.338 0 533.757 cv
0 561.458 li
1.89453 561.264 3.73779 561.271 5.51465 561.508 cv
cp
f
1643.57 320.841 mo
1653.04 337.896 1653.04 389.061 1651.15 425.066 cv
1651.15 425.066 1677.68 390.957 1696.63 387.167 cv
1670.1 377.691 1653.04 336.001 1671.99 313.261 cv
1686.54 295.802 1713.37 277.229 1725.05 269.542 cv
1710.19 278.9 1670.23 302.688 1654.94 298.101 cv
1635.99 292.416 1543.13 218.51 1543.13 218.51 cv
1543.13 218.51 1634.09 303.786 1643.57 320.841 cv
cp
f
1725.05 269.542 mo
1728.61 267.302 1730.74 265.885 1730.74 265.885 cv
1730.74 265.885 1728.59 267.216 1725.05 269.542 cv
cp
f
1743.6 256.258 mo
1743.6 256.258 1760.12 244.927 1774.58 230.829 cv
1757.45 241.83 1743.6 256.258 1743.6 256.258 cv
cp
f
1432.42 92.7559 mo
1451.76 105.063 1479.89 150.772 1481.64 154.289 cv
1483.4 157.805 1439.45 68.1426 1428.9 45.2871 cv
1420.84 27.8135 1416.89 18.5605 1419.4 9.07617 cv
1422.04 5.9082 1424.78 2.87988 1427.6 0 cv
1423.63 0 li
1413.11 0 li
1407.94 0 li
1407.62 9.84033 1406.9 18.9131 1405.61 26.1411 cv
1405.43 27.0537 1405.25 27.9834 1405.07 28.9248 cv
1404.98 29.3379 1404.89 29.75 1404.79 30.1484 cv
1404.81 30.1172 1404.83 30.0869 1404.85 30.0562 cv
1399.82 56.1499 1394.25 91.6377 1394.25 91.6377 cv
1394.25 91.6377 1413.08 80.4492 1432.42 92.7559 cv
cp
f
152.322 274.845 mo
177.712 262.151 309.961 130.415 321.587 101.349 cv
330.866 78.1523 304.539 34.6113 273.976 0 cv
266.191 0 li
278.078 13.5239 289.392 29.3799 298.332 45.8423 cv
323.225 91.6846 301.888 116.966 284.106 131.191 cv
266.325 145.416 202.314 195.202 148.972 209.427 cv
118.145 217.647 48.127 216.366 0 207.644 cv
0 273.084 li
66.4976 280.221 137.101 282.456 152.322 274.845 cv
cp
.521569 .501961 .47451 rgb
f
130.729 0 mo
91.5 30.8457 43.3047 71.8433 0 111.908 cv
0 130.869 li
41.522 91.0889 100.854 36.7109 146.063 0 cv
130.729 0 li
cp
f
368.868 55.1235 mo
354.87 104.118 508.512 275.167 538.133 279.399 cv
567.754 283.631 720.093 101.671 715.861 76.2813 cv
713.472 61.9473 671.97 27.3843 629.427 0 cv
611.065 0 li
664.709 33.7773 700.088 83.3218 689.512 99.1851 cv
675.288 120.522 597.051 223.652 561.489 223.652 cv
525.927 223.652 461.916 163.196 426.354 116.966 cv
390.793 70.7363 397.905 35.1738 419.242 17.3926 cv
424.944 12.6406 433.806 6.38672 444.569 0 cv
421.858 0 li
396.094 14.5737 375.163 33.0913 368.868 55.1235 cv
cp
f
214.557 337.281 mo
218.45 283.559 304.083 184.992 334.611 171.956 cv
366.108 158.506 495.246 318.169 495.246 348.868 cv
495.246 368.305 488.856 482.524 454.111 551.001 cv
442.429 574.025 340.729 555.308 329.637 548.653 cv
294.408 527.516 210.663 391.004 214.557 337.281 cv
cp
325.457 618.783 mo
339.429 620.335 443.942 618.783 456.637 593.393 cv
494.393 517.879 511.648 373.624 511.648 352.19 cv
511.648 318.337 372.004 144.841 329.688 165.999 cv
297.35 182.168 194.276 297.179 190.044 356.422 cv
185.813 415.665 287.372 614.551 325.457 618.783 cv
cp
f
235.97 302.553 mo
240.667 267.324 330.022 176.331 344.004 178.079 cv
381.582 182.775 487.268 333.085 484.919 354.222 cv
482.57 375.359 444.994 488.091 376.884 481.045 cv
308.775 473.999 231.272 337.782 235.97 302.553 cv
cp
329.637 548.653 mo
340.729 555.308 442.429 574.025 454.111 551.001 cv
488.856 482.524 495.246 368.305 495.246 348.868 cv
495.246 318.169 366.108 158.506 334.611 171.956 cv
304.083 184.992 218.45 283.559 214.557 337.281 cv
210.663 391.004 294.408 527.516 329.637 548.653 cv
cp
.580392 .572549 .537255 rgb
f
803.31 312.556 mo
821.091 408.573 799.754 508.146 785.529 540.152 cv
771.305 572.158 703.737 604.164 678.844 600.607 cv
653.951 597.051 547.265 547.265 547.265 511.703 cv
547.265 476.142 557.933 362.343 586.383 323.225 cv
647.473 239.228 724.226 177.563 746.411 173.865 cv
767.748 170.309 785.529 216.539 803.31 312.556 cv
cp
751.754 162.191 mo
727.143 138.563 574.026 314.529 561.331 348.382 cv
548.636 382.235 506.319 551.5 519.015 585.354 cv
526.447 605.173 629.037 640.365 662.89 640.365 cv
684.048 640.365 772.912 606.512 789.838 585.354 cv
809.971 560.188 857.544 263.75 751.754 162.191 cv
cp
.521569 .501961 .47451 rgb
f
207.762 512.005 mo
169.328 446.923 115.979 354.796 97.7397 334.276 cv
85.4731 320.476 45.9795 315.568 0 316.729 cv
0 324.863 li
37.457 323.641 67.0293 327.282 79.959 334.276 cv
106.963 348.884 145.416 426.354 170.309 465.473 cv
195.202 504.591 252.101 575.714 223.651 568.602 cv
205.861 564.154 90.7324 512.428 0 469.073 cv
0 510.513 li
100.972 556.971 205.477 596.638 224.689 596.638 cv
271.237 596.638 240.663 567.716 207.762 512.005 cv
cp
f
112.451 963.844 mo
158.999 942.686 304.406 704.647 277.484 667.63 cv
243.631 621.082 20.0684 581.222 .0419922 582.997 cv
.027832 582.998 .0141602 583 0 583.002 cv
0 593.574 li
93.333 591.693 248.722 647.148 262.77 671.731 cv
276.994 696.625 259.213 717.962 234.32 774.861 cv
209.426 831.76 134.747 942.001 95.6289 942.001 cv
78.7051 942.001 39.1489 913.377 0 878.019 cv
0 960.963 li
46.688 970.155 91.9189 973.176 112.451 963.844 cv
cp
f
547.265 959.783 mo
575.714 938.446 735.743 845.984 792.642 853.097 cv
849.541 860.209 874.434 942.001 867.321 974.007 cv
860.208 1006.01 735.743 1166.04 703.737 1176.71 cv
671.731 1187.38 621.945 1144.71 597.051 1126.92 cv
572.158 1109.14 525.045 976.447 547.265 959.783 cv
cp
663.247 1248.17 mo
713.928 1224.89 887.927 1007.95 882.387 962.439 cv
879.933 942.274 863.107 884.847 811.792 848.128 cv
772.595 820.081 565.919 926.565 493.982 977.345 cv
439.305 1015.94 475.273 1037.52 523.603 1100.06 cv
595.541 1193.16 643.752 1257.13 663.247 1248.17 cv
cp
f
636.169 703.737 mo
678.844 725.074 685.956 764.192 682.4 781.973 cv
678.844 799.754 632.613 838.872 589.939 863.765 cv
547.265 888.658 493.922 906.44 454.804 874.434 cv
415.686 842.428 333.893 714.405 358.787 689.513 cv
369.455 678.845 387.236 664.619 417.71 661.99 cv
480.71 656.555 593.495 682.4 636.169 703.737 cv
cp
417.71 647.765 mo
366.93 651.997 324.614 707.008 311.919 749.324 cv
301.811 783.02 331.063 866.536 392.32 948.21 cv
430.404 998.989 700.043 809.432 696.404 783.609 cv
690.469 741.49 663.866 711.961 650.449 698.545 cv
626.843 674.939 468.489 643.534 417.71 647.765 cv
cp
f
358.787 1023.79 mo
341.006 1052.24 223.651 1144.7 209.427 1123.37 cv
195.202 1102.03 156.084 1006.01 170.309 977.563 cv
188.855 940.47 259.576 840.368 281.128 854.932 cv
310.155 874.548 376.567 995.344 358.787 1023.79 cv
cp
274.016 844.263 mo
244.394 848.495 131.676 999.262 134.372 1026.22 cv
138.603 1068.54 172.457 1148.94 197.847 1170.1 cv
223.236 1191.26 367.112 1051.61 371.343 1017.76 cv
375.574 983.907 303.637 840.032 274.016 844.263 cv
cp
f
329.742 1139.26 mo
357.392 1116.21 412.691 1087.03 434.197 1088.57 cv
449.519 1089.66 517.146 1169.98 552.477 1216.06 cv
587.807 1262.14 600.096 1305.15 598.56 1317.44 cv
597.023 1329.73 572.447 1371.21 543.26 1378.89 cv
514.074 1386.57 371.436 1370.12 337.642 1357.83 cv
303.848 1345.54 278.319 1237.49 272.175 1215.98 cv
266.031 1194.48 302.092 1162.3 329.742 1139.26 cv
cp
592.3 1406.56 mo
623.078 1405.33 637.004 1338.64 634.616 1321.93 cv
630.384 1292.3 473.123 1105.67 444.192 1080.72 cv
415.262 1055.78 263.5 1167.98 249.538 1216.13 cv
235.072 1266.03 267.253 1379.71 301.006 1417.13 cv
323.391 1441.95 486.509 1410.79 592.3 1406.56 cv
cp
f
127.638 1135.42 mo
134.754 1125.93 108.703 1035.53 89.5527 1021.17 cv
75.6606 1010.75 24.939 1003.53 0 1003.33 cv
0 1011.76 li
17.415 1008.69 73.022 1018.2 87.0396 1027.12 cv
103.937 1037.88 117.761 1088.57 117.761 1102.39 cv
117.761 1116.22 85.5034 1128.51 53.2451 1131.58 cv
38.9727 1132.94 18.3872 1132.19 0 1128.94 cv
0 1149.02 li
50.6694 1150.77 118.812 1147.19 127.638 1135.42 cv
cp
f
118.974 1638.88 mo
161.29 1626.18 231.759 1502.9 250.154 1456.92 cv
258.617 1435.76 199.375 1232.64 157.058 1203.02 cv
133.392 1186.45 62.5527 1181.67 0 1186.67 cv
0 1198.66 li
41.6621 1194.81 96.2876 1194.62 146.947 1206.85 cv
172.376 1212.99 205.319 1305.16 219.144 1363.53 cv
232.969 1421.9 231.432 1437.26 226.824 1446.48 cv
222.216 1455.7 154.627 1567.83 120.833 1587.8 cv
102.123 1598.86 48.6982 1577.99 0 1551.25 cv
0 1625.77 li
53.5176 1638.14 101.967 1643.98 118.974 1638.88 cv
cp
f
822.492 165.048 mo
864.808 173.512 1043.53 93.3555 1055.23 46.5635 cv
1058.16 34.8359 1061.37 18.7227 1064.43 0 cv
1040.83 0 li
1035.72 21.7124 1031.13 37.2368 1028.66 40.9473 cv
1019.44 54.772 921.134 120.825 882.732 122.361 cv
844.33 123.897 778.277 70.1333 767.524 53.2363 cv
762.115 44.7363 757.097 23.7964 755.789 0 cv
717.461 0 li
724.735 35.0254 782.881 157.126 822.492 165.048 cv
cp
f
876.587 220.671 mo
884.267 205.31 913.454 179.196 944.176 166.908 cv
974.898 154.619 1052.96 137.359 1070.14 140.794 cv
1085.5 143.866 1087.03 229.888 1080.89 246.785 cv
1074.74 263.682 1042.49 299.012 1011.76 312.837 cv
981.041 326.662 885.804 365.064 875.051 349.704 cv
864.298 334.343 868.907 236.032 876.587 220.671 cv
cp
864.193 388.009 mo
889.583 404.936 1054.62 324.534 1075.77 303.376 cv
1096.93 282.218 1101.75 140.152 1071.54 134.111 cv
1029.23 125.648 872.656 176.427 859.961 206.048 cv
843.292 244.943 838.803 371.082 864.193 388.009 cv
cp
f
1194.56 435.724 mo
1208.38 452.621 1197.63 503.312 1185.34 543.25 cv
1173.05 583.189 1119.29 710.685 1102.39 712.221 cv
1085.5 713.757 992.678 711.374 965.028 686.796 cv
937.378 662.218 879.007 563.909 882.079 533.187 cv
885.151 502.464 887.34 444.94 910.381 428.043 cv
933.423 411.146 1037.88 374.28 1067.06 375.816 cv
1096.25 377.352 1180.73 418.827 1194.56 435.724 cv
cp
888.308 429.045 mo
860.809 447.378 837.529 543.299 837.529 568.688 cv
837.529 594.079 888.308 716.795 930.625 737.954 cv
968.473 756.878 1061.63 797.373 1087.19 771.807 cv
1112.58 746.417 1235.3 492.52 1218.38 454.435 cv
1201.45 416.351 1099.89 374.034 1070.27 369.803 cv
1034.48 364.689 926.393 403.655 888.308 429.045 cv
cp
f
858.158 752.16 mo
847.405 761.376 775.208 796.707 756.775 785.954 cv
738.342 775.202 709.156 687.644 722.981 676.891 cv
736.537 666.346 794.777 652.875 813.611 655.386 cv
836.652 658.458 868.911 742.943 858.158 752.16 cv
cp
867.81 758.416 mo
872.818 748.399 842.42 665.321 821.262 652.625 cv
800.104 639.931 745.093 661.089 715.472 673.783 cv
690.566 684.457 732.398 796.5 749.324 809.195 cv
766.251 821.891 859.347 775.343 867.81 758.416 cv
cp
f
893.053 813.944 mo
893.053 801.583 917.256 793.058 933.584 789.904 cv
949.713 786.788 1023.24 819.209 1066.11 853.499 cv
1090.83 873.276 1056.22 915.304 1038.91 925.192 cv
1021.61 935.081 967.218 922.72 949.913 910.359 cv
932.608 897.998 893.053 826.305 893.053 813.944 cv
cp
966.725 960.215 mo
987.883 977.142 1097.91 922.13 1097.91 884.046 cv
1097.91 853.24 979.42 782.487 928.64 782.487 cv
894.787 782.487 873.629 812.108 882.092 837.499 cv
890.555 862.888 932.226 932.617 966.725 960.215 cv
cp
f
1331.28 779.81 mo
1320.52 804.387 1254.47 901.162 1229.89 896.553 cv
1205.32 891.945 1143.87 839.717 1142.34 821.284 cv
1140.8 802.851 1148.48 752.16 1163.84 718.366 cv
1179.2 684.572 1232.11 554.003 1254.47 554.003 cv
1288.26 554.003 1366.61 656.922 1368.14 669.21 cv
1369.68 681.499 1342.03 755.232 1331.28 779.81 cv
cp
1254.86 547.23 mo
1225.24 547.23 1119.45 787.392 1119.45 822.286 cv
1119.45 851.908 1212.55 936.54 1242.17 928.077 cv
1271.79 919.613 1386.04 720.727 1381.81 686.874 cv
1377.58 653.021 1284.48 547.23 1254.86 547.23 cv
cp
f
991.94 1004.3 mo
1011.72 996.885 1120.5 944.97 1157.58 947.442 cv
1187.69 949.449 1234.21 1041.39 1246.58 1071.05 cv
1258.94 1100.72 1206.24 1236.09 1179.83 1271.3 cv
1164.99 1291.08 1048.8 1273.77 1011.72 1263.88 cv
992.805 1258.84 922.198 1225.76 900.469 1182.3 cv
888.108 1157.58 883.164 1105.66 893.053 1080.94 cv
903.521 1054.77 972.163 1011.72 991.94 1004.3 cv
cp
843.016 1210.18 mo
855.71 1244.03 1088.45 1341.36 1147.69 1324.43 cv
1206.93 1307.51 1278.87 1125.55 1266.18 1083.23 cv
1253.48 1040.91 1181.55 943.588 1151.92 939.356 cv
1122.3 935.124 932.234 1020.3 906.49 1036.68 cv
859.942 1066.3 830.32 1176.33 843.016 1210.18 cv
cp
f
690.269 1356.07 mo
687.873 1340.09 731.1 1288.8 762.171 1267.08 cv
769.232 1260.55 775.807 1256.6 780.462 1257.68 cv
802.811 1252.42 906.734 1298.67 936.251 1316.71 cv
965.769 1334.75 957.57 1375.75 955.93 1395.43 cv
954.29 1415.1 887.055 1506.94 865.737 1515.14 cv
844.418 1523.34 695.189 1388.87 690.269 1356.07 cv
cp
856.667 1588.44 mo
882.057 1571.51 992.079 1381.09 970.921 1343 cv
949.763 1304.92 818.583 1254.14 784.729 1249.91 cv
750.876 1245.68 684.738 1330.34 666.244 1359.93 cv
645.085 1393.78 831.277 1605.37 856.667 1588.44 cv
cp
f
1156.16 139.258 mo
1162.3 123.897 1174.55 116.904 1200.7 116.216 cv
1259.08 114.68 1322.06 139.258 1331.27 151.546 cv
1349.17 175.406 1314.38 257.537 1306.7 274.435 cv
1299.02 291.332 1257.54 355.848 1237.57 349.703 cv
1217.6 343.559 1146.94 295.94 1142.33 271.362 cv
1137.72 246.785 1150.01 154.619 1156.16 139.258 cv
cp
1122.78 323.832 mo
1131.24 357.685 1203.18 391.538 1245.5 383.074 cv
1287.81 374.611 1359.75 175.725 1342.82 150.335 cv
1325.9 124.945 1186.25 95.3247 1152.4 120.714 cv
1125.11 141.184 1114.32 289.979 1122.78 323.832 cv
cp
f
1246.23 78.5845 mo
1275.57 84.4531 1335.09 91.2793 1364.71 78.5845 cv
1377.51 73.0986 1384.78 39.1606 1387.2 0 cv
1378.89 0 li
1369.67 17.4248 1332.81 47.0913 1303.62 44.019 cv
1287.3 42.3003 1247.41 21.3521 1213.56 0 cv
1152.64 0 li
1188.32 37.7881 1233.67 76.0728 1246.23 78.5845 cv
cp
f
1452.62 196.092 mo
1497.17 206.845 1612.38 325.125 1621.59 349.702 cv
1630.81 374.28 1609.31 515.601 1597.02 527.89 cv
1584.73 540.179 1482.14 575.143 1456.03 561.318 cv
1429.91 547.494 1339.28 461.472 1337.75 432.286 cv
1336.21 403.101 1325.13 372.744 1354.31 323.588 cv
1383.5 274.432 1430.43 190.734 1452.62 196.092 cv
cp
1282.07 441.729 mo
1271.96 488.905 1362.47 594.067 1404.79 615.226 cv
1447.1 636.384 1535.97 606.762 1574.05 589.835 cv
1612.14 572.909 1645.99 378.255 1624.83 335.938 cv
1603.67 293.622 1480.96 187.831 1451.33 187.831 cv
1421.71 187.831 1294.76 382.486 1282.07 441.729 cv
cp
f
1501.2 161.065 mo
1522.36 182.224 1612.28 265.004 1653.54 275.319 cv
1670.47 279.551 1772.03 220.308 1767.79 190.687 cv
1763.85 163.066 1723.11 43.4771 1666.16 0 cv
1652.17 0 li
1655.33 1.35938 1657.97 2.72949 1660 4.08057 cv
1710.69 37.875 1752.16 153.082 1752.16 163.834 cv
1752.16 174.587 1701.21 212.164 1679.7 212.164 cv
1658.2 212.164 1550.67 149.184 1533.78 138.432 cv
1516.88 127.679 1469.52 33.2661 1466.45 17.9053 cv
1465.13 11.2837 1465.23 5.23389 1469.96 0 cv
1451.9 0 li
1451.31 .919922 1450.81 1.85693 1450.42 2.81104 cv
1432.08 48.0562 1487.82 147.685 1501.2 161.065 cv
cp
f
1403.47 105.462 mo
1414.22 105.462 1434.19 117.751 1434.19 126.968 cv
1434.19 136.184 1406.54 168.442 1397.32 171.515 cv
1388.11 174.587 1381.96 153.46 1381.96 140.793 cv
1381.96 125.432 1389.31 105.462 1403.47 105.462 cv
cp
1385.56 183.23 mo
1394.02 195.926 1440.57 153.609 1444.8 136.683 cv
1449.03 119.757 1415.18 98.5981 1398.25 102.83 cv
1375.03 108.636 1367.22 155.731 1385.56 183.23 cv
cp
f
74.2603 1991.02 mo
125.04 1948.7 180.437 1849.5 163.124 1819.21 cv
153.974 1803.19 75.0015 1785.52 0 1778.91 cv
0 1787.04 li
4.13135 1787.28 8.33301 1787.56 12.6006 1787.89 cv
49.6938 1790.8 91.9673 1796.76 139.851 1812.72 cv
186.406 1828.24 108.814 1946.18 74.6738 1958.6 cv
61.6191 1963.34 32.6753 1963.55 0 1961.13 cv
0 1998.96 li
35.5898 2000.88 64.5176 1999.14 74.2603 1991.02 cv
cp
f
1646.17 566.293 mo
1649.25 541.716 1663.07 444.942 1672.29 432.653 cv
1681.5 420.365 1719.96 389.034 1741.41 391.178 cv
1756.77 392.714 1772.13 438.797 1778.28 463.375 cv
1784.42 487.953 1773.67 515.603 1765.99 535.572 cv
1758.31 555.541 1703.01 627.738 1689.19 624.666 cv
1675.36 621.593 1643.1 590.871 1646.17 566.293 cv
cp
1708.87 659.35 mo
1732.05 659.35 1792.9 491.515 1790 474.73 cv
1784.85 444.925 1761.02 384.1 1740.74 384.1 cv
1720.46 384.1 1679.89 410.954 1662.51 431.094 cv
1642.22 454.591 1627.74 612.355 1636.43 639.209 cv
1645.12 666.063 1685.69 659.35 1708.87 659.35 cv
cp
f
539.497 1679.7 mo
490.396 1701.53 403.108 1657.88 364.919 1652.43 cv
345.825 1649.7 272.175 1621.3 272.175 1586.96 cv
272.175 1576.05 296.725 1513.31 315.819 1505.13 cv
354.983 1488.34 566.774 1456.03 610.418 1461.48 cv
654.063 1466.94 719.529 1537.86 730.44 1565.14 cv
741.351 1592.42 588.597 1657.88 539.497 1679.7 cv
cp
750.752 1567.1 mo
738.058 1541.71 666.12 1461.31 628.036 1452.85 cv
589.951 1444.39 386.833 1469.78 331.821 1469.78 cv
276.81 1469.78 202.578 1629.86 204.873 1639.04 cv
213.336 1672.89 484.16 1719.44 526.477 1719.44 cv
568.793 1719.44 763.447 1592.49 750.752 1567.1 cv
cp
f
200.934 1755.26 mo
214.383 1749.49 213.47 1700.51 184.007 1687.55 cv
166.151 1679.7 65.2939 1666.57 0 1660.72 cv
0 1668.83 li
58.1768 1673.66 160.199 1686.05 177.095 1691.68 cv
186.405 1694.79 208.131 1735.13 195.716 1735.13 cv
187.343 1735.13 74.4912 1736.54 0 1731.75 cv
0 1755.06 li
74.1211 1760.71 180.562 1763.99 200.934 1755.26 cv
cp
f
1890.41 31.73 mo
1930.35 34.8022 1963.97 39.9155 1971.83 51.6992 cv
1981.04 65.5239 1921.13 119.288 1905.77 130.041 cv
1890.41 140.793 1848.94 176.124 1836.65 157.69 cv
1824.36 139.257 1785.96 50.1636 1793.64 44.019 cv
1801.32 37.8745 1850.47 28.6577 1890.41 31.73 cv
cp
1781.53 46.3516 mo
1767.56 88.2637 1827.82 216.553 1849.24 202.921 cv
1895.79 173.3 2008.24 63.186 1980.42 42.1196 cv
1965.88 31.1084 1794.23 8.2666 1781.53 46.3516 cv
cp
f
337.218 17.458 mo
340.806 19.8496 351.156 12.4355 364.251 0 cv
319.199 0 li
327.955 9.22754 334.513 15.6543 337.218 17.458 cv
cp
f
682.992 1927.56 mo
661.266 1943.08 555.741 1884.11 537.119 1871.69 cv
518.498 1859.28 506.083 1791 527.809 1778.58 cv
549.534 1766.17 651.955 1716.51 682.992 1716.51 cv
704.717 1716.51 754.376 1778.58 757.479 1803.41 cv
760.583 1828.24 704.718 1912.04 682.992 1927.56 cv
cp
673.241 1706.65 mo
639.388 1719.34 487.05 1770.12 474.355 1803.98 cv
461.66 1837.83 519.328 1894.43 537.829 1905.54 cv
558.988 1918.23 643.62 1969.01 673.241 1969.01 cv
702.862 1969.01 757.874 1850.53 766.337 1829.37 cv
782.053 1790.08 707.094 1693.96 673.241 1706.65 cv
cp
f
427.008 1733.7 mo
439.367 1734.88 459.046 1738.16 462.326 1744.72 cv
467.665 1755.4 439.368 1775.88 429.528 1779.16 cv
419.689 1782.44 400.01 1751.28 398.37 1743.08 cv
396.73 1734.88 409.244 1732.01 427.008 1733.7 cv
cp
388.565 1736.65 mo
379.41 1748.85 413.954 1791.66 426.649 1791.66 cv
439.344 1791.66 464.733 1766.27 468.965 1749.34 cv
473.197 1732.42 401.26 1719.72 388.565 1736.65 cv
cp
f
767.344 1649.61 mo
772.263 1633.21 780.463 1621.73 793.582 1620.09 cv
808.584 1618.21 890.335 1652.89 906.734 1662.73 cv
923.132 1672.57 890.335 1690.6 859.177 1697.16 cv
828.02 1703.72 778.823 1697.16 770.624 1695.52 cv
762.424 1693.88 762.424 1666.01 767.344 1649.61 cv
cp
925.31 1685.53 mo
948.929 1667.16 836.446 1622.06 802.593 1613.59 cv
768.74 1605.13 743.35 1668.6 747.582 1706.69 cv
751.813 1744.77 887.225 1715.15 925.31 1685.53 cv
cp
f
1712.23 294.404 mo
1732.2 275.971 1784.5 244.558 1805.93 242.177 cv
1833.58 239.104 1856.62 291.332 1844.33 295.94 cv
1832.04 300.549 1716.83 342.023 1709.15 334.343 cv
1701.47 326.662 1692.26 312.837 1712.23 294.404 cv
cp
1686.92 309.576 mo
1670 334.965 1686.92 368.818 1703.85 368.818 cv
1720.78 368.818 1839.26 313.808 1851.96 296.881 cv
1864.65 279.955 1826.57 233.406 1805.41 233.406 cv
1784.25 233.406 1695.39 296.88 1686.92 309.576 cv
cp
f
1864.3 492.561 mo
1880.65 497.102 1919.6 514.066 1928.82 526.355 cv
1938.03 538.644 1911.92 589.334 1899.63 609.304 cv
1887.34 629.274 1810.54 641.563 1789.03 641.563 cv
1767.53 641.563 1836.65 484.88 1864.3 492.561 cv
cp
1847.73 484.26 mo
1826.11 491.467 1767.33 636.599 1763.1 661.989 cv
1758.86 687.378 1877.35 666.22 1877.35 666.22 cv
1877.35 666.22 1940.82 564.661 1940.82 539.271 cv
1940.82 513.882 1873.12 475.797 1847.73 484.26 cv
cp
f
1807.47 868.903 mo
1798.25 893.48 1713.76 927.275 1693.79 931.883 cv
1673.83 936.492 1593.95 934.956 1593.95 914.986 cv
1593.95 895.017 1616.99 758.304 1653.86 719.902 cv
1665.99 707.267 1718.37 710.685 1750.63 716.83 cv
1782.89 722.974 1809 736.799 1815.15 747.552 cv
1821.29 758.304 1816.68 844.326 1807.47 868.903 cv
cp
1653.97 708.59 mo
1618.32 724.435 1565.11 932.866 1573.57 958.256 cv
1582.03 983.646 1797.85 928.634 1810.54 920.171 cv
1823.24 911.708 1835.93 772.064 1823.24 742.443 cv
1810.54 712.821 1692.06 691.663 1653.97 708.59 cv
cp
f
1480.28 672.283 mo
1494.13 662.126 1540.18 683.035 1558.62 692.252 cv
1577.05 701.469 1578.59 735.263 1580.12 746.016 cv
1581.66 756.768 1530.97 865.832 1517.14 881.192 cv
1503.32 896.553 1411.15 907.306 1394.26 910.378 cv
1377.36 913.45 1374.29 859.687 1374.29 842.79 cv
1374.29 825.893 1434.19 706.077 1480.28 672.283 cv
cp
1511.37 914.035 mo
1540.99 905.572 1596.01 732.075 1587.54 710.917 cv
1579.08 689.759 1494.45 647.442 1469.06 668.601 cv
1458.6 677.315 1390.65 768.916 1367.5 812.477 cv
1345.95 853.028 1360.03 894.126 1367.5 914.035 cv
1377.9 941.771 1481.75 922.499 1511.37 914.035 cv
cp
f
1525.93 1216.91 mo
1509.02 1222.55 1424.57 1216.91 1399.85 1204.55 cv
1375.13 1192.19 1333.1 1073.52 1330.63 1056.22 cv
1328.16 1038.91 1377.6 989.47 1399.85 982.053 cv
1401.73 981.218 1404.23 980.595 1407.21 980.158 cv
1444.39 972.803 1522.95 984.855 1545.87 1000.21 cv
1570.43 1016.66 1560.54 1110.61 1560.54 1135.33 cv
1560.54 1160.05 1533.35 1214.44 1525.93 1216.91 cv
cp
1560.7 1217.78 mo
1577.63 1183.92 1577.63 1023.12 1560.7 997.733 cv
1543.77 972.344 1442.22 968.112 1408.36 972.344 cv
1374.51 976.575 1332.19 1023.12 1315.27 1048.51 cv
1298.18 1074.15 1382.97 1243.17 1399.9 1255.86 cv
1416.83 1268.56 1543.77 1251.63 1560.7 1217.78 cv
cp
f
1256.46 972.164 mo
1254.47 962.21 1289.35 950.658 1319.79 951.696 cv
1332.63 948.939 1342.58 948.684 1340.52 954.858 cv
1351.09 958.11 1323.21 989.469 1310.85 999.358 cv
1298.49 1009.25 1258.94 984.524 1256.46 972.164 cv
cp
1299.63 1012.02 mo
1320.78 1012.02 1346.17 969.7 1346.17 952.773 cv
1346.17 935.847 1253.08 944.311 1253.08 969.7 cv
1253.08 995.44 1278.47 1012.02 1299.63 1012.02 cv
cp
f
990.368 1469.22 mo
992.008 1452.82 1019.89 1387.23 1034.64 1379.03 cv
1046.98 1372.18 1115 1364.27 1134.68 1367.55 cv
1154.36 1370.83 1164.2 1372.47 1172.39 1392.15 cv
1180.59 1411.82 1209.36 1528.55 1205.19 1557.77 cv
1201.91 1580.73 1164.2 1605.33 1142.88 1611.89 cv
1121.56 1618.45 1013.32 1602.05 990.368 1587.29 cv
967.41 1572.53 988.728 1485.62 990.368 1469.22 cv
cp
946.048 1617.84 mo
971.438 1643.23 1221.1 1651.7 1225.33 1617.84 cv
1229.57 1583.99 1191.48 1393.57 1170.32 1372.41 cv
1149.17 1351.25 1039.14 1359.71 1022.22 1372.41 cv
997.806 1390.72 920.658 1592.45 946.048 1617.84 cv
cp
f
1241.63 1352.88 mo
1244.86 1339.96 1370.18 1382.55 1392.43 1394.91 cv
1414.68 1407.27 1474.02 1498.74 1481.43 1516.04 cv
1488.85 1533.35 1372.66 1548.18 1355.35 1548.18 cv
1338.05 1548.18 1263.88 1488.85 1253.99 1474.02 cv
1246 1462.02 1239.16 1362.77 1241.63 1352.88 cv
cp
1497.28 1552.39 mo
1518.44 1531.23 1425.34 1421.21 1408.42 1400.05 cv
1391.49 1378.89 1234.92 1328.11 1222.22 1353.5 cv
1209.53 1378.89 1234.92 1527 1256.08 1556.62 cv
1277.23 1586.24 1476.12 1573.55 1497.28 1552.39 cv
cp
f
1330.63 1318.27 mo
1303.44 1315.8 1266.35 1281.19 1261.41 1268.83 cv
1256.46 1256.47 1293.55 1194.66 1303.44 1189.72 cv
1321.12 1180.87 1365.24 1273.77 1375.13 1291.08 cv
1380.19 1299.93 1357.82 1320.74 1330.63 1318.27 cv
cp
1398.04 1343.63 mo
1398.04 1313.71 1327.42 1174.85 1304.94 1178.59 cv
1279.55 1182.83 1237.24 1284.39 1245.7 1297.08 cv
1254.16 1309.77 1398.04 1360.55 1398.04 1343.63 cv
cp
f
1172.41 1758.32 mo
1160.05 1773.15 1130.38 1743.49 1120.49 1733.6 cv
1110.61 1723.71 1108.13 1681.68 1110.61 1676.74 cv
1117.68 1662.58 1166.99 1665.57 1202.08 1686.63 cv
1214.44 1694.04 1184.77 1743.49 1172.41 1758.32 cv
cp
1110.5 1667.43 mo
1086.27 1679.55 1110.5 1781.68 1135.89 1794.38 cv
1161.28 1807.08 1216.29 1718.21 1212.06 1692.82 cv
1207.83 1667.43 1127.43 1658.97 1110.5 1667.43 cv
cp
f
1558.07 1698.99 mo
1565.49 1716.29 1605.04 1787.99 1587.74 1790.46 cv
1570.43 1792.93 1357.82 1726.18 1342.99 1713.82 cv
1328.16 1701.46 1295.9 1638.87 1315.8 1632.24 cv
1338.05 1624.82 1451.77 1619.88 1488.85 1619.88 cv
1525.93 1619.88 1550.65 1681.68 1558.07 1698.99 cv
cp
1497.42 1611.85 mo
1467.8 1616.08 1298.53 1616.08 1285.84 1633.01 cv
1271.03 1652.75 1298.53 1709.18 1319.69 1726.11 cv
1340.85 1743.03 1577.82 1840.36 1607.44 1823.43 cv
1637.06 1806.51 1527.04 1607.62 1497.42 1611.85 cv
cp
f
1496.27 1916.54 mo
1481.43 1916.54 1449.29 1899.23 1431.99 1879.46 cv
1414.68 1859.68 1384.47 1795.08 1399.85 1797.87 cv
1427.05 1802.82 1553.13 1876.98 1558.07 1884.4 cv
1563.02 1891.82 1511.1 1916.54 1496.27 1916.54 cv
cp
1566.45 1881.66 mo
1553.75 1864.73 1388.72 1771.64 1380.25 1792.8 cv
1372.4 1812.44 1422.57 1940.9 1447.96 1945.14 cv
1473.35 1949.37 1579.14 1898.59 1566.45 1881.66 cv
cp
f
1765.74 1471.55 mo
1763.26 1493.8 1632.24 1528.41 1602.57 1525.93 cv
1572.9 1523.46 1483.91 1407.27 1478.96 1387.49 cv
1474.02 1367.71 1467.74 1309.25 1480.77 1302.64 cv
1493.79 1296.02 1569.41 1276.16 1594.64 1276.2 cv
1622.35 1276.25 1745.96 1323.21 1758.32 1333.1 cv
1770.68 1342.99 1768.21 1449.3 1765.74 1471.55 cv
cp
1463.46 1300.16 mo
1446.53 1308.63 1446.53 1372.1 1455 1401.72 cv
1463.46 1431.34 1539.63 1524.44 1573.48 1545.6 cv
1607.34 1566.76 1746.98 1528.67 1763.91 1520.21 cv
1780.83 1511.75 1780.83 1355.18 1776.6 1334.02 cv
1774.25 1322.26 1619.53 1266.8 1594.64 1266.31 cv
1564.29 1265.72 1489.07 1287.36 1463.46 1300.16 cv
cp
f
1872.04 994.414 mo
1889.94 996.297 1880.59 1110.93 1869.57 1147.69 cv
1862.15 1172.41 1790.46 1226.8 1768.21 1234.22 cv
1745.96 1241.63 1629.6 1174.65 1617.4 1157.58 cv
1605.04 1140.27 1617.4 1041.38 1629.76 1026.55 cv
1642.13 1011.72 1778.1 984.525 1872.04 994.414 cv
cp
1609.79 1214.13 mo
1626.71 1243.75 1745.2 1277.61 1770.59 1273.38 cv
1795.98 1269.14 1863.69 1188.74 1872.15 1167.58 cv
1880.61 1146.43 1914.47 1015.25 1880.61 989.857 cv
1846.76 964.467 1635.18 998.32 1618.25 1015.25 cv
1600.8 1032.69 1592.86 1184.51 1609.79 1214.13 cv
cp
f
1780.57 1614.93 mo
1795.4 1619.88 1857.99 1641.49 1865.01 1662.82 cv
1872.04 1684.15 1854.73 1726.18 1844.84 1733.6 cv
1834.96 1741.01 1718.76 1765.74 1696.51 1763.26 cv
1674.26 1760.79 1607.52 1661.9 1595.15 1647.07 cv
1582.79 1632.24 1614.93 1600.1 1627.29 1597.63 cv
1642.63 1594.56 1765.73 1609.99 1780.57 1614.93 cv
cp
1579.02 1649.04 mo
1583.26 1665.96 1634.03 1788.68 1659.42 1809.84 cv
1684.81 1831 1828.69 1759.06 1849.85 1746.36 cv
1871.01 1733.67 1879.47 1661.73 1862.54 1640.57 cv
1845.62 1619.42 1655.19 1577.1 1621.34 1589.79 cv
1597.24 1598.83 1574.79 1632.11 1579.02 1649.04 cv
cp
f
1750.9 1938.79 mo
1741.01 1941.26 1671.79 1946.21 1661.9 1933.84 cv
1652.01 1921.48 1621.2 1880.29 1634.71 1872.04 cv
1679.21 1844.85 1741.01 1839.9 1750.9 1849.79 cv
1760.79 1859.68 1760.79 1936.32 1750.9 1938.79 cv
cp
1649.07 1858.04 mo
1611.56 1868.75 1602.52 1904.58 1610.98 1921.51 cv
1619.45 1938.44 1725.24 1972.29 1746.4 1972.29 cv
1767.55 1972.29 1771.78 1849.57 1759.09 1836.88 cv
1746.4 1824.18 1678.69 1849.57 1649.07 1858.04 cv
cp
f
1087.03 68.5972 mo
1090.11 53.2363 1096.04 3.88721 1111.61 5.61719 cv
1125.44 7.15332 1153.08 40.9473 1157.69 48.6279 cv
1162.3 56.3086 1140.8 80.8862 1125.43 83.9585 cv
1110.07 87.0308 1083.96 83.958 1087.03 68.5972 cv
cp
1079.25 98.1992 mo
1083.48 119.357 1159.65 89.7358 1168.11 72.8096 cv
1174.76 59.5068 1134.37 12.2378 1112.66 0 cv
1099.97 0 li
1088.98 20.6113 1075.07 77.313 1079.25 98.1992 cv
cp
f
207.333 1949.01 mo
199.417 1949.01 169.439 1969.56 130.729 2000 cv
146.063 2000 li
175.221 1976.32 198.502 1959.99 207.333 1959.68 cv
221.945 1959.16 244.979 1975.87 266.191 2000 cv
273.976 2000 li
248.785 1971.47 220.716 1949.01 207.333 1949.01 cv
cp
f
1889.96 253.688 mo
1912.98 261.361 1955.58 268.315 2000 273.084 cv
2000 207.644 li
1964.85 201.272 1941.37 190.931 1953.38 177.421 cv
1960.4 169.521 1977.61 152.315 2000 130.869 cv
2000 111.908 li
1926.13 180.252 1866.5 245.868 1889.96 253.688 cv
cp
f
1809.99 363.898 mo
1794.2 411.274 1862.32 442.617 1932.71 478.152 cv
1954.26 489.033 1977.04 499.948 2000 510.513 cv
2000 469.073 li
1945.63 443.096 1900.03 420.124 1889.37 412.129 cv
1860.92 390.792 1835.04 356.083 1860.92 348.118 cv
1909.11 333.29 1959.23 326.194 2000 324.863 cv
2000 316.729 li
1919.09 318.771 1818.08 339.614 1809.99 363.898 cv
cp
f
1862.79 908.833 mo
1879.34 927.753 1940.84 949.314 2000 960.963 cv
2000 878.019 li
1948.66 831.65 1898.02 773.7 1900.04 753.523 cv
1903.59 717.961 1952.15 595.281 1996.49 593.666 cv
1997.64 593.623 1998.82 593.598 2000 593.574 cv
2000 583.002 li
1904.54 591.544 1833.17 874.984 1862.79 908.833 cv
cp
f
1987.99 1004.24 mo
1952.99 1014.24 1920.29 1135.42 1949.91 1143.88 cv
1958.94 1146.46 1977.79 1148.25 2000 1149.02 cv
2000 1128.94 li
1976.83 1124.85 1957.15 1116.78 1958.01 1103.93 cv
1959.54 1080.89 1982.58 1014.83 2000 1011.76 cv
2000 1003.33 li
1994.55 1003.29 1990.33 1003.57 1987.99 1004.24 cv
cp
f
1894.7 1215.71 mo
1848.15 1274.96 1788.91 1486.54 1814.3 1541.55 cv
1829.48 1574.45 1920.36 1607.35 2000 1625.77 cv
2000 1551.25 li
1960.74 1529.7 1924.56 1504.32 1912.11 1488.76 cv
1893.68 1465.72 1871.01 1330.07 1884.83 1297.82 cv
1898.66 1265.56 1913.46 1217.6 1934.97 1209.92 cv
1944.24 1206.61 1968.39 1201.58 2000 1198.66 cv
2000 1186.67 li
1950.71 1190.61 1906.56 1200.62 1894.7 1215.71 cv
cp
f
1862.68 1793.82 mo
1833.06 1836.13 1778.05 1946.16 1803.44 1963.08 cv
1820.65 1974.56 1925.09 1994.9 2000 1998.96 cv
2000 1961.13 li
1947.23 1957.22 1884.71 1946.46 1863.63 1936.87 cv
1829.48 1921.35 1857.42 1815.83 1879.14 1800.31 cv
1892.32 1790.9 1938.26 1783.54 2000 1787.04 cv
2000 1778.91 li
1936.26 1773.29 1875.39 1775.66 1862.68 1793.82 cv
cp
f
1947.04 1657.93 mo
1908.85 1661.11 1900.49 1738.33 1930.11 1746.79 cv
1939.36 1749.44 1966.35 1752.49 2000 1755.06 cv
2000 1731.75 li
1964.05 1729.44 1937.03 1725.68 1935.01 1719.62 cv
1928.8 1700.99 1931.91 1666.85 1966.04 1666.85 cv
1973.02 1666.85 1985.07 1667.59 2000 1668.83 cv
2000 1660.72 li
1974.72 1658.46 1954.77 1657.29 1947.04 1657.93 cv
cp
f
421.857 2000 mo
444.569 2000 li
474.078 1982.49 517.89 1963.98 550.153 1972.7 cv
571.876 1978.56 592.555 1988.35 611.065 2000 cv
629.427 2000 li
596.613 1978.88 563.181 1962.03 546.597 1962.03 cv
522.675 1962.03 465.37 1975.39 421.857 2000 cv
cp
f
1051 1746.12 mo
1008.68 1729.19 924.051 1729.19 885.966 1746.12 cv
847.881 1763.04 716.701 1970.39 716.701 1994.1 cv
716.701 1995.62 716.964 1997.61 717.461 2000 cv
755.789 2000 li
754.498 1976.49 756.828 1950.2 765.988 1930.35 cv
784.421 1890.41 883.766 1753.79 899.629 1749.09 cv
941.104 1736.8 987.187 1738.34 1014.84 1744.48 cv
1042.49 1750.63 1053.24 1764.45 1062.46 1798.24 cv
1072.65 1835.63 1054.78 1940.82 1040.83 2000 cv
1064.43 2000 li
1079.01 1910.63 1090.12 1761.76 1051 1746.12 cv
cp
f
1373.18 1871.23 mo
1352.02 1841.61 1284.31 1740.05 1237.76 1740.05 cv
1197.62 1740.05 1102.35 1900.86 1106.58 1934.71 cv
1108.3 1948.47 1128.21 1974.12 1152.64 2000 cv
1213.56 2000 li
1186.89 1983.18 1163.97 1966.12 1159.23 1958 cv
1148.48 1939.56 1139.26 1879.66 1151.55 1852.01 cv
1163.84 1824.36 1221.02 1745.58 1243.72 1750.62 cv
1271.37 1756.77 1362 1859.69 1371.21 1878.12 cv
1380.43 1896.55 1388.11 1982.58 1378.89 2000 cv
1387.2 2000 li
1390.38 1948.54 1385.19 1888.06 1373.18 1871.23 cv
cp
f
1451.9 2000 mo
1469.96 2000 li
1476.2 1993.09 1490.5 1987.61 1520.21 1984.11 cv
1566.7 1978.64 1626.57 1988.99 1652.17 2000 cv
1666.16 2000 li
1662.03 1996.85 1657.83 1994.09 1653.54 1991.8 cv
1592 1958.98 1470.8 1970.72 1451.9 2000 cv
cp
f
232.96 1856.18 mo
220.546 1834.45 267.102 1759.96 288.827 1744.44 cv
309.031 1730.01 382.488 1800.66 419.18 1853.07 cv
440.906 1884.11 385.04 1964.8 350.899 1971.01 cv
316.759 1977.22 245.375 1877.9 232.96 1856.18 cv
cp
451.473 1886.28 mo
455.704 1860.89 311.829 1717.01 282.207 1733.94 cv
258.97 1747.22 201.807 1848.19 214.501 1873.58 cv
224.49 1893.56 286.874 1965.93 319.199 2000 cv
364.252 2000 li
397.493 1968.43 448.437 1904.49 451.473 1886.28 cv
cp
f
1100.4 1999.19 mo
1100.26 1999.44 1100.12 1999.73 1099.97 2000 cv
1112.66 2000 li
1106.75 1996.67 1102.21 1995.92 1100.4 1999.19 cv
cp
f
170.309 465.473 mo
145.416 426.354 106.963 348.884 79.959 334.276 cv
67.0293 327.282 37.457 323.641 0 324.863 cv
0 334.359 li
28.083 334.108 58.0142 336.443 72.2861 344.228 cv
86.0127 351.715 161.285 467.838 173.646 487.615 cv
184.71 505.318 51.1831 453.695 0 424.94 cv
0 469.073 li
90.7324 512.428 205.861 564.154 223.651 568.602 cv
252.101 575.714 195.202 504.591 170.309 465.473 cv
cp
.580392 .572549 .537255 rgb
f
157.4 0 mo
146.063 0 li
100.854 36.7109 41.522 91.0889 0 130.869 cv
0 151.4 li
0 138.528 91.9658 49.0649 157.4 0 cv
cp
f
148.972 209.427 mo
202.314 195.202 266.325 145.416 284.106 131.191 cv
301.888 116.966 323.225 91.6846 298.332 45.8423 cv
289.392 29.3799 278.078 13.5239 266.191 0 cv
259.419 0 li
272.697 14.4141 284.409 30.376 289.84 40.1519 cv
302.201 62.4019 232.979 136.567 190.952 153.873 cv
148.925 171.178 0 168.705 0 151.4 cv
0 207.644 li
48.127 216.366 118.145 217.647 148.972 209.427 cv
cp
f
234.32 774.861 mo
259.213 717.962 276.994 696.625 262.77 671.731 cv
248.722 647.148 93.333 591.693 0 593.574 cv
0 603.81 li
22.8057 583.315 226.892 637.718 255.23 675.502 cv
270.063 695.28 208.259 796.639 188.481 828.778 cv
168.704 860.917 79.1118 816.417 40.1504 789.223 cv
24.3115 778.168 9.71484 749.953 0 718.531 cv
0 878.019 li
39.1489 913.377 78.7051 942.001 95.6289 942.001 cv
134.747 942.001 209.426 831.76 234.32 774.861 cv
cp
f
443.115 670.56 mo
495.031 660.671 598.863 700.226 633.697 713.625 cv
668.531 727.025 673.029 747.198 673.029 766.975 cv
673.029 786.752 645.835 823.835 611.224 833.724 cv
576.613 843.613 465.365 826.308 448.06 801.586 cv
430.754 776.864 413.872 676.13 443.115 670.56 cv
cp
358.787 689.513 mo
333.893 714.405 415.686 842.428 454.804 874.434 cv
493.922 906.44 547.265 888.658 589.939 863.765 cv
632.613 838.872 678.844 799.754 682.4 781.973 cv
685.956 764.192 678.844 725.074 636.169 703.737 cv
593.495 682.4 480.71 656.555 417.71 661.99 cv
387.236 664.619 369.455 678.845 358.787 689.513 cv
cp
f
801.583 368.953 mo
804.055 415.924 702.695 504.923 670.557 512.34 cv
638.418 519.756 581.558 366.48 584.03 346.703 cv
586.502 326.926 692.806 203.317 752.139 186.011 cv
766.575 181.8 799.11 321.982 801.583 368.953 cv
cp
746.411 173.865 mo
724.226 177.563 647.473 239.228 586.383 323.225 cv
557.933 362.343 547.265 476.142 547.265 511.703 cv
547.265 547.265 653.951 597.051 678.844 600.607 cv
703.737 604.164 771.305 572.158 785.529 540.152 cv
799.754 508.146 821.091 408.573 803.31 312.556 cv
785.529 216.539 767.748 170.309 746.411 173.865 cv
cp
f
426.354 116.966 mo
461.916 163.196 525.927 223.652 561.489 223.652 cv
597.051 223.652 675.288 120.522 689.512 99.1851 cv
700.088 83.3218 664.709 33.7773 611.065 0 cv
594.022 0 li
619.728 15.4082 648.243 38.8438 675.501 69.8184 cv
696.288 93.4399 591.446 141.512 559.308 156.345 cv
527.17 171.178 418.394 57.457 415.921 40.1519 cv
414.566 30.667 437.721 13.7549 465.03 0 cv
444.569 0 li
433.806 6.38672 424.944 12.6406 419.242 17.3926 cv
397.905 35.1738 390.793 70.7363 426.354 116.966 cv
cp
f
344.229 964.749 mo
354.118 989.47 245.342 1053.75 220.62 1063.64 cv
195.898 1073.52 183.537 1016.67 178.593 1004.3 cv
173.648 991.942 220.62 895.527 275.008 863.389 cv
294.631 851.793 334.341 940.027 344.229 964.749 cv
cp
281.128 854.932 mo
259.576 840.368 188.855 940.47 170.309 977.563 cv
156.084 1006.01 195.202 1102.03 209.427 1123.37 cv
223.651 1144.7 341.006 1052.24 358.787 1023.79 cv
376.567 995.344 310.155 874.548 281.128 854.932 cv
cp
f
621.114 930.138 mo
643.364 910.36 766.394 867.526 792.642 862.985 cv
821.427 858.005 846.083 912.832 855.972 940.026 cv
865.861 967.221 762.029 1033.97 732.363 1048.8 cv
702.696 1063.64 608.753 1036.44 593.92 1019.14 cv
585.256 1009.03 598.865 949.915 621.114 930.138 cv
cp
597.051 1126.92 mo
621.945 1144.71 671.731 1187.38 703.737 1176.71 cv
735.743 1166.04 860.208 1006.01 867.321 974.007 cv
874.434 942.001 849.541 860.209 792.642 853.097 cv
735.743 845.984 575.714 938.446 547.265 959.783 cv
525.045 976.447 572.158 1109.14 597.051 1126.92 cv
cp
f
882.732 122.361 mo
921.134 120.825 1019.44 54.772 1028.66 40.9473 cv
1031.13 37.2368 1035.72 21.7124 1040.83 0 cv
989.854 0 li
972.196 20.5176 953.87 37.0859 940.025 42.624 cv
916.686 51.96 865.932 26.041 828.431 0 cv
755.789 0 li
757.097 23.7964 762.115 44.7363 767.524 53.2363 cv
778.277 70.1333 844.33 123.897 882.732 122.361 cv
cp
f
986.997 166.233 mo
1016.66 156.345 1046.97 147.493 1065.19 153.155 cv
1084.72 159.223 1073.52 223.093 1073.52 237.927 cv
1073.52 252.76 977.108 294.787 947.442 297.259 cv
917.775 299.732 893.054 235.455 893.054 220.622 cv
893.054 205.789 957.33 176.122 986.997 166.233 cv
cp
1011.76 312.837 mo
1042.49 299.012 1074.74 263.682 1080.89 246.785 cv
1087.03 229.888 1085.5 143.866 1070.14 140.794 cv
1052.96 137.359 974.898 154.619 944.176 166.908 cv
913.454 179.196 884.267 205.31 876.587 220.671 cv
868.907 236.032 864.298 334.343 875.051 349.704 cv
885.804 365.064 981.041 326.662 1011.76 312.837 cv
cp
f
1114.08 13.0337 mo
1129.92 15.5815 1150.16 47.5684 1142.74 54.9849 cv
1135.33 62.4014 1095.77 72.2905 1095.77 59.9297 cv
1095.77 47.5688 1100.04 10.7744 1114.08 13.0337 cv
cp
1125.43 83.9585 mo
1140.8 80.8862 1162.3 56.3086 1157.69 48.6279 cv
1153.08 40.9473 1125.44 7.15332 1111.61 5.61719 cv
1096.04 3.88721 1090.11 53.2363 1087.03 68.5972 cv
1083.96 83.958 1110.07 87.0308 1125.43 83.9585 cv
cp
f
1177.36 129.151 mo
1194.66 121.734 1271.3 129.15 1323.21 158.817 cv
1339.98 168.396 1305.91 260.176 1288.6 279.954 cv
1271.3 299.732 1177.36 235.455 1162.52 218.149 cv
1147.69 200.844 1160.05 136.567 1177.36 129.151 cv
cp
1237.57 349.703 mo
1257.54 355.848 1299.02 291.332 1306.7 274.435 cv
1314.38 257.537 1349.17 175.406 1331.27 151.546 cv
1322.06 139.258 1259.08 114.68 1200.7 116.216 cv
1174.55 116.904 1162.3 123.897 1156.16 139.258 cv
1150.01 154.619 1137.72 246.785 1142.33 271.362 cv
1146.94 295.94 1217.6 343.559 1237.57 349.703 cv
cp
f
1187.21 447.231 mo
1197.49 467.786 1148.16 621.949 1131.71 632.227 cv
1115.27 642.504 1037.16 654.837 1006.33 634.282 cv
975.494 613.728 924.107 443.121 938.496 430.788 cv
952.885 418.455 1039.23 387.85 1070.05 385.567 cv
1125.55 381.456 1176.93 426.677 1187.21 447.231 cv
cp
910.381 428.043 mo
887.34 444.94 885.151 502.464 882.079 533.187 cv
879.007 563.909 937.378 662.218 965.028 686.796 cv
992.678 711.374 1085.5 713.757 1102.39 712.221 cv
1119.29 710.685 1173.05 583.189 1185.34 543.25 cv
1197.63 503.312 1208.38 452.621 1194.56 435.724 cv
1180.73 418.827 1096.25 377.352 1067.06 375.816 cv
1037.88 374.28 933.423 411.146 910.381 428.043 cv
cp
f
1405.94 115.352 mo
1414.5 113.913 1424.57 121.734 1424.57 129.151 cv
1424.57 136.567 1402.32 158.817 1397.38 148.928 cv
1392.44 139.04 1388.97 118.203 1405.94 115.352 cv
cp
1397.32 171.515 mo
1406.54 168.442 1434.19 136.184 1434.19 126.968 cv
1434.19 117.751 1414.22 105.462 1403.47 105.462 cv
1389.31 105.462 1381.96 125.432 1381.96 140.793 cv
1381.96 153.46 1388.11 174.587 1397.32 171.515 cv
cp
f
1372.66 309.621 mo
1385.02 284.899 1430.71 200.678 1451.77 208.261 cv
1513.57 230.51 1619.88 351.647 1617.4 368.953 cv
1614.93 386.259 1543.24 462.896 1506.16 453.007 cv
1469.07 443.118 1360.3 334.342 1372.66 309.621 cv
cp
1337.75 432.286 mo
1339.28 461.472 1429.91 547.494 1456.03 561.318 cv
1482.14 575.143 1584.73 540.179 1597.02 527.89 cv
1609.31 515.601 1630.81 374.28 1621.59 349.702 cv
1612.38 325.125 1497.17 206.845 1452.62 196.092 cv
1430.43 190.734 1383.5 274.432 1354.31 323.588 cv
1325.13 372.744 1336.21 403.101 1337.75 432.286 cv
cp
f
1378.89 0 mo
1213.56 0 li
1247.41 21.3521 1287.3 42.3003 1303.62 44.019 cv
1332.81 47.0913 1369.67 17.4248 1378.89 0 cv
cp
f
1466.45 17.9053 mo
1469.52 33.2661 1516.88 127.679 1533.78 138.432 cv
1550.67 149.184 1658.2 212.164 1679.7 212.164 cv
1701.21 212.164 1752.16 174.587 1752.16 163.834 cv
1752.16 153.082 1710.69 37.875 1660 4.08057 cv
1657.97 2.72949 1655.33 1.35938 1652.17 0 cv
1629.77 0 li
1669.32 15.4302 1721.24 104.429 1733.6 131.623 cv
1745.96 158.817 1647.07 131.624 1609.99 119.262 cv
1572.91 106.901 1488.85 22.8472 1486.38 3.06934 cv
1486.24 1.98242 1486.42 .961914 1486.85 0 cv
1469.96 0 li
1465.23 5.23389 1465.13 11.2837 1466.45 17.9053 cv
cp
f
1817.65 47.5684 mo
1914.07 27.7905 1975.87 52.5127 1963.51 62.4019 cv
1951.15 72.291 1889.35 99.4844 1872.04 94.54 cv
1854.73 89.5957 1803.53 50.4648 1817.65 47.5684 cv
cp
1836.65 157.69 mo
1848.94 176.124 1890.41 140.793 1905.77 130.041 cv
1921.13 119.288 1981.04 65.5239 1971.83 51.6992 cv
1963.97 39.9155 1930.35 34.8022 1890.41 31.73 cv
1850.47 28.6577 1801.32 37.8745 1793.64 44.019 cv
1785.96 50.1636 1824.36 139.257 1836.65 157.69 cv
cp
f
207.333 1959.68 mo
198.502 1959.99 175.221 1976.32 146.063 2000 cv
157.401 2000 li
179.938 1983.1 199.329 1970.99 210.729 1968.46 cv
222.981 1965.74 242.476 1981.61 259.418 2000 cv
266.191 2000 li
244.979 1975.87 221.945 1959.16 207.333 1959.68 cv
cp
f
444.569 2000 mo
465.031 2000 li
487.546 1988.66 512.885 1979.46 529.642 1978.35 cv
545.638 1977.28 568.438 1984.66 594.023 2000 cv
611.065 2000 li
592.555 1988.35 571.876 1978.56 550.153 1972.7 cv
517.89 1963.98 474.078 1982.49 444.569 2000 cv
cp
f
1062.46 1798.24 mo
1053.24 1764.45 1042.49 1750.63 1014.84 1744.48 cv
987.187 1738.34 941.104 1736.8 899.629 1749.09 cv
883.766 1753.79 784.421 1890.41 765.988 1930.35 cv
756.828 1950.2 754.498 1976.49 755.789 2000 cv
828.432 2000 li
806.349 1984.67 788.858 1969.29 784.277 1961.04 cv
771.917 1938.79 880.693 1775.63 905.415 1760.79 cv
930.136 1745.96 999.358 1745.96 1033.97 1765.74 cv
1052.31 1776.22 1051.27 1859.68 1048.8 1896.77 cv
1047.25 1920 1019.49 1965.56 989.854 2000 cv
1040.83 2000 li
1054.78 1940.82 1072.65 1835.63 1062.46 1798.24 cv
cp
f
1365.24 1958.57 mo
1352.88 1965.99 1281.19 1983.29 1258.94 1965.99 cv
1236.69 1948.68 1169.94 1862.15 1182.3 1834.96 cv
1194.66 1807.77 1232.37 1754.06 1246.58 1758.32 cv
1271.3 1765.74 1347.94 1862.15 1361.32 1878.12 cv
1374.71 1894.09 1377.6 1951.15 1365.24 1958.57 cv
cp
1371.21 1878.12 mo
1362 1859.69 1271.37 1756.77 1243.72 1750.62 cv
1221.02 1745.58 1163.84 1824.36 1151.55 1852.01 cv
1139.26 1879.66 1148.48 1939.56 1159.23 1958 cv
1163.97 1966.12 1186.89 1983.18 1213.56 2000 cv
1378.89 2000 li
1388.11 1982.58 1380.43 1896.55 1371.21 1878.12 cv
cp
f
1520.21 1984.11 mo
1490.5 1987.61 1476.2 1993.09 1469.96 2000 cv
1486.85 2000 li
1494.73 1982.54 1592.28 1985.38 1629.77 2000 cv
1652.17 2000 li
1626.57 1988.99 1566.7 1978.64 1520.21 1984.11 cv
cp
f
1805.93 252.065 mo
1832.56 249.592 1844.85 279.954 1837.43 282.426 cv
1830.01 284.898 1721.24 304.676 1713.82 304.676 cv
1706.4 304.676 1786.79 253.843 1805.93 252.065 cv
cp
1844.33 295.94 mo
1856.62 291.332 1833.58 239.104 1805.93 242.177 cv
1784.5 244.558 1732.2 275.971 1712.23 294.404 cv
1692.26 312.837 1701.47 326.662 1709.15 334.343 cv
1716.83 342.023 1832.04 300.549 1844.33 295.94 cv
cp
f
1676.74 445.591 mo
1686.63 428.286 1720.69 398.619 1743.49 398.619 cv
1760.79 398.619 1775.63 462.896 1775.63 482.674 cv
1775.63 502.452 1748.43 534.589 1723.71 554.367 cv
1698.99 574.145 1674.26 546.951 1669.32 534.589 cv
1664.38 522.228 1666.85 462.896 1676.74 445.591 cv
cp
1689.19 624.666 mo
1703.01 627.738 1758.31 555.541 1765.99 535.572 cv
1773.67 515.603 1784.42 487.953 1778.28 463.375 cv
1772.13 438.797 1756.77 392.714 1741.41 391.178 cv
1719.96 389.034 1681.5 420.365 1672.29 432.653 cv
1663.07 444.942 1649.25 541.716 1646.17 566.293 cv
1643.1 590.871 1675.36 621.593 1689.19 624.666 cv
cp
f
1862.15 499.979 mo
1878.73 494.451 1916.54 532.117 1919.01 542.006 cv
1921.48 551.895 1894.29 584.033 1874.51 596.394 cv
1854.73 608.755 1815.18 596.394 1807.76 588.978 cv
1800.35 581.561 1839.9 507.396 1862.15 499.979 cv
cp
1789.03 641.563 mo
1810.54 641.563 1887.34 629.274 1899.63 609.304 cv
1911.92 589.334 1938.03 538.644 1928.82 526.355 cv
1919.6 514.066 1880.65 497.102 1864.3 492.561 cv
1836.65 484.88 1767.53 641.563 1789.03 641.563 cv
cp
f
737.307 727.418 mo
724.946 715.058 725.453 679.363 742.251 675.502 cv
759.05 671.642 794.167 660.669 811.473 663.142 cv
833.363 666.269 846.083 715.058 853.5 729.891 cv
860.917 744.724 749.668 739.779 737.307 727.418 cv
cp
813.611 655.386 mo
794.777 652.875 736.537 666.346 722.981 676.891 cv
709.156 687.644 738.342 775.202 756.775 785.954 cv
775.208 796.707 847.405 761.376 858.158 752.16 cv
868.911 742.943 836.652 658.458 813.611 655.386 cv
cp
f
1342.99 643.366 mo
1355.35 670.56 1342.99 734.837 1325.69 762.031 cv
1308.38 789.225 1244.1 853.502 1229.27 836.196 cv
1214.44 818.891 1172.41 715.059 1182.3 690.337 cv
1192.19 665.616 1240.8 579.779 1256.46 566.728 cv
1271.3 554.367 1330.63 616.172 1342.99 643.366 cv
cp
1254.47 554.003 mo
1232.11 554.003 1179.2 684.572 1163.84 718.366 cv
1148.48 752.16 1140.8 802.851 1142.34 821.284 cv
1143.87 839.717 1205.32 891.945 1229.89 896.553 cv
1254.47 901.162 1320.52 804.387 1331.28 779.81 cv
1342.03 755.232 1369.68 681.499 1368.14 669.21 cv
1366.61 656.922 1288.26 554.003 1254.47 554.003 cv
cp
f
1407.27 786.752 mo
1424.57 757.086 1476.37 676.871 1496.27 677.977 cv
1540.77 680.449 1572.91 720.003 1572.91 734.837 cv
1572.91 749.67 1555.6 799.114 1535.82 813.947 cv
1516.04 828.78 1476.49 870.807 1454.24 868.335 cv
1431.99 865.863 1389.96 816.419 1407.27 786.752 cv
cp
1394.26 910.378 mo
1411.15 907.306 1503.32 896.553 1517.14 881.192 cv
1530.97 865.832 1581.66 756.768 1580.12 746.016 cv
1578.59 735.263 1577.05 701.469 1558.62 692.252 cv
1540.18 683.035 1494.13 662.126 1480.28 672.283 cv
1434.19 706.077 1374.29 825.893 1374.29 842.79 cv
1374.29 859.687 1377.36 913.45 1394.26 910.378 cv
cp
f
1800.35 855.974 mo
1787.99 868.335 1706.4 905.417 1691.57 900.473 cv
1676.74 895.529 1617.4 833.724 1624.82 806.53 cv
1632.24 779.336 1655.3 727.04 1681.68 720.003 cv
1718.76 710.114 1783.04 729.893 1795.4 744.726 cv
1807.76 759.559 1812.71 843.613 1800.35 855.974 cv
cp
1750.63 716.83 mo
1718.37 710.685 1665.99 707.267 1653.86 719.902 cv
1616.99 758.304 1593.95 895.017 1593.95 914.986 cv
1593.95 934.956 1673.83 936.492 1693.79 931.883 cv
1713.76 927.275 1798.25 893.48 1807.47 868.903 cv
1816.68 844.326 1821.29 758.304 1815.15 747.552 cv
1809 736.799 1782.89 722.974 1750.63 716.83 cv
cp
f
292.313 1187.25 mo
312.091 1165 373.896 1113.08 438.172 1103.19 cv
466.772 1098.79 524.699 1192.19 532.116 1204.55 cv
539.532 1216.91 430.755 1286.13 398.617 1296.02 cv
366.479 1305.91 309.619 1273.77 297.258 1263.88 cv
284.897 1253.99 272.536 1209.5 292.313 1187.25 cv
cp
337.642 1357.83 mo
371.436 1370.12 514.074 1386.57 543.26 1378.89 cv
572.447 1371.21 597.023 1329.73 598.56 1317.44 cv
600.096 1305.15 587.807 1262.14 552.477 1216.06 cv
517.146 1169.98 449.519 1089.66 434.197 1088.57 cv
412.691 1087.03 357.392 1116.21 329.742 1139.26 cv
302.092 1162.3 266.031 1194.48 272.175 1215.98 cv
278.319 1237.49 303.848 1345.54 337.642 1357.83 cv
cp
f
53.2451 1131.58 mo
85.5034 1128.51 117.761 1116.22 117.761 1102.39 cv
117.761 1088.57 103.937 1037.88 87.0396 1027.12 cv
73.022 1018.2 17.415 1008.69 0 1011.76 cv
0 1021.61 li
15.4282 1014.19 64.7065 1017.81 87.0391 1039.49 cv
96.8315 1048.99 104.427 1073.53 106.899 1085.89 cv
108.829 1095.53 37.7988 1093.7 0 1083.76 cv
0 1128.94 li
18.3872 1132.19 38.9727 1132.94 53.2451 1131.58 cv
cp
f
120.833 1587.8 mo
154.627 1567.83 222.216 1455.7 226.824 1446.48 cv
231.432 1437.26 232.969 1421.9 219.144 1363.53 cv
205.319 1305.16 172.376 1212.99 146.947 1206.85 cv
96.2876 1194.62 41.6621 1194.81 0 1198.66 cv
0 1212.52 li
49.2075 1205.59 113.635 1205.57 146.454 1224.33 cv
167.919 1236.59 200.842 1335.58 205.787 1362.77 cv
210.731 1389.96 148.926 1474.02 124.205 1493.8 cv
109.718 1505.39 50.248 1466.89 0 1426.56 cv
0 1551.25 li
48.6982 1577.99 102.123 1598.86 120.833 1587.8 cv
cp
f
517.282 1619.88 mo
480.2 1622.35 309.619 1570.43 297.258 1553.13 cv
284.897 1535.82 317.035 1518.52 339.285 1511.1 cv
361.535 1503.69 571.67 1461.66 618.642 1471.55 cv
652.337 1478.64 682.918 1525.93 695.28 1538.3 cv
707.641 1550.66 554.365 1617.41 517.282 1619.88 cv
cp
610.418 1461.48 mo
566.774 1456.03 354.983 1488.34 315.819 1505.13 cv
296.725 1513.31 272.175 1576.05 272.175 1586.96 cv
272.175 1621.3 345.825 1649.7 364.919 1652.43 cv
403.108 1657.88 490.396 1701.53 539.497 1679.7 cv
588.597 1657.88 741.351 1592.42 730.44 1565.14 cv
719.529 1537.86 654.063 1466.94 610.418 1461.48 cv
cp
f
195.716 1735.13 mo
208.131 1735.13 186.405 1694.79 177.095 1691.68 cv
160.199 1686.05 58.1768 1673.66 0 1668.83 cv
0 1674.19 li
74.1738 1675.82 176.935 1697.94 186.009 1713.82 cv
195.898 1731.13 168.704 1726.18 143.982 1726.18 cv
125.813 1726.18 39.5527 1698.37 0 1683.45 cv
0 1731.75 li
74.4912 1736.54 187.343 1735.13 195.716 1735.13 cv
cp
f
373.896 1926.43 mo
351.646 1919.01 255.23 1832.49 260.175 1817.65 cv
265.119 1802.82 274.01 1754 297.258 1750.9 cv
334.341 1745.96 403.562 1847.32 408.506 1867.1 cv
413.451 1886.87 396.145 1933.85 373.896 1926.43 cv
cp
419.18 1853.07 mo
382.488 1800.66 309.031 1730.01 288.827 1744.44 cv
267.102 1759.96 220.546 1834.45 232.96 1856.18 cv
245.375 1877.9 316.759 1977.22 350.899 1971.01 cv
385.04 1964.8 440.906 1884.11 419.18 1853.07 cv
cp
f
74.6738 1958.6 mo
108.814 1946.18 186.406 1828.24 139.851 1812.72 cv
91.9673 1796.76 49.6938 1790.8 12.6006 1787.89 cv
8.33301 1787.56 4.13135 1787.28 0 1787.04 cv
0 1792.87 li
4.19043 1792.85 8.396 1792.85 12.6006 1792.84 cv
64.1611 1792.75 129.149 1807.76 143.982 1830.01 cv
158.815 1852.26 84.6494 1933.85 54.9834 1936.32 cv
44.0298 1937.23 22.9624 1934.77 0 1930.69 cv
0 1961.13 li
32.6753 1963.55 61.6191 1963.34 74.6738 1958.6 cv
cp
f
1889.37 412.129 mo
1900.03 420.124 1945.63 443.096 2000 469.073 cv
2000 424.94 li
1994 421.571 1989.13 418.515 1985.76 415.921 cv
1953.62 391.2 1921.48 344.228 1941.26 339.284 cv
1950.66 336.934 1974.57 334.586 2000 334.359 cv
2000 324.863 li
1959.23 326.194 1909.11 333.29 1860.92 348.118 cv
1835.04 356.083 1860.92 390.792 1889.37 412.129 cv
cp
f
1953.38 177.421 mo
1941.37 190.931 1964.85 201.272 2000 207.644 cv
2000 130.869 li
1977.61 152.315 1960.4 169.521 1953.38 177.421 cv
cp
f
1900.04 753.523 mo
1898.02 773.7 1948.66 831.65 2000 878.019 cv
2000 718.53 li
1985.82 672.657 1982.04 619.948 2000 603.81 cv
2000 593.574 li
1998.82 593.598 1997.64 593.623 1996.49 593.666 cv
1952.15 595.281 1903.59 717.961 1900.04 753.523 cv
cp
f
1958.01 1103.93 mo
1957.15 1116.78 1976.83 1124.85 2000 1128.94 cv
2000 1083.76 li
1989.36 1080.97 1981.35 1077.53 1978.35 1073.52 cv
1970.93 1063.64 1984.57 1029.02 2000 1021.61 cv
2000 1011.76 li
1982.58 1014.83 1959.54 1080.89 1958.01 1103.93 cv
cp
f
1884.83 1297.82 mo
1871.01 1330.07 1893.68 1465.72 1912.11 1488.76 cv
1924.56 1504.32 1960.74 1529.7 2000 1551.25 cv
2000 1426.56 li
1964.5 1398.07 1933.59 1368.66 1926.43 1355.35 cv
1909.12 1323.22 1914.07 1246.58 1938.79 1229.27 cv
1947.88 1222.91 1971.37 1216.54 2000 1212.52 cv
2000 1198.66 li
1968.39 1201.58 1944.24 1206.61 1934.97 1209.92 cv
1913.46 1217.6 1898.66 1265.56 1884.83 1297.82 cv
cp
f
1935.01 1719.62 mo
1937.03 1725.68 1964.05 1729.44 2000 1731.75 cv
2000 1683.45 li
1985.73 1678.08 1977.54 1674.38 1980.82 1674.27 cv
1986.92 1674.06 1993.35 1674.05 2000 1674.19 cv
2000 1668.83 li
1985.07 1667.59 1973.02 1666.85 1966.04 1666.85 cv
1931.91 1666.85 1928.8 1700.99 1935.01 1719.62 cv
cp
f
1879.14 1800.31 mo
1857.42 1815.83 1829.48 1921.35 1863.63 1936.87 cv
1884.71 1946.46 1947.23 1957.22 2000 1961.13 cv
2000 1930.69 li
1960.77 1923.71 1916.01 1911.98 1906.65 1904.18 cv
1891.82 1891.82 1881.19 1820.87 1891.82 1810.24 cv
1907.71 1794.34 1952.8 1793.05 2000 1792.87 cv
2000 1787.04 li
1938.26 1783.54 1892.32 1790.9 1879.14 1800.31 cv
cp
f
692.806 1874.51 mo
680.445 1889.35 579.085 1854.74 561.78 1839.9 cv
544.475 1825.07 554.364 1780.57 564.252 1770.68 cv
574.141 1760.79 660.816 1726.62 682.992 1726.4 cv
710.519 1726.13 732.361 1773.15 742.25 1785.51 cv
752.139 1797.88 705.167 1859.68 692.806 1874.51 cv
cp
682.992 1716.51 mo
651.955 1716.51 549.534 1766.17 527.809 1778.58 cv
506.083 1791 518.498 1859.28 537.119 1871.69 cv
555.741 1884.11 661.266 1943.08 682.992 1927.56 cv
704.718 1912.04 760.583 1828.24 757.479 1803.41 cv
754.376 1778.58 704.717 1716.51 682.992 1716.51 cv
cp
f
450.53 1741.01 mo
467.835 1745.96 460.419 1755.85 445.586 1763.26 cv
430.753 1770.68 413.447 1743.49 413.447 1743.49 cv
423.336 1736.07 433.225 1736.07 450.53 1741.01 cv
cp
398.37 1743.08 mo
400.01 1751.28 419.689 1782.44 429.528 1779.16 cv
439.368 1775.88 467.665 1755.4 462.326 1744.72 cv
459.046 1738.16 439.367 1734.88 427.008 1733.7 cv
409.244 1732.01 396.73 1734.88 398.37 1743.08 cv
cp
f
865.737 1515.14 mo
887.055 1506.94 954.29 1415.1 955.93 1395.43 cv
957.57 1375.75 965.769 1334.75 936.251 1316.71 cv
906.734 1298.67 802.811 1252.42 780.462 1257.68 cv
796.64 1261.41 912.832 1303.44 937.554 1325.69 cv
955.746 1342.06 942.499 1407.27 935.082 1422.1 cv
927.666 1436.94 813.945 1429.52 779.334 1407.27 cv
744.724 1385.02 720.002 1340.52 722.474 1325.69 cv
724.235 1315.12 744.696 1283.22 762.171 1267.08 cv
731.1 1288.8 687.873 1340.09 690.269 1356.07 cv
695.189 1388.87 844.418 1523.34 865.737 1515.14 cv
cp
f
798.526 1627.51 mo
832.553 1627.72 900.47 1669.32 897.998 1671.79 cv
878.064 1691.72 808.999 1681.68 799.11 1671.79 cv
789.221 1661.9 781.148 1627.4 798.526 1627.51 cv
cp
770.624 1695.52 mo
778.823 1697.16 828.02 1703.72 859.177 1697.16 cv
890.335 1690.6 923.132 1672.57 906.734 1662.73 cv
890.335 1652.89 808.584 1618.21 793.582 1620.09 cv
780.463 1621.73 772.263 1633.21 767.344 1649.61 cv
762.424 1666.01 762.424 1693.88 770.624 1695.52 cv
cp
f
1041.39 1389.96 mo
1061.16 1382.55 1132.86 1372.66 1152.63 1377.6 cv
1173.27 1382.76 1184.77 1464.13 1187.25 1486.38 cv
1189.72 1508.63 1100.72 1555.6 1078.47 1560.55 cv
1056.22 1565.49 1014.19 1483.91 1006.78 1471.55 cv
999.359 1459.19 1021.61 1397.38 1041.39 1389.96 cv
cp
990.368 1587.29 mo
1013.32 1602.05 1121.56 1618.45 1142.88 1611.89 cv
1164.2 1605.33 1201.91 1580.73 1205.19 1557.77 cv
1209.36 1528.55 1180.59 1411.82 1172.39 1392.15 cv
1164.2 1372.47 1154.36 1370.83 1134.68 1367.55 cv
1115 1364.27 1046.98 1372.18 1034.64 1379.03 cv
1019.89 1387.23 992.008 1452.82 990.368 1469.22 cv
988.728 1485.62 967.41 1572.53 990.368 1587.29 cv
cp
f
959.804 1036.44 mo
1004.3 1009.25 1148.29 949.176 1169.94 967.221 cv
1184.77 979.582 1231.75 1056.22 1234.22 1083.41 cv
1236.69 1110.61 1219.38 1194.66 1189.72 1202.08 cv
1160.05 1209.49 1006.78 1207.02 986.998 1184.77 cv
967.221 1162.52 915.305 1063.64 959.804 1036.44 cv
cp
900.469 1182.3 mo
922.198 1225.76 992.805 1258.84 1011.72 1263.88 cv
1048.8 1273.77 1164.99 1291.08 1179.83 1271.3 cv
1206.24 1236.09 1258.94 1100.72 1246.58 1071.05 cv
1234.21 1041.39 1187.69 949.449 1157.58 947.442 cv
1120.5 944.97 1011.72 996.885 991.94 1004.3 cv
972.163 1011.72 903.521 1054.77 893.053 1080.94 cv
883.164 1105.66 888.108 1157.58 900.469 1182.3 cv
cp
f
944.971 865.861 mo
930.137 848.556 912.45 795.855 933.584 797.32 cv
979.059 800.473 1048.8 848.556 1061.16 860.917 cv
1073.53 873.277 1066.11 900.472 1048.8 900.472 cv
1031.5 900.472 959.804 883.166 944.971 865.861 cv
cp
1038.91 925.192 mo
1056.22 915.304 1090.83 873.276 1066.11 853.499 cv
1023.24 819.209 949.713 786.788 933.584 789.904 cv
917.256 793.058 893.053 801.583 893.053 813.944 cv
893.053 826.305 932.608 897.998 949.913 910.359 cv
967.218 922.72 1021.61 935.081 1038.91 925.192 cv
cp
f
1310.85 999.358 mo
1323.21 989.469 1351.09 958.11 1340.52 954.858 cv
1338.04 962.274 1323.22 984.526 1310.85 986.998 cv
1298.49 989.47 1266.36 972.165 1273.77 967.221 cv
1278.1 964.335 1301.79 955.56 1319.79 951.696 cv
1289.35 950.658 1254.47 962.21 1256.46 972.164 cv
1258.94 984.524 1298.49 1009.25 1310.85 999.358 cv
cp
f
1545.87 1000.21 mo
1522.95 984.855 1444.39 972.803 1407.21 980.158 cv
1439.6 975.416 1530.81 993.075 1543.24 1011.72 cv
1553.13 1026.55 1555.6 1108.13 1548.18 1122.97 cv
1540.77 1137.8 1520.99 1184.77 1483.91 1174.88 cv
1446.83 1165 1372.66 1083.41 1362.77 1061.16 cv
1352.88 1038.92 1377.6 991.942 1399.85 982.053 cv
1377.6 989.47 1328.16 1038.91 1330.63 1056.22 cv
1333.1 1073.52 1375.13 1192.19 1399.85 1204.55 cv
1424.57 1216.91 1509.02 1222.55 1525.93 1216.91 cv
1533.35 1214.44 1560.54 1160.05 1560.54 1135.33 cv
1560.54 1110.61 1570.43 1016.66 1545.87 1000.21 cv
cp
f
1654.49 1026.55 mo
1681.68 1016.66 1857.5 991.726 1872.04 1011.72 cv
1891.82 1038.91 1862.15 1147.69 1837.43 1155.11 cv
1812.71 1162.52 1723.71 1160.05 1701.46 1140.27 cv
1679.21 1120.5 1627.29 1036.44 1654.49 1026.55 cv
cp
1617.4 1157.58 mo
1629.6 1174.65 1745.96 1241.63 1768.21 1234.22 cv
1790.46 1226.8 1862.15 1172.41 1869.57 1147.69 cv
1880.59 1110.93 1889.94 996.297 1872.04 994.414 cv
1778.1 984.525 1642.13 1011.72 1629.76 1026.55 cv
1617.4 1041.38 1605.04 1140.27 1617.4 1157.58 cv
cp
f
1303.44 1189.72 mo
1293.55 1194.66 1256.46 1256.47 1261.41 1268.83 cv
1266.35 1281.19 1303.44 1315.8 1330.63 1318.27 cv
1357.82 1320.74 1380.19 1299.93 1375.13 1291.08 cv
1365.24 1273.77 1321.12 1180.87 1303.44 1189.72 cv
cp
f
1745.96 1338.05 mo
1760.79 1352.88 1755.85 1414.69 1755.85 1431.99 cv
1755.85 1449.3 1622.35 1478.96 1592.68 1471.55 cv
1563.02 1464.13 1498.74 1377.6 1488.85 1360.3 cv
1478.96 1342.99 1563.02 1288.6 1592.68 1283.66 cv
1619.62 1279.17 1731.13 1323.22 1745.96 1338.05 cv
cp
1480.77 1302.64 mo
1467.74 1309.25 1474.02 1367.71 1478.96 1387.49 cv
1483.91 1407.27 1572.9 1523.46 1602.57 1525.93 cv
1632.24 1528.41 1763.26 1493.8 1765.74 1471.55 cv
1768.21 1449.3 1770.68 1342.99 1758.32 1333.1 cv
1745.96 1323.21 1622.35 1276.25 1594.64 1276.2 cv
1569.41 1276.16 1493.79 1296.02 1480.77 1302.64 cv
cp
f
1632.24 1609.99 mo
1689.1 1592.68 1839.9 1639.66 1849.79 1656.96 cv
1859.68 1674.26 1847.32 1708.88 1837.43 1708.88 cv
1827.54 1708.88 1733.6 1718.76 1708.87 1703.93 cv
1684.15 1689.1 1612.73 1615.92 1632.24 1609.99 cv
cp
1595.15 1647.07 mo
1607.52 1661.9 1674.26 1760.79 1696.51 1763.26 cv
1718.76 1765.74 1834.96 1741.01 1844.84 1733.6 cv
1854.73 1726.18 1872.04 1684.15 1865.01 1662.82 cv
1857.99 1641.49 1795.4 1619.88 1780.57 1614.93 cv
1765.73 1609.99 1642.63 1594.56 1627.29 1597.63 cv
1614.93 1600.1 1582.79 1632.24 1595.15 1647.07 cv
cp
f
1278.72 1362.77 mo
1303.44 1360.3 1385.02 1392.44 1399.85 1409.74 cv
1414.69 1427.05 1476.49 1506.16 1459.19 1508.63 cv
1441.88 1511.1 1342.99 1486.38 1320.74 1474.02 cv
1298.49 1461.66 1263.96 1364.25 1278.72 1362.77 cv
cp
1355.35 1548.18 mo
1372.66 1548.18 1488.85 1533.35 1481.43 1516.04 cv
1474.02 1498.74 1414.68 1407.27 1392.43 1394.91 cv
1370.18 1382.55 1244.86 1339.96 1241.63 1352.88 cv
1239.16 1362.77 1246 1462.02 1253.99 1474.02 cv
1263.88 1488.85 1338.05 1548.18 1355.35 1548.18 cv
cp
f
1164.99 1731.13 mo
1150.16 1728.66 1110.93 1687.1 1125.44 1676.74 cv
1142.74 1664.38 1194.66 1684.16 1197.13 1698.99 cv
1199.6 1713.82 1179.83 1733.6 1164.99 1731.13 cv
cp
1202.08 1686.63 mo
1166.99 1665.57 1117.68 1662.58 1110.61 1676.74 cv
1108.13 1681.68 1110.61 1723.71 1120.49 1733.6 cv
1130.38 1743.49 1160.05 1773.15 1172.41 1758.32 cv
1184.77 1743.49 1214.44 1694.04 1202.08 1686.63 cv
cp
f
1565.49 1745.96 mo
1555.6 1745.96 1441.88 1718.77 1419.63 1708.88 cv
1397.38 1698.99 1343.72 1643.05 1362.77 1637.18 cv
1394.91 1627.3 1478.96 1627.3 1503.68 1634.71 cv
1528.4 1642.13 1575.38 1745.96 1565.49 1745.96 cv
cp
1315.8 1632.24 mo
1295.9 1638.87 1328.16 1701.46 1342.99 1713.82 cv
1357.82 1726.18 1570.43 1792.93 1587.74 1790.46 cv
1605.04 1787.99 1565.49 1716.29 1558.07 1698.99 cv
1550.65 1681.68 1525.93 1619.88 1488.85 1619.88 cv
1451.77 1619.88 1338.05 1624.82 1315.8 1632.24 cv
cp
f
1483.91 1881.93 mo
1464.13 1872.04 1401.77 1813.46 1414.68 1810.24 cv
1434.46 1805.29 1550.65 1884.4 1550.65 1884.4 cv
1550.65 1884.4 1503.68 1891.82 1483.91 1881.93 cv
cp
1399.85 1797.87 mo
1384.47 1795.08 1414.68 1859.68 1431.99 1879.46 cv
1449.29 1899.23 1481.43 1916.54 1496.27 1916.54 cv
1511.1 1916.54 1563.02 1891.82 1558.07 1884.4 cv
1553.13 1876.98 1427.05 1802.82 1399.85 1797.87 cv
cp
f
1745.96 1926.43 mo
1731.12 1926.43 1639.94 1884.8 1656.96 1872.04 cv
1666.85 1864.63 1721.23 1852.26 1741.01 1859.68 cv
1760.79 1867.1 1760.79 1926.43 1745.96 1926.43 cv
cp
1634.71 1872.04 mo
1621.2 1880.29 1652.01 1921.48 1661.9 1933.84 cv
1671.79 1946.21 1741.01 1941.26 1750.9 1938.79 cv
1760.79 1936.32 1760.79 1859.68 1750.9 1849.79 cv
1741.01 1839.9 1679.21 1844.85 1634.71 1872.04 cv
cp
f
484.919 354.222 mo
487.268 333.085 381.582 182.775 344.004 178.079 cv
330.022 176.331 240.667 267.324 235.97 302.553 cv
231.272 337.782 308.775 473.999 376.884 481.045 cv
444.994 488.091 482.57 375.359 484.919 354.222 cv
cp
.65098 .643137 .603922 rgb
f
173.646 487.615 mo
161.285 467.838 86.0127 351.715 72.2861 344.228 cv
58.0142 336.443 28.083 334.108 0 334.359 cv
0 424.94 li
51.1831 453.695 184.71 505.318 173.646 487.615 cv
cp
f
190.952 153.873 mo
232.979 136.567 302.201 62.4019 289.84 40.1519 cv
284.409 30.376 272.697 14.4141 259.419 0 cv
157.4 0 li
91.9658 49.0649 0 138.528 0 151.4 cv
0 168.705 148.925 171.178 190.952 153.873 cv
cp
f
415.921 40.1519 mo
418.394 57.457 527.17 171.178 559.308 156.345 cv
591.446 141.512 696.288 93.4399 675.501 69.8184 cv
648.243 38.8438 619.728 15.4082 594.022 0 cv
465.03 0 li
437.721 13.7549 414.566 30.667 415.921 40.1519 cv
cp
f
584.03 346.703 mo
581.558 366.48 638.418 519.756 670.557 512.34 cv
702.695 504.923 804.055 415.924 801.583 368.953 cv
799.11 321.982 766.575 181.8 752.139 186.011 cv
692.806 203.317 586.502 326.926 584.03 346.703 cv
cp
f
947.442 297.259 mo
977.108 294.787 1073.52 252.76 1073.52 237.927 cv
1073.52 223.093 1084.72 159.223 1065.19 153.155 cv
1046.97 147.493 1016.66 156.345 986.997 166.233 cv
957.33 176.122 893.054 205.789 893.054 220.622 cv
893.054 235.455 917.775 299.732 947.442 297.259 cv
cp
f
940.025 42.624 mo
953.87 37.0859 972.196 20.5176 989.854 0 cv
828.431 0 li
865.932 26.041 916.686 51.96 940.025 42.624 cv
cp
f
1142.74 54.9849 mo
1150.16 47.5684 1129.92 15.5815 1114.08 13.0337 cv
1100.04 10.7744 1095.77 47.5688 1095.77 59.9297 cv
1095.77 72.2905 1135.33 62.4014 1142.74 54.9849 cv
cp
f
1288.6 279.954 mo
1305.91 260.176 1339.98 168.396 1323.21 158.817 cv
1271.3 129.15 1194.66 121.734 1177.36 129.151 cv
1160.05 136.567 1147.69 200.844 1162.52 218.149 cv
1177.36 235.455 1271.3 299.732 1288.6 279.954 cv
cp
f
1486.38 3.06934 mo
1488.85 22.8472 1572.91 106.901 1609.99 119.262 cv
1647.07 131.624 1745.96 158.817 1733.6 131.623 cv
1721.24 104.429 1669.32 15.4302 1629.77 0 cv
1486.85 0 li
1486.42 .961914 1486.24 1.98242 1486.38 3.06934 cv
cp
f
1506.16 453.007 mo
1543.24 462.896 1614.93 386.259 1617.4 368.953 cv
1619.88 351.647 1513.57 230.51 1451.77 208.261 cv
1430.71 200.678 1385.02 284.899 1372.66 309.621 cv
1360.3 334.342 1469.07 443.118 1506.16 453.007 cv
cp
f
1713.82 304.676 mo
1721.24 304.676 1830.01 284.898 1837.43 282.426 cv
1844.85 279.954 1832.56 249.592 1805.93 252.065 cv
1786.79 253.843 1706.4 304.676 1713.82 304.676 cv
cp
f
1872.04 94.54 mo
1889.35 99.4844 1951.15 72.291 1963.51 62.4019 cv
1975.87 52.5127 1914.07 27.7905 1817.65 47.5684 cv
1803.53 50.4648 1854.73 89.5957 1872.04 94.54 cv
cp
f
1723.71 554.367 mo
1748.43 534.589 1775.63 502.452 1775.63 482.674 cv
1775.63 462.896 1760.79 398.619 1743.49 398.619 cv
1720.69 398.619 1686.63 428.286 1676.74 445.591 cv
1666.85 462.896 1664.38 522.228 1669.32 534.589 cv
1674.26 546.951 1698.99 574.145 1723.71 554.367 cv
cp
f
1807.76 588.978 mo
1815.18 596.394 1854.73 608.755 1874.51 596.394 cv
1894.29 584.033 1921.48 551.895 1919.01 542.006 cv
1916.54 532.117 1878.73 494.451 1862.15 499.979 cv
1839.9 507.396 1800.35 581.561 1807.76 588.978 cv
cp
f
1454.24 868.335 mo
1476.49 870.807 1516.04 828.78 1535.82 813.947 cv
1555.6 799.114 1572.91 749.67 1572.91 734.837 cv
1572.91 720.003 1540.77 680.449 1496.27 677.977 cv
1476.37 676.871 1424.57 757.086 1407.27 786.752 cv
1389.96 816.419 1431.99 865.863 1454.24 868.335 cv
cp
f
1681.68 720.003 mo
1655.3 727.04 1632.24 779.336 1624.82 806.53 cv
1617.4 833.724 1676.74 895.529 1691.57 900.473 cv
1706.4 905.417 1787.99 868.335 1800.35 855.974 cv
1812.71 843.613 1807.76 759.559 1795.4 744.726 cv
1783.04 729.893 1718.76 710.114 1681.68 720.003 cv
cp
f
1256.46 566.728 mo
1240.8 579.779 1192.19 665.616 1182.3 690.337 cv
1172.41 715.059 1214.44 818.891 1229.27 836.196 cv
1244.1 853.502 1308.38 789.225 1325.69 762.031 cv
1342.99 734.837 1355.35 670.56 1342.99 643.366 cv
1330.63 616.172 1271.3 554.367 1256.46 566.728 cv
cp
f
1424.57 129.151 mo
1424.57 121.734 1414.5 113.913 1405.94 115.352 cv
1388.97 118.203 1392.44 139.04 1397.38 148.928 cv
1402.32 158.817 1424.57 136.567 1424.57 129.151 cv
cp
f
611.224 833.724 mo
645.835 823.835 673.029 786.752 673.029 766.975 cv
673.029 747.198 668.531 727.025 633.697 713.625 cv
598.863 700.226 495.031 660.671 443.115 670.56 cv
413.872 676.13 430.754 776.864 448.06 801.586 cv
465.365 826.308 576.613 843.613 611.224 833.724 cv
cp
f
40.1504 789.223 mo
79.1118 816.417 168.704 860.917 188.481 828.778 cv
208.259 796.639 270.063 695.28 255.23 675.502 cv
226.892 637.718 22.8057 583.315 0 603.81 cv
0 718.531 li
9.71484 749.953 24.3115 778.168 40.1504 789.223 cv
cp
f
275.008 863.389 mo
220.62 895.527 173.648 991.942 178.593 1004.3 cv
183.537 1016.67 195.898 1073.52 220.62 1063.64 cv
245.342 1053.75 354.118 989.47 344.229 964.749 cv
334.341 940.027 294.631 851.793 275.008 863.389 cv
cp
f
106.899 1085.89 mo
104.427 1073.53 96.8315 1048.99 87.0391 1039.49 cv
64.7065 1017.81 15.4282 1014.19 0 1021.61 cv
0 1083.76 li
37.7988 1093.7 108.829 1095.53 106.899 1085.89 cv
cp
f
398.617 1296.02 mo
430.755 1286.13 539.532 1216.91 532.116 1204.55 cv
524.699 1192.19 466.772 1098.79 438.172 1103.19 cv
373.896 1113.08 312.091 1165 292.313 1187.25 cv
272.536 1209.5 284.897 1253.99 297.258 1263.88 cv
309.619 1273.77 366.479 1305.91 398.617 1296.02 cv
cp
f
732.363 1048.8 mo
762.029 1033.97 865.861 967.221 855.972 940.026 cv
846.083 912.832 821.427 858.005 792.642 862.985 cv
766.394 867.526 643.364 910.36 621.114 930.138 cv
598.865 949.915 585.256 1009.03 593.92 1019.14 cv
608.753 1036.44 702.696 1063.64 732.363 1048.8 cv
cp
f
811.473 663.142 mo
794.167 660.669 759.05 671.642 742.251 675.502 cv
725.453 679.363 724.946 715.058 737.307 727.418 cv
749.668 739.779 860.917 744.724 853.5 729.891 cv
846.083 715.058 833.363 666.269 811.473 663.142 cv
cp
f
1061.16 860.917 mo
1048.8 848.556 979.059 800.473 933.584 797.32 cv
912.45 795.855 930.137 848.556 944.971 865.861 cv
959.804 883.166 1031.5 900.472 1048.8 900.472 cv
1066.11 900.472 1073.53 873.277 1061.16 860.917 cv
cp
f
1189.72 1202.08 mo
1219.38 1194.66 1236.69 1110.61 1234.22 1083.41 cv
1231.75 1056.22 1184.77 979.582 1169.94 967.221 cv
1148.29 949.176 1004.3 1009.25 959.804 1036.44 cv
915.305 1063.64 967.221 1162.52 986.998 1184.77 cv
1006.78 1207.02 1160.05 1209.49 1189.72 1202.08 cv
cp
f
1310.85 986.998 mo
1323.22 984.526 1338.04 962.274 1340.52 954.858 cv
1342.58 948.684 1332.63 948.939 1319.79 951.696 cv
1301.79 955.56 1278.1 964.335 1273.77 967.221 cv
1266.36 972.165 1298.49 989.47 1310.85 986.998 cv
cp
f
1362.77 1061.16 mo
1372.66 1083.41 1446.83 1165 1483.91 1174.88 cv
1520.99 1184.77 1540.77 1137.8 1548.18 1122.97 cv
1555.6 1108.13 1553.13 1026.55 1543.24 1011.72 cv
1530.81 993.075 1439.6 975.416 1407.21 980.158 cv
1404.23 980.595 1401.73 981.218 1399.85 982.053 cv
1377.6 991.942 1352.88 1038.92 1362.77 1061.16 cv
cp
f
1701.46 1140.27 mo
1723.71 1160.05 1812.71 1162.52 1837.43 1155.11 cv
1862.15 1147.69 1891.82 1038.91 1872.04 1011.72 cv
1857.5 991.726 1681.68 1016.66 1654.49 1026.55 cv
1627.29 1036.44 1679.21 1120.5 1701.46 1140.27 cv
cp
f
1488.85 1360.3 mo
1498.74 1377.6 1563.02 1464.13 1592.68 1471.55 cv
1622.35 1478.96 1755.85 1449.3 1755.85 1431.99 cv
1755.85 1414.69 1760.79 1352.88 1745.96 1338.05 cv
1731.13 1323.22 1619.62 1279.17 1592.68 1283.66 cv
1563.02 1288.6 1478.96 1342.99 1488.85 1360.3 cv
cp
f
1320.74 1474.02 mo
1342.99 1486.38 1441.88 1511.1 1459.19 1508.63 cv
1476.49 1506.16 1414.69 1427.05 1399.85 1409.74 cv
1385.02 1392.44 1303.44 1360.3 1278.72 1362.77 cv
1263.96 1364.25 1298.49 1461.66 1320.74 1474.02 cv
cp
f
1078.47 1560.55 mo
1100.72 1555.6 1189.72 1508.63 1187.25 1486.38 cv
1184.77 1464.13 1173.27 1382.76 1152.63 1377.6 cv
1132.86 1372.66 1061.16 1382.55 1041.39 1389.96 cv
1021.61 1397.38 999.359 1459.19 1006.78 1471.55 cv
1014.19 1483.91 1056.22 1565.49 1078.47 1560.55 cv
cp
f
722.474 1325.69 mo
720.002 1340.52 744.724 1385.02 779.334 1407.27 cv
813.945 1429.52 927.666 1436.94 935.082 1422.1 cv
942.499 1407.27 955.746 1342.06 937.554 1325.69 cv
912.832 1303.44 796.64 1261.41 780.462 1257.68 cv
775.807 1256.6 769.232 1260.55 762.171 1267.08 cv
744.696 1283.22 724.235 1315.12 722.474 1325.69 cv
cp
f
618.642 1471.55 mo
571.67 1461.66 361.535 1503.69 339.285 1511.1 cv
317.035 1518.52 284.897 1535.82 297.258 1553.13 cv
309.619 1570.43 480.2 1622.35 517.282 1619.88 cv
554.365 1617.41 707.641 1550.66 695.28 1538.3 cv
682.918 1525.93 652.337 1478.64 618.642 1471.55 cv
cp
f
124.205 1493.8 mo
148.926 1474.02 210.731 1389.96 205.787 1362.77 cv
200.842 1335.58 167.919 1236.59 146.454 1224.33 cv
113.635 1205.57 49.2075 1205.59 0 1212.52 cv
0 1426.56 li
50.248 1466.89 109.718 1505.39 124.205 1493.8 cv
cp
f
186.009 1713.82 mo
176.935 1697.94 74.1738 1675.82 0 1674.19 cv
0 1683.45 li
39.5527 1698.37 125.813 1726.18 143.982 1726.18 cv
168.704 1726.18 195.898 1731.13 186.009 1713.82 cv
cp
f
408.506 1867.1 mo
403.562 1847.32 334.341 1745.96 297.258 1750.9 cv
274.01 1754 265.119 1802.82 260.175 1817.65 cv
255.23 1832.49 351.646 1919.01 373.896 1926.43 cv
396.145 1933.85 413.451 1886.87 408.506 1867.1 cv
cp
f
54.9834 1936.32 mo
84.6494 1933.85 158.815 1852.26 143.982 1830.01 cv
129.149 1807.76 64.1611 1792.75 12.6006 1792.84 cv
8.396 1792.85 4.19043 1792.85 0 1792.87 cv
0 1930.69 li
22.9624 1934.77 44.0298 1937.23 54.9834 1936.32 cv
cp
f
1985.76 415.921 mo
1989.13 418.515 1994 421.571 2000 424.94 cv
2000 334.359 li
1974.57 334.586 1950.66 336.934 1941.26 339.284 cv
1921.48 344.228 1953.62 391.2 1985.76 415.921 cv
cp
f
210.729 1968.46 mo
199.329 1970.99 179.938 1983.1 157.401 2000 cv
259.418 2000 li
242.476 1981.61 222.981 1965.74 210.729 1968.46 cv
cp
f
529.642 1978.35 mo
512.885 1979.46 487.546 1988.66 465.031 2000 cv
594.023 2000 li
568.438 1984.66 545.638 1977.28 529.642 1978.35 cv
cp
f
1033.97 1765.74 mo
999.358 1745.96 930.136 1745.96 905.415 1760.79 cv
880.693 1775.63 771.917 1938.79 784.277 1961.04 cv
788.858 1969.29 806.349 1984.67 828.432 2000 cv
989.854 2000 li
1019.49 1965.56 1047.25 1920 1048.8 1896.77 cv
1051.27 1859.68 1052.31 1776.22 1033.97 1765.74 cv
cp
f
1246.58 1758.32 mo
1232.37 1754.06 1194.66 1807.77 1182.3 1834.96 cv
1169.94 1862.15 1236.69 1948.68 1258.94 1965.99 cv
1281.19 1983.29 1352.88 1965.99 1365.24 1958.57 cv
1377.6 1951.15 1374.71 1894.09 1361.32 1878.12 cv
1347.94 1862.15 1271.3 1765.74 1246.58 1758.32 cv
cp
f
1486.85 2000 mo
1629.77 2000 li
1592.28 1985.38 1494.73 1982.54 1486.85 2000 cv
cp
f
2000 718.53 mo
2000 603.81 li
1982.04 619.948 1985.82 672.657 2000 718.53 cv
cp
f
1978.35 1073.52 mo
1981.35 1077.53 1989.36 1080.97 2000 1083.76 cv
2000 1021.61 li
1984.57 1029.02 1970.93 1063.64 1978.35 1073.52 cv
cp
f
1926.43 1355.35 mo
1933.59 1368.66 1964.5 1398.07 2000 1426.56 cv
2000 1212.52 li
1971.37 1216.54 1947.88 1222.91 1938.79 1229.27 cv
1914.07 1246.58 1909.12 1323.22 1926.43 1355.35 cv
cp
f
1980.82 1674.27 mo
1977.54 1674.38 1985.73 1678.08 2000 1683.45 cv
2000 1674.19 li
1993.35 1674.05 1986.92 1674.06 1980.82 1674.27 cv
cp
f
1906.65 1904.18 mo
1916.01 1911.98 1960.77 1923.71 2000 1930.69 cv
2000 1792.87 li
1952.8 1793.05 1907.71 1794.34 1891.82 1810.24 cv
1881.19 1820.87 1891.82 1891.82 1906.65 1904.18 cv
cp
f
897.998 1671.79 mo
900.47 1669.32 832.553 1627.72 798.526 1627.51 cv
781.148 1627.4 789.221 1661.9 799.11 1671.79 cv
808.999 1681.68 878.064 1691.72 897.998 1671.79 cv
cp
f
682.992 1726.4 mo
660.816 1726.62 574.141 1760.79 564.252 1770.68 cv
554.364 1780.57 544.475 1825.07 561.78 1839.9 cv
579.085 1854.74 680.445 1889.35 692.806 1874.51 cv
705.167 1859.68 752.139 1797.88 742.25 1785.51 cv
732.361 1773.15 710.519 1726.13 682.992 1726.4 cv
cp
f
1125.44 1676.74 mo
1110.93 1687.1 1150.16 1728.66 1164.99 1731.13 cv
1179.83 1733.6 1199.6 1713.82 1197.13 1698.99 cv
1194.66 1684.16 1142.74 1664.38 1125.44 1676.74 cv
cp
f
1362.77 1637.18 mo
1343.72 1643.05 1397.38 1698.99 1419.63 1708.88 cv
1441.88 1718.77 1555.6 1745.96 1565.49 1745.96 cv
1575.38 1745.96 1528.4 1642.13 1503.68 1634.71 cv
1478.96 1627.3 1394.91 1627.3 1362.77 1637.18 cv
cp
f
1708.87 1703.93 mo
1733.6 1718.76 1827.54 1708.88 1837.43 1708.88 cv
1847.32 1708.88 1859.68 1674.26 1849.79 1656.96 cv
1839.9 1639.66 1689.1 1592.68 1632.24 1609.99 cv
1612.73 1615.92 1684.15 1689.1 1708.87 1703.93 cv
cp
f
1741.01 1859.68 mo
1721.23 1852.26 1666.85 1864.63 1656.96 1872.04 cv
1639.94 1884.8 1731.12 1926.43 1745.96 1926.43 cv
1760.79 1926.43 1760.79 1867.1 1741.01 1859.68 cv
cp
f
1414.68 1810.24 mo
1401.77 1813.46 1464.13 1872.04 1483.91 1881.93 cv
1503.68 1891.82 1550.65 1884.4 1550.65 1884.4 cv
1550.65 1884.4 1434.46 1805.29 1414.68 1810.24 cv
cp
f
445.586 1763.26 mo
460.419 1755.85 467.835 1745.96 450.53 1741.01 cv
433.225 1736.07 423.336 1736.07 413.447 1743.49 cv
413.447 1743.49 430.753 1770.68 445.586 1763.26 cv
cp
f
1006.33 634.282 mo
1037.16 654.837 1115.27 642.504 1131.71 632.227 cv
1148.16 621.949 1197.49 467.786 1187.21 447.231 cv
1176.93 426.677 1125.55 381.456 1070.05 385.567 cv
1039.23 387.85 952.885 418.455 938.496 430.788 cv
924.107 443.121 975.494 613.728 1006.33 634.282 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (\713\745\755\752\740) ()
%%Title: (32 stone texture.eps)
%%CreationDate: 2/25/2015 10:51 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&Bj2OudOfc0p[e$,OP:Ec&2duu<afg>dDj2G#!CgHJ,gH1@7b_4IQuWFIb0Iu.[?)4H4T34H!T77Pfh,l1,A"5]R.-A5OTV7
%H:QNb5?CGuT"ssiYMXiAHhUZUX$+,,9"huhIbO4L?4Zo0mGY;#n+I"(Pu@"q<j2/$FbF+*V;6=(g]'dCg265Li18#:oW?g2[[[63
%Bkp\*bFTE&hrNn.6bJ*Wpt:q9p\)5^#OU,f^O<>8MVj3[Mu=u0[bIPh`eRlKNbI`m[5]!DZWEUm[+.A*$qGs$W713`R:k'mHE<ZT
%\'J7S!uaNgGinL*WSTgTSTdRbRaS\]5*"buCgs*FH,c#@]G71d?QRNVqTVh,K'ZY2q;8^9oI#(t8n#hT5HeGGfgh\M@]s;dr#E3_
%r2C0.1+.]"%!UF'BAM.;/Z\)Fn]F]X9iLsqr/t("l:=A0"m%F3P>Yr?Z=cdYOP4^pHg&u_?9+#$$Y(`$s6?ukYu5o!DB6(hDQt^E
%d<=]&Yc("7i=B/Uh=fcDY;67P!\$cb4^Rgmg0Iu[f0H[siX-K1,_*EE40?=rHN\0PGL*f>/#=N[jjj1k7dJCoT[:gC=hD/lIj[Th
%MP@moQ2n:)_K$K<@EC$0I[FZ/RSrDsg%tMQanO9$\n56P4gp[L@kH=!23;m#coLC`<jIkADbgV/K*'&=L&]eE3@XluB)fJO!skZ!
%]9`Q<&&-S#Nn_E+^>*>8NSZt'J'.HB5.Ol$hY46#])<lJlhHD9L*k3lge=O%gT*MEkk*Nsn%ZQahi_o]]BAtZl(ENT[ba+4s8LbX
%je0B?0's'Nql!ZOh##LUa1dp^"liD5kFGJ^h!1ES?df^$3,"ZN=1g.mna@Y$]ug0(Yb3K+#.1bbqpk-.cO(-E-*?#il$[>dG*Bp3
%J9n=`8Ueb8hWXmS0.d0>h"nPI7a2!Gc2]hL8a9REiee(sT5N.YCNKtGh!Q0ko@EU#Ku%Q`9q'l:o5q1nm0le^#)af'k8TG!e/n6?
%HTKBeq=(o$e*hM$JC"YkVstrA7f(EfVN\[`X:Fa[hm`,ZX5!"]%9dDbSc)^YchKZlk`U..KLPb>oiXFQrfhUbrPm`i*s2;Cdf]=p
%$.Tt^Y((ae;6%!OgcAq"CGlPXa6c@R5bs<+G\QDWo'D^C]jcu!K@W<noRE\opU&g@-uIpYX,FtF^4PC4;YAuBh`h#<gZn7BH(d?O
%qc=m"T(+0l;?"N0PIN!b*jf%c_p=VGWOf"iT"97emV1tHHhim($%-^\a#_Z%J&X,F'=5bLbY^j$`SVG,lGd$#.VOrSWk7e/*"\!L
%%"\-=LNj6!#Z$E"i^s'*HYS#[YN,'UrbhRl^ro1cf'tT6#)9qF6c2-NZ$6m[0i^=n;`B]W1JKbJKm6E;MBWuc;&WI(e=q9=&0M&V
%E>TYm+2r59j!7C[8mI?kE?f@/;B/_F6SolhCD32kWiascD:iI[-UA@l-AdmF8Wkp0,h8]^1h<DR%(;T&Bb[.biMkp721I+OPI`-`
%*jfV:'B`0P*oij=4b7s-pLKZLj[6kV%'1+jO8Bpk2=;W'4)ZojX&6o9_c(DOJ,cWJ_3<kMn,Qc(68ZPhn8JO54BPtMVuVIRfBY:V
%<BM!Y.3:a]%X?UcCnrrfWT'o,;ERM[lVWRU=OW_<Ks^oA?h5rh%\o&AeS57`>"u$*)HS.m82[IQ<?HJ>X8i=c$B:`WV34lBMQOh4
%&Q8ud!AKZ5XbgcAd9/?/5c@IVS&T0,RP[]je-FP`0u\H:_t$lZ#)S;gPjX"$%V3M0mPfDXpR$>Lkhg!H,XdQ!i@u._'q]1!iASkC
%7E&&90tQ=R07DjX?Td"VO`'qg2aK+D5PuM4a1*M6URu#if_e=r")t#(r#K2@Jr2ZJpXJfTTtR57blViNf;Zk6cj#RGdKgf3ng+$p
%\u1]U<VP"ue&WW?jcl'DEsG`&5nAB#@Xp*d0II#6eUU:%i0BA^LVU86(mb<uWe,qICmubbViQiHYVcXAVSM)([J'K9^un1p#qGCR
%as$7;#4<kk"VpB\3jr?.e.rb)DX((^`i_n;MlPE0NI$dF(cr4l'71:t%D+B\?!>4-X^h)`aX%3Pg#Wh>4D5]_!@\(2`>7Q)^ZJ=C
%pbcscVgbrW/`*_/&>:%*B^pg7)qCE@g!TutHm8<Pr!D2C@B6"bNbsh;6Ja^N,01fSj7lF#4dGq:h35@hk"k?8."B#Vd@q5)WDC6h
%J6Mg1!_(D&Z:WX=-Q@g<ajE:D/3%)Ac5:$BqM>FudJs`[JTk/15ne4cfLFeu+a1=*nY$9G:ra-Ji4URaYQZ\?KI[9^1iip?9lQ+R
%L0b&X:;Otf'SE/"m+_S?$+q<aV%1XS0e)/`CLXMqK,l"`$@:?n%04(rX]rVr#(`*-*e=<Q,krVui'qi_T4B5OWNdR2,Y4Vj.uuHA
%a<O^+-7S!i.tj+^Qh$(o7Ijs<8PusSGNsF^$0(-CX\_Po/4;')!`g&qeI[>o@l0m@V&1FV+s^\(,HbVI"c3ORmYNVj8j0/p4X0R?
%cLh1"5bsuFii2&Q%r$)=.I@,LQ!=am:]:C25`>;NAB\ajZRBl!\`@HOUeZ_XBJIW_#$P%qe?C--(_JEK&M-n[W/<Q#;'M>)(s:_,
%A=(hX5?44-_0s2V&S>m<!)XFP$GqFO%V*>K+?!IW2#R>WR`jM2N@X>@,[j<])=D%fPMo;l5oC/<`$2uXBM@>.'G7NBBZ?___h'S!
%`Sg"0$C2P$/#KSE'Lh+;ZMY#Idd$Mm0>CU08oN:=+r]56^j&G0&(miuXYc5rr51H:4SeQCQCo8%'O&//<sg2IpD\1K,#R@P!BQ]0
%K5qj57557'2JWXLJJC7#>)3hKR"iT=r#;d%3.`jTB^mVm+#GD*gSk^2k"@u2O<k\>g6:dR+>U#,,)RhT4hlsS?ta%&%-p.1-q@FB
%O-Sj$nbq(hBMn$U2pq>i,m[]GgKq(+g-3So"0KuKmp:icA*LlqIfJf*+#3rrLHkV%3BmC,ffs0&I9HF=`@DtePn.*6s0cG]KU5DL
%_\0rYEe&G#:8Jr72dT<3hmcL#D)mT7n&i]<>ZP0EVoNdob+bcoF@6L%?,-s8CMb3H@<:eV5&_gB[.L%<D's$8=t89%Lf_;0HKqg^
%.!qr$,oo;ZNlJrC*-`pUP,+&&Hn>Fp%nlfRA;oJVgW4>^&*ptuah/%6+0j2UpGa`D@g`b2]<T>AK[g].I+##U3f("k1kj&I53pjs
%S9gR$^2&@APQ[,#cNg?sl!RCc2m!L7-S8(f)@[\crnCY41-i0;KXj)eQ2H+FQ$e8s=!@9)&3!Eu/_ZRCnr,"&!,704rlcS\@a>KP
%nASQ\"XP=1i8h1`4d.q!<]RUaYP\rW-mYDJ*!/'S.u"AS#$6UQ?'^7[;GL--"c9M)JN[1qFb5.](.(qp&gC7j4H'?)&.1Qf'I`oh
%?(`1a">s(1MQsaLe4kKeYolVG5Y"LQqGSkRKk&PH!$WgYH:h!O"<00&\00-)]rYe$87g4iQ:E(V&R18_p2/Kg+-cpI)/U6sU;nZk
%A`+6_+&iGRQ4q=o.)bcU'Z_gW6b5\/2F]]g*]uAhjX;]Jnh_>-J1]uq0dg91<$a-cYTjd&MolU#!25K+d#46fZ*k(n@&Y?<3;/2.
%[29d'dL>gZ(?6.pAsf.;HhcRuIg4)KrudUtoN00Bj]F]!nj%hX?abdPdma:2/-dbX`+iqE<R<adJBji9AB->j0QG_eHWW[DKqc+4
%Ug9pX/R`2oJNY&&ZGRPE`-R0Vo/%r;^^$)A@$ND"$L$hbD[=@5nUm>-7(X]gm3`YL[4OP3!h96=XNa*"""E@L4Q6[CF]Ls6Z'Q":
%Z#Lp\3@%BL8f=7CgIo\"gIj@A.'.u>..`BU%#Ar9aqj(1IG)L\cfG!,:(44ae$Lq6NrL,Q%0)Ls).>8J,UjpJ?K>6cOVg3YJ<85K
%s&F`jU.'7V:^-;=WM=AO2%CaR\T5bopkr,]QSOSXA)MhJ.9SZ=c^9A0:&n8%8a6l0.TqWpn0huNEDd(;(o>Y7cpRt1O-$$5m.j$R
%O?!RXZ%<5G[VIl,8qPWJMNV;-&:`.GQ(c?@CbYr*.HYl(!1Fa]diO;^PPdf/YRkd;aiEflG;+o<ckb!6LfIjhSFiXu9Y;1!%\/3>
%l'J85q:AI6h[i0*]qg,MgkV^sr3Fjg*OQ-Kc+u\m0Rqo>V9</"b6=N3^HAj^HjM$hS$!gVY!-,G>V9_02lgh^k=ank6mn\t?\%?6
%O",W"",:1]dW0&ZOt;s*-b;orc2^[]8nf'YEqMj#]g2mi%[mc2)"odD=YAq]h4SiKptm'/Gkl<2^Ys.VjhhQ-/&V<eYWgUp(kFR@
%ZcfkhjVPW05C2n&["@.!\JVe/o;1PMQq(j&FgaB0BAI`;8K#rE7%:KO/`BWj(WbBJ)CM5+T^.8G^#t$;33HH\90?8O35A?I[-$?9
%^Qk*>;LX^A!>L5Z>n<LXX_o('=f:e9n)iZE(cNiSq!^M$gr4f\f?al*HXfTHO+70]R.S01?oSX,WugdOR\VT]le14^l?IXN,lZMt
%Dd\eC.m4>/Xn"+hRIBC$)XPA=rh$83NEn*KX9U]J/<mBq)RX62>0[J2M#>u[-bNZ95@)*\QQ*.)#OP05ITW'9k@qD\$;4dKK?i?L
%W""3a.$Z<860nPa1]O.T$MF+R45GNT]B<o4V<)iM.fYodNW*IuM>TJ[Y;cCQX#1_X`,=I%&&"a[]"_G)o=Qi.(g^+&,gY"^UDZgU
%rP'CQ]md/5'.A##q^:c`)hBH=](ib%i*Jq5])A*l&id5R*kd`iggHkqlMjGOq"K@!?O`6hJYLWIlaC`=1N'MHs1]c[M8K8fE7@,N
%09V%(`@V$-l!*t+o3&Be?c)I8.Z1A;>86#:6a7/?NiE%+p5PkCr4U,A^M>>1&-)1oBCC>*D)1I$pAalKECm<9hJ0O2=%rG"h)RO1
%dJh=ir[k)CN@+C\cGA`>7WWW.rt\PFIU<&efd?[4Aj1_$BKgqF:$)O=;sj=_Ra5;i"PILaI5oYkY8^2SqPCrdp`OZu]73#sDbKZa
%ha;hm>PhW`j0Usa*C-k*%h'f`[g.!O^fa0FKQDk$qYI+Vm=W^[Bka(sq5)G7A_m)R\bS\""A:?NYrsMK*jg^i;5p5LH.brlXJ_o$
%eeoqH4/_7I0p#[k5HD-qUV2+lE)>8$c=_mm(H6RUB*@=tF`;<)X4,YhjPiWLT(PSila=<pC`A(=,r1:/ZVK0g)HVTc%)r:JXHtF"
%UOHpX2&s"/Sc?fG![Fo?R:IG?[<fSk_sMHO3Bo"jAZl*^PKJ4C]\C]fGh3uFR<1R6qM^T-HkoWWQo"SUMsRtDcd@"5Y,G%*1/ZXF
%YDr"9%eE[_j!kOf[7gI*mD0YlEl2\Lkb!pISR/ob*"D`l3Gn>iWBG"ro=CX^G<9G&"Y)/)/.L<'bc5iifI.!u`%(pmQ_e&VH%/ZE
%CNWjpr=&JnF[h^,>KJPcNV=#pB9UO)#0"1*[QA.u@B&UhD"EoQfPIZe)i_;F!crMOP?rb="CNc$C!NWn0Zo`R@sHZJ*p6(o)=$66
%>t"S[/">^s1GjF&9@j5W4P?B(D)>r!L1`)7])=iJm`kh=_>i:-fLLR;:*QlqG-S>;!Q!A*C@;/s8r\JKW3t7AG"-tAiLSrW'Ud]h
%oo@=%8+"ajr`Ka'Bp!n.+`Fj%cWVR#[*dcLF\*F*;IMK\c>-o$mD4*sU2KMq*GVS?3r]Z4\DJAJZk$c-X0hf)5FVN+02AnEHFpP0
%l!D+q8%*cHZYB'eDZ+=b4R\:kfW#[q+LB-Y:]^[RF;/-[;L1&pD.eGsAE25j(Pb/a@q93#X]u+%$k8NCo%*Amra$HJ`a*n!//N*D
%GZrqk'[*)J8;B=3lFI1T-_7S,d'8f1X+rWI!uf(#?Te6F)e83N;I)K=XCcIf&+aX,LYVM#*YVjQ"haJcm(_-oF-KS#-Zm$dm,[ZK
%?M'=*^Im:K_R(4!8BilNX\0Ofe5a)hr(]7BFb4[.&6H!*`>-RA!D744Up'XG##UL(A%j6gB^.1!$AG[N`H:4pS*MDA*T+R<\j_Eh
%m@/`%li1O`l"`3Xg:sqiccu`+20*'/>?L,T]qcOP8f=[u%J!uaU)bC3IQ>*Kk(GU'Y22@\/.Y@"J!T@%d+Z>6m(LJ!HP6JSFR/f?
%#BG*lM*]>eP11-,I4^;C*7f4)h*LiN$HSKB)B>"=K;8"f"*^"cqmu6%>&=PJgWj$8[c4KkL+fs[])-t`JLt&>^Gie<Uo6,%fMN@S
%VXa*<oV=UF,Q>8H&-[sNjm5V:KDsO=j$)ghap6bEeX9QSGeTNj/Y(AEYhTC$l<^lnL?6)Y2sOCQ*gV0?UDAQDX)%+sHR&('?<*uj
%PLm02dj4'B`SiPt-u'QSlca+n2L=cL'IP>1qr_+-;Yc[`$<3aWF2d??UOT`0^TPTG.L8S)KCbRPJdX5<Z_nrW!$(18r@<_We8"Z&
%\IO'W[;-*>rb7LPbglQOa::hec)4d2^m711X`&-Dr#dn@.9Hm=c[;>!A9MYMCsYE5j?"o[h&F:tG,J^j.7?\NC_f?H>BnPk?o$:)
%E7E,lMo\;sco/LA<d43DMfM8BZNJ(DgUm80c47!o<L7?'F7r?1bNSF82UI&ndEQEdEr'l8J(<8*!nY#PbA)G_X^9=0qhKsEp6?k'
%Y'I;/9Hj;+4mX0]MPdOZ(m^*?Hd8jAAXcT(LpU5aC^p,"UXRdo"GV',dbpinFVthtc%UO#U.t$TiNd2NnF,nC^MA('ImD\kFkm="
%o+4=]\3Kb\$tCoh-L/Q<CR5;?(hL1!Fp"_]<P1q!&9cgr;+&*E4"4O&rDZnF/*^TC7\.qOjdEh=$gUq3>FJa2"X.jY@&\p)TXe?0
%Dbp^W]N3m^/S;1D(gacMF7BG2l$?Mf;0ttiDGYU4.HFf:I=bY@Qe"B<%8MWo7Xg!Dj,r5lEcL/!W'2s,RDRRo7*gYUH@N]PY?1+%
%Pn)+EL]-(p4'q!Q;\G8P2(/N'X$+$:7ZEDs(M&WD'P.p5E`U_c)\Ff^>tW"(e#&tp("K[>SKp&&m:V<;.PWq8H[$k8UjSp1b5UW"
%8s<#DlMg%?)4d<TcW%4870?93>S`;NT!(6UCj06q#D_]ZVR;TlPNVnXm$uO&dD+X8bc<[n!J+4NYOsLdF,E[+A>SC&-WB%UgU6_I
%,cX4s5EISk]B75t]h]$:miUA8f_ViI4M8/6<*^G*4[!+3lJ6dC]X9_C^Xd+aLNhaecPl?@Q*n(s+29X.<]3/!J%7Hshm^j"n1qQ?
%)fsd*L@lY]UIFXsg;C,U#A^AuB>_.9MdRFYX?G@K299Mq+'"An^"HLl2=9d7kL&>gHF\G'BWA7qK3`S4lcm$lp>aV!rPt8)q7*e6
%3UL_n/*krbj+YPDmIOrGgj*9*dCoQ$h:)tKkBf!h]49;WqsM_,c]t&)q;(/G(@/)M=^+%'IT]kmQ;8=^Mg*L:F&*;Vd>brBq>K(1
%H2[6UHX#m?F[)rI<f]bYA,FZGJB7J3omM>MkM#3bqsUp9%!l%QHM"V+:\T=hf+6GN<L8jjG:M??[sL/l&$:J*FHc]k>M*l\7rRO)
%a6)-oe]Q_;hEpnciqJ/7gASM*>5S66j*/gf+$\Q<Dk6ArB;'=TENEIChK$dL3d8<AFM9q'W-7Vn\\Bt'pj?E$fY7*D':<-Rq#!*>
%2t=e0?e-^?rVNK#O'Y"T[\o`>Ff\ji*eorrrjoj`ZJt%Aman'AhZ7ckIbVRI]n;SFD7P?hp0U"P>?YiE]Ctosc=(qWmTOIUp%J:&
%@N$tNTYCCS^AZ^8qHk%>h]7)J$2/7dO`hi@mUAeLis3'(/>(qrnXCRcosf<'+"oVWI<VpSq-S$SX=q%`mko#8HlTA[Qp5t`<hp)6
%nb2ra2tCP=EHBZY>(,:QU%N2ZNUPS)YT'YGK0OSgNup:rKDLe,8$8Q[O&d>Dr-7m7<\kgPg=r\u=Z<9ZI@^u.bBO<lgnQIPC)\U[
%DH6#["Pi\Dn;2ud`]s/I47s['ou#l-59$`UrB&PSn*QV:p"^-s/"<s3lh]R`kNCRF0.T.J[VBu0^*u<3`WmS)hu&1P<V)oifrY3u
%s/jlJ&MH@24M?*kX;sLo!Q2t8Xkc&%O#p%DJ"FBQCi2@[dB(Y9]MRg&YgtBk'H!C+h^gm8fD;IFH5n<7[>-i=5:Sb@8*A?b])^Uf
%,dPDa0Y!B*[>c36=_$kej5[u3UYu%7PIfBD]G:hqXF=Mneq#%V()O"Lo]sKhRKRMJEO3V\oQbI>4;Tts2FUG*hfr?#p=pIs=^="6
%pq8\3pnD$`<d-_3o67pOl:<6F&ta*=mH33;Zh`<p]QMY)fI/]!pkjL(gD=>*h)HOOY$lOFhS\Dlce"2;)ajLAs6Wk+ILP(?>_gqW
%]'gsas5Rg'BlPes[4LQ6qaCtM<-DRh/:cA8:@$Gih32"%Q)]Oa:Nu1L2GYReJu@bm2#</;2s4Ol+#`H4a'dlre*kKj),C_5g-9C3
%lB/3g9:PC'p6>MgmhVbOqXXBe#LsokK@=SEpT@lV3W<t&D7iul)`VUap0S!JHV='2AaAj\5$n,,Y8T'1*';S/?U)4'/B2r3a%?s`
%mlikW-ou[!nRX(aXrT\%5^NID^1WJ`=5Mfi+&:D!=4u='e4kC6QWAgONVNXf)-?#dpK"=BF(_'+l;N285jCRO4_PSH!o?fth7g@B
%hO&Z^oDP'J>kjQi4ZBZ:(gq];W^?9)iSjY&&G1>LG#\.\]:US-hk/NUYA*+qg?Q"J)-+Dc"$P;H=7neLJ#dCXn!NXK;OK?N-)YO2
%rKV`@AAsP>]Y"#NZduJV7I.DVI.V-tHSK`u^g@=HmtH6fd8/)4+/Sc)iA&JYCW/(/W%)_iRpsp6Hh553;([.d#<pD1YOs49HId^,
%Uog1F;=DUB55hEq'j(4TFd!>t[>GDb2lH>,D%q_s^[_6_T^IQ0A)c^J'b!F?d@!Uj*7fL[>K^8e1,%mHY?ur\53Rp<DQGn_bfaEV
%q"!Z@iUuB/buN8>qZMCsWYD-UrQfmtb5f*LV>p`&l,W\)Z<"\?`kZ.EPH-QfIK/SA>Zci&2o2Vo)8%Y&=9$b0$rdlOd<aiVMDToK
%m!<shQd+Y>b9D#S:K`nLf86]L%9]/nd,PJgpipSL33P'N9Z'MPOD\[H9;a;Ua<4BJ2(R"+WusrAeddFETO"'I??.(KD+kG;YZl7e
%T,pf#b4`3o&!(kjN0e@$Bbc#3;X4E%ZaPhIR=("kTSTVrf+5>KXRK<-I4`kQe3E0X$CI-_rqIeqO%6U-#oR;Wgk6DUZDZCQI(Ykq
%OstAp3nO8$-Y:."Q(<+PHHikpm2bBkLI%&PUm3"2kKucjqodf\k,el"Z8Ji![ut87^sX7E1\Hs>pUB$$eN.'PXYofJIbn#[<ff&1
%dHf!+SY@[@n6XTbC29"ONsrFFZo%eNA]!'bo:O&sDaGQ;DQgac5F9r]caQ*h?bH/:/P`;AX^0WFeMl*g^CKrcgih:ErQ/pm7($-B
%j`S>?/q%[30E/Q\a8@;5Wpe4OqhmPZeT`fN.]AY^Fml9cIaE<t(:ch`H@DHG@H4/iccKcb].6JhcsNaPVqktb:rTlB#!Nm:[a\Z5
%\b3MMJPgrL/0B<<GEeF5BJ(JorL:sQ%5aDF*6]";M3ClWH9t!uH8=&ZP&>R7bcSe;]-g?iqXD-I'(-T9j/2h-.3>4%B,]C.ch/+)
%pca"khlFIoqt-QXk3eRuLs"TGVnS]&WhQL;f`*p[;6I,&YcTY@W-AkuD@%f+BD,VTA#HX.p'&eagJi074Hdm0%L)+W3.?tXK;[7;
%I.U!P"*?>"&#P-9hQ/q)\_G+fHa??9a$)[=Nh2j@Z'V<q&'_/sFuM&$@92hY@e6t4h-F7#lUO2<rN.H:_:mXJWDdGR*jbsO'6B.Q
%+S^2%]6=,Jed=nEm9>;H?cnaTR8fi*no=bgb3MEYDj2"%%:?.`_4t5p+**nG<Xqm:*gc0fKI.^@S#_Opjh)>_r;,Nkm:N,;cKuM)
%9huGAYJiTHT+\cNn\"_\p"J_>IeWK")s[7eh9)3gg[D)(B0X'/&NVW?ms4WfI.+JPEE;Kk*H&:j(V7o#kCqdmdp8`<*&F("K>I(^
%Zh!\c'C"JLpZ1:W.Y'DF0WhGn)W*ZX5-(.DWol%L*T!5eLJM8-l,+<1q%#RLB=Ur<D6:(Q2Yc>.ZfZo970D!2*X^9R5nE<sX4dD/
%J*WJC%G+YT^@p.7^KJ(UEkJX4!B3]%#eCgcoouH9fi%eEi5'VmC"%<JX79;mju[j_[@;$n+KjK5Q7+Y\lZR;.[SpMGN=-ui2MSZm
%5HK!^SQO)H9:m>+1k+".1jK1=5b[!m\%p4oD&iCJCG37sA]7G_]cn2YhgIYf]\)lfF=eTJG]chI3)(2F'V,%&lMM=!?@-j"RF>(6
%f&O%S%+O#)r_^&NrdM'<5kXL:Ej]-.o$QZE:Lk&ZUOBk&Rs\ptqg.uML4=;\m:Z+X>gC3HF6iu<Npka,0[b+7TVKN`o#K%OA0^aD
%PGn8:Kl7r.J?nWNSo%9oF001Y_a_9.F`[!j,aO4]4brWgr<;Y2`QY/s5RQBr.Nc2"_qSt-:Yss/YFfu%<MOa[b*=mr?6<1UFr$P%
%2g:mCZ.0Nf?r.PFPefIcY-3?/GX)RG9<*MCYAVZ)I^4%`c?Ag6m<cJ<6\)8l:$sR`T?kd.M9%KM![:qjh)tdNUjkKh]X*#KUK7Q+
%\i":T4GXN+r/U)cp9"16mG4>\..;HabC"C^*c3a5'NV!"o$YHppMY?CT:W3s2KG*6G28KL%M)W%pYWW:XLD;Gep!`LQo2F2HI2f*
%H2+69l17o_hEA*Hp)e0YW:I1kFoFeqDC_oN*d/H[rJs.`AE6h#UZRo@VkXLk=mnjUCo219p(4mujfs\%:Z;m\CThLASm4MlkPH+O
%q?2rWk8%*Em:S_$FA7$l5kmLgC_?]hN--OYUV;QE8'R[P<pSS$BIk:<L&?8o<rI"7Hb\/-j%]aT2Ofugj7WC&7$=r$mVV[lcdJ/8
%bC4#DV=A$^@J-]MQFjE(cE.PAdW8=M[>Op'n>^r)IU?u?Cle!i!,;:>E.8+u^t7C7s*4,9JMr??\J->s5ECS\@6IaHTZZ:bEB">!
%dZ[:5Vde+,OXIoo&)Rf;Um5])nNOS@XAutS2/?tt>L2_"o%,DVnk!D9Q-+_$C[ZGt>Kt^pW%]4<jkG9dXh8QoXX.V4DdpkZd7kjQ
%Ij"%\>^CgGe%)LV2qc@=e*bE.Ku`oO1\.$-+!9q5Wtg5$2MO'Y^B'Am\@;2"E9Fm\puD/FH+gk5YdCk0lGlI^ElVNKnK6"^c+.`_
%IJ^>`ckTD@"[AMZK)=Bcj7_*n)7\Fu#a&bhkOiIpLVruJ?F-mtJ*66(@-$b%lKRHkBGtUAquLtankfOgL]/9LT",4HDJ-M/\2/Y!
%kT-61[c7/QbP.oYS$u_*%;pY9eIVP0ndN0*_+0RKkoBQHX;sJ2a4i#kD^[>BRVu3uC>SdUUZ2O*a`7:Dj1B0L*GMU@g\l=<LO$KB
%Rrdm#n#:hd-FNVFDm+Vd,&t=Nee)s^;>=O:5)BISha:LlqP1@\=$pZ]:JTJA+.q@ADTYX6_P`%J![,28ilCia>LTN=9/#.`AG@sl
%O]jNiYK^Hf-Bn;$\^>3Z7m1t-<1]]_YPT'HrN_9&fR7&i<t=CGkm#LaO^-JW*/#g1B]\>B#i<.6n(*K,lid$o[CL)UjE>lgK^HG$
%X*DIEjr9uEGH\9d4,E0;cd$uOPo'<3oO>e:Vn6_MEBe%Za24V7+.j>L"?,nKg9k^?7+6)bd?pL3qr"!?@r#Z?E-78g[:lUcq/"og
%G.VDE0Bi389Im@<]uHYQHG:lc]-_%dU!decl-m.:B9--Il>MXHMjlpA1'-\$4<O8"^QEF%2>7'+^Hg8Y2/"n2X_/FrOIsk-2FO*b
%G^+Q'*jkednQ82J+VhWmrGIj2_:d'JK#Y_&NJ5XS$\73fV5rlEIYn$uiXWP;Q=k?"DXuZAYH;u;o0i]Y@Va_bDa<aPT=%a[oXcfE
%Ku_)ll'P;1FE1ECk2+>N;M08&gpt,(l=A_P<qBO>3<m<Y]5.,X;59::*KK>S?Y[kL?[>fFhjt<"[TDmf@b+cT`NC<_4;IBa..i`%
%p*AlbY9\I-7g0AGjS.](eh[S_IIH.RH$aLm&GI9rQO@`m5%_VN=uh'.kr+4bm:LG,#fs`.^2n6V)TSQi$RDYs]EA_X%j7[L^8u-(
%Y$l1-*qUej&KGZSTE"G`Ot;muTVr]75Vhi,?FsrI%M%KBDniqXm$$/0g@;(n5H'24Z*sKUr*"U?@eGf;msOX_b%],O]uJdD05i"r
%g,BCGYkW8]7/u9Rf^Rj&AZHc`T-27X%r9)Y%tE)94:d#A\#X/JW,!.OnG8p9q0"Bg\o-E.4fTSmnK4fikFXj+j.?i#:m2suCp#\j
%*E)%,.OS.4H#b`Yk]Dj:pD+gPfg"a7N.@%<WS-Zkr[LA0ZTDN\`YQseK7j,nQ([g.Fg\jBml^R<nO!h&1THK&Ip1saf=ge<pFk^M
%N8V3!b0s7,EQ?.0'GoPg6hYUj%[WO=A+ea)<I0!^_jo"H2#0!g's:YpgR)[K*TYqXkCDOZ?')QTkMoniVS02"]X9h2n>.LJ5;k4k
%e+XMf:."gSHgn*mDclO1?_%o?W<09grRIJ8K?j&elJh5iC*d"fB7'A6S;lmh>Y_j=qUkp1dB<QgX1DZkI.</Ef:uV<,+'4rRm4\=
%g7KFphY2Lr`EdBZ\D(hqrD)D=LZ>k:4\NCCl@4lPDLVH@Ls8E\o;.F*k=6'[NW")cWkP!qn(?LnRfu[A0:K0'5SeUt]FV*Xo<GR-
%RiGGQqf&Nb!hHNQ8!TYAn3R!D7I/&?B[ChI^/k3S%eE^B4Q=*.><-t.s3fT6>sPm3+]89UK2+(8,CEEO?9;8hYBOdN08KX8nE0?0
%k1kl0_R4[fENrjN_1VtTc=o\%3bm0sgM'&c1-*bT7g]pU%`Hed),i_r@X\n`3qNn/m5$8Pf(U8EQ/7^/YFFG4^'*4*TBjgA*I?`H
%ArV<;qJ^lSfiGcViU%[udr%5"&I@R``cI1F@`j2lki$U1c6'7Frc4d4V'u;Nd!3*_@eVH*@P@*W)uG\gTrGNqcL.KH)kZPo8+3EK
%@r0J)dk?3Qll>JT36M9qnMoZL1:F><7oS1k9l=!N+_(dbf:1['jQZ>TpKYRcqZCG,GBuceesYYtGM6+%1hI1S>Jnkcp)\.m^*9F/
%X"Cf1fDGU3klGBL3k[Yh4Gp=hO4T[6U(a`qkNSZ4kKIhHl@^h@`Z_NE*ZX)7$Y.AkW!oiO3QPt($p(:>)%h7K\m+QsRoU8S<[U5F
%0?9@/;1&9,ORb,08PTX`Yu<V;k`XltMfX:'^+QcSHUFNt2m.ulT;]EqQ^ZdA3ZrjFDY:RpmE%Y<H7)eG26<99EYjo[05Yt2HuIXY
%2>b)7(?>4/0U+]Mr['^3j-t6"B0KT!f(J3Yb^(e$R>b=_K@\u=#$!sZ6*;J_iH;oiaTj[bk@2G8YHCO2b21O@1i!!G5qrE%l?D%:
%d=8mA3oqup%cEqLjf:PREt%>=!j#%ij*&OUFHs)M,gaHW5E=L3d]iD&]si;6ddVO-cVa6G;c$)g+b(JeE+^PYPY5qMdP1YAl?a0R
%s4KUiSTXI;^K5/#:QT!uUIVF]YLMh$H_gf@==g0+]R_,C[l!BVU&B/6,A..d9&5fIpF"9K_2PX8H8*J1I/fQ9?LQDjcYD7&p?_Xn
%5!6laqhO24FbZaah?hLj040m[='5=t60G>:Sph-6`n4mp-o.iG^f6-I:,*R[8f#DEd2KE:NmCMqHEBqdSD@P&C?](t:n3qNE=!/I
%b.\C<=XdI>]Y2UL]ZOPF:[Pi]MpLOif*Vt@fA<%,$B&rtA1%P3^GsieQ`$^,SH*^+OKWp!A\ZjS59BGmgG@rXfm,GV]f\/bF!\WS
%`"d>O2sPhb)UD*&auPV1@5dX6jJ%.r#:CJBjC)?j@eJH.Y=i6Y\h6;7dPo2J_d>sV^;+1I];F6q[dka/m5I8gWGlmu`<L4#Wmo77
%pqLc?f-RAE_fNY3nFl5/b&3sM<;$Rq^"-klok/Vjc$P#U-`O]C]mW`?Mc.Sq008sKe?cp^Sh;^XO6V^0kJW=o+RNF^_S7;fX<4*p
%c=*VV3'Il''Obc;(Wq5t<_!O!HX+&`i\%Esi43+-(TsKoFjZ+6`n+omV'(Xf2O/bShIl,=2YMV"D,+i4m!NNB-`So0jfAQ3hlbS)
%.VnEiW3$uHpC5[Ce,4H`hfr^&IXd_lWgo(;mIJ-8-?AbiFSo6YI7_nLpM=$Zj41JIhkXR4nZVE9\8[5TNUB?"6ZG7qlm:-A5>nlI
%I[^$UT+6AND52'BLeMm\Jrc<r%5Nb!T4ssQIgN(4NIcED/jh.>2N@iF53A-*`8e7f.,f<//2<jk34q#MZLs.U7S+5[^C&^D?jf9B
%O*Hp7QA8k.Hs9AD,XH,UQBNRf8l:tAP;J:lIN84Z0b$cQ'U4%&54$=p=8%5&iH:hkCs"*/(8XT#%LgoO%\g7gN%+Q<YOF<93"4!E
%O(NqP@G)n!i76IfH8\0Des`n2-G]44!\d_2:=?G)@uS@ElmtP%MH1/*`,:4;CcoUmBj=Db3%11?6urs0Mg.$mR$N\*nKCM%A5#"D
%IC\=dfN>'>>Kfu_TT):p.Vq(MZkA)t,saNuJ\8_P<To-W]4r%KEgh<E/[*7&&>PtMf6FUUa@>8F:%7QbOS)r1&E!g\N6>"A;eG"o
%KK^0]$m9%0]^IVpHqOGfTOcCYVP.(!RNO1PSg=YfR3BpFVLlcY@ui3f5%Y@j643c@O^T=4Dq78f5'Y)A-q,Fu>+&!=783Y:ALW-N
%KB'5X90&0b6Z6E"QbnR7-@gQfWu2SP;2l7J`LKfL;T%gD6`l/E5RCW#5_otj96iH?MJO/LFg#95GgELa)SaLckKtm4L9S]laq7sr
%,iWj+"t[Wh1^$AE.^)U+\E9bb"TM>]([t#0PaC6m6JdbBKIf]>iK7b`XpM9[24Oh6"XYgT.Ik77GgcY[NklTop_*d&?e?HL_3tQg
%_;P@sH-m$s0t%-ehTh%Q-Y8o[j/dfP"?*+lKo.ft'U8tTSRWS6":qr):Fo*-MB?5qKKtkX9N[4^]NQtN@>$B3@]*)%\&sFhn!`<d
%9ehXKa)nOlEg<?ERjq?CFidrel?`S8PZhCaaWg.D.01n:/I;m,Omj8t/.FZE:7,,f$n)+n=OG`)C/G\36P:rsJ26T&cTr>B]ZE&`
%J;aS''_3;g#6khCB72GmW$5Vf6<IV;7Y+qb-_$fe_)./5@!V"6'aUL]9<sdkO(#:fYm=aRb[k:C9,#,Mlp21X5Xoo=:cZHlQ\$%f
%Yu\;/!!"?4Q\*:f#m9TP+8ZnM$h[t6h,9ip`Oi@<Fc6+t0,5d;+TSaYI;G"tnhtRp&RNfIEG<Gs^k`7!,V)EBLU*4.6mhTe;F5sR
%aC9D*#1rq,Q`ZA%19[bql@eQbOm]*BVa1:aaP3HN7I26U$<R@bgl=s^Lb`pW5SVjI[h7a<PmeOk&-nFF8]7[dAI/h!;GDC2b3PmL
%Ja.u=jaFnV-9M+ilUAe2!ap>MW6Pd(]snagj+W!pfH/sP.,iFS9'+*)TP?4U/Ja@O!RsJSraeSC`uJZC!hBaE"frYs8+r1+^LC#A
%/qJ@G(=kaX!G04W!?$KVRlLKDN0'A]L;jk!5XZ5W[`-FKP<]@frBP7:#MfdlaaK,%jC\N)C5NtGVMLH;o@9m^JKO*lnnq@aDP>jO
%N'5"\#o3\X_FnQjmW#HX:^g,re.6f::e3baP<+en@<"!/R!]1_PR;9F*W]D/&a2fT-3@/*#])>*WPPYu65(&(/eA29#F,f[-XIH]
%Lnf_n02cAr.4KP"q=1=gciIN+pLY+#B$UKc@pl%lfG;CX-37Sb+m-VQUJVB(P^:;4XH/M7Jockbe$m3]Z&i"11G:Ke9?MpHOJEE6
%"J(>UOMXeN`KmtHH_K5kcCH))_IA:QMd+7/W5btkE5N(*J=O+l-((ZN)_<,aUX;E2#Z`Sg8/4B.;iu"oRHs$K3s$T]agTtt*t]rU
%KsQm8gL?1?+L<Al8_>2BX=jVd8j^U'C^5Io6FfFDLl&9['s^M!DNpd5,c*]_/!s2N>u(6O9e?DN-4m&IdQXN=;$2UmU1m@27AT4]
%M)c^X7:\R_2_lPq<D,;ri[7gX:XW5;5\`j<_2H+!Z$/Q-@j65Q4sB.1b4Is`GY+i08e//d46_Fq,6Y9'nc3jKCRAT5RS4?q6Kr^Z
%\LCE)@C6A_1a2_Ze,\0`P*`CV-miu(Y`+qga<O$+0j,LmkCc+E:]t*1[L(fEGc$te2jd@UCY8G8L`L[Ch?@ah%$<OsSf:F!DTN?E
%hiV7<lr3iOH(-YJ%0F3[g(tVP`Wcgd@q2"4Ld],^eRknE/tE17pO/2>8qFh\8KD:.&2$SlCPso7$PjF'Ubr]s+Oo<YDEQcON1u!'
%LkVNH5*.<@E[B?\T_;3'0^p=p<?MB>[4(QiSZpPa3"BNU/BAn=*17`_TLcFEk_I')MG'(C;4un]FtrHA\"Ut:R%FtIgQM+/Q?aRb
%2];0N#!>%M"[Wh7;aUoJ.;u?oeN7>V9Z`Kp=I"D\IZGul*YC>N@X+Y)CKZPa8Kd&E9[>mSaWi(]!13m'"5Hf31&VYg,QS@\.RhBg
%3<BCW#na]J8g.,A><kseX\60s]GMQ'`KkZJ08pXe(UFfd(+W^mR(^Z^mNElSJ-T8&YqhM_-X>qepN.b/4:Gr3:_sJH1Vi"G%5`^6
%ngNX.da6s3a;c6teVgi&np<nK-"S?hA7clCZd2jL7E9t\9eg"3XTt)OKg+[E!dP5;-&;\&+G'TW9"a:Kn@7_(9Va(FaT\UdEG\E:
%NQ%Z!6W"i?(mk:0d&`AA3T4P_Y$9QaVQ4a%8!01^#+6%\Lr]YEDa^$ZQiS@%)1fH9HB&>#5nk*[M&[cQ!BK$^&4qED&S53d1nZ!X
%?ED1Q*ZBHt_EppCS5;*%/I=TE\L8bZc=aOXk^dZk.<enr:rn(Z5+*-(2>KN!or2Y;+s_+cp/rd#\H2cHag30$K:G9s(*SDp5$$?o
%E](6PPi;@-oJi#oO:0,k^.g(qB3Uq>"q(^pX)84<7bg3aqL>CfUSa??P9kr"Q!;q5.)kTtTRH6-@n8VYjsd_dgp;PC;">6B";*Ig
%md*lm!c*[aIOVI0GqhZb^^P;gE_KbY]Mp'YOc!(37<&aI6YM5,b:.U>EMX%;;OE:T<AF!1WZN$=U81Lm8P1#EU)Fq=KT06,oR7"(
%I,<L'-4R$Y#FR-N7#U#84NfCA.mhU>.)?*--hrqbc6QC7$WH36X5eUoF,VOZWLr;QBS=eGOHRL<O:$\E-_AtH'HSFV@2!"[L?KO(
%(\H7j&5mdEUhjf,fpnp0-$'.e)\pP*.M)Y1'%@$mb_HHor<1<.o%&,d#$)Bt_$Dn!&[G!#9Hss*Ql-o),QjQf&n5A@#Q_F5"jb;Z
%UQh&KZC!A@7[,F?8<DG81+e7=;_f(]0spRlY@A5R"&fU90J)O2;e,D"Lk`+rqZ29dLl68/#+SBk3t8V)1eA:8&djkj2Is*K`GP!q
%j"Y(nWH#4),oE).I%%",S9"j!&OcQeZ!Yj#nOqrM8G^?S8&ja.)$ADsfb0pO+a>_92C0gWgclH@<1Ei&hK^QiLh8Y9^t0CO7nfo2
%P:]QR9T0Rg:V"[YSE@/.k)J#S+bKP(h*Bbml!a_T=dco3;?rRa</()ISDcZWqO+VDMM`j<.<9B$oM=">7[;V.)14]gPWR!FBS0dc
%5S/b(jDc5O0Pe10J9Xm)@RnI[U)QH,n:gXI<NmkkIdCQCq0WK5QUUEHH;Vq+9Op83[,Vg,Yf2,Q@OF#Ib%"=m@29P)BKF)TOmAK7
%Ij>jA+s9-%0EI?OQu*Y^YX]>[.;H_$+?t*eT6_W!92n80L@IYe!].,qns;%LZLp`t[=O+\OXnV`KRi'Y!87kF3YBS4n.o\f>[[(8
%&]%</$\+-bST#EUH&L80(d]"k?a1;T".bd9^((bq.\]6`UQ\m<]=o?6_LW`-!an>D;=mtjLE7a"OD`asOU1d:G:)Y;><fraN$9^F
%\W&ob!!F/VQq:$j`O$Cg=3q62-.G7jY][k6@uK!Z4p<8%H,,D#VO6i5eZ=Q9'$%q40Wo)b)5DOK9Mr-/c-k7%D@7osr@+"U601(5
%m/<.OIg0<9HKAUI#[uPeSkcs"mhtt6Pj-W/BA'4u*ghD,lB'4U!,4iqiR%e.H!0FdOVC8a(,6QhT*;>&bR)]T-lt6Jnkc)DE@duE
%\J*mP;<3f6_5AG1#3c`(We=RhI`7<,Q;dFm"N"GpnIho'#Y:.U?1K(6h#u_C.SF4Z%=f9Y)l+Z0$OU_SdMKna""q=k@&,R1!`l-!
%i3XUdGU[?&<#Bs-!g0^%;Fa8-,pVuB=OFF'BS70R.434<!ZFV,&>_[/.>-"!+Gr<O#mOS1m;"g'#f$G8BZQ:a+kOoENQ@*b"JTo<
%5"<I[dFW)4<\T-<!@K'Q0#Wp>K@CtZr1^*BU4"#A$gF:77a#,UPdW,IRK4,#Q@ch>M,!R`"MLagJ=NkF?PKCTr&5=u8b#GA&9JqN
%WJkqS"p4;p9_BEF-=^?0]cNO"R$*KB$d*-*Th10LpNr-]BR5Cs!qh]lk('66_@d`_?j,jb`er#.&.^RQ;bBooH\q*Ob0Hi@V=(CG
%lq5dlkpc)$FTk,Fj#1EPb^pn-;d,+0"Rjg.Q-`&BOBME(FG!)7SqqIr\g;)n!X_UB6PGXp:6F1CPbQ)[2E1DQKn5DR./U#)%8<M_
%/@Mp+5W0nbU5-[E'apM`$<%#\nS$q9V#^hL6R_L4:&:)L`pZ5WLB%n,)N;97aM6qCS2"I.6U'VU<7NshSe[M';$sgQOu/&o@R?tt
%('[qV-;%=H,+5</Ue!Q&ig!fsh*U5NUTmop$2!/P6j$6+Pt2k$K2TC:mKqUFp*&.#W.<9PO[bQ\.-Ju(iaLF?23a/!:p[6WN=g/k
%d;7.5.<1k[:CnM_MjSEUoEW?l&^j`-&slKo2!%AlKYWos:!bH;NWM7%JTE:=$Sf0;0+kW4$1i\1ckjd*WO8*]B*jPVRKY%oVhR*'
%g<3AL_*e`^L2sgpm`*`;;i"J:..lTWQ9N&OQ34Ju1_m-NDi0iDdaiq\7=%m'O[.SC$C`b0`fq$<(\BW3C.m'<3)7e\<96&J-m>_^
%HnrB+kcbZ$-1VF:UPb*E>D#]ZT'Tt6<V6fI*X+TNYYmi8+>*!5UVG;QQcSA>WaT+e+_@,Wg]oK&'[r`S?t/'!M:h!N3"&(C>bdB%
%9;mkBaj?nYP?^_bJJuci=<1P_:,Lr8p8t5&;KCU3bDap@41;CgX;]'+D?UXV)N;a5LqR'=2ukSUB^abW*Q9l4;O$f`WZ8"le=r%,
%j(INI0uqW:(?8``ntO%;;W8Z04AmfZ<&dEr:-C>2A=K1qBujAan1JE1]aU3K2()N=I6Tn1#7o=@%#cGLU^_>rHT!/D&/;4f*%*r7
%*l^DP&l(9joH07f/*V80.CYBnZDg+Z@o0:\@05N@+E'I"F[:kmS1#Rk%-TAUe^d(16n6Z_&.bS6`<\l(,`jp2RYSqH"n`R;^:ri/
%>fhL5LCb*Z!XBY[(7NN8NN)ura)A]-T/MZg('5"eA#V0/b*#T^))I'<ZtT/*k\H`:2k\c]18PI@.0-!k39prf5]\9p-4;\0S/bLT
%JbHln$m6+f3#RjG<ra.]\"h#Ck6PpNkQI&(=_p@t3@bl&'"X8RhmKIYo%e:51^ufq`bL%Rd?'Ak?sOTm1h1Nrcci.jA1<lL635Ts
%6lKdXaNp+aVi"!TSV12A*)0%8>qqtW-rT]*L^uTJm1K/\c"RGQi,LC]8Z+Z$&Q."41^.!R2I9b;cj;BAKtn=U:rL-uL=;A(N$<.:
%C;CqpE<[cb@dS/%:*R!#(p_.-i"_@5;pk[o>sX-P'=?^r1Q2?N1$OVqkr(Ws'VbtNXKoK"$^/0KS/c5DAG]'=Ame@8EM(.S$j?(1
%5:K$tWRF&8Iq\``Z*n-f95.+ESh'Xc^iP*tq;mo^g>%[(n'%JfOM#*R8*6hUWJ_?bRM#sA!\L7!GnK>ej->Ht=u-`^#cQ/ufQm+J
%5UHt5!Rq;c81]aA&`)td(;Mnc8Oa/@!T7dm1XPh#fa.%tm!ArK-3:n6OL(0q8B\[gl3,W26a1e\2"WHKQ=3Yr6#h>R"51%W>>_-G
%R@'L.M,iLJgFL1+kYb4?kbfh)q15Or9qE8P&;nq/%AW_a7=n'Q-<.0>2mF8623<7DV0/Bd>tg#;R=sR>hDTdL'Xs8k4TPkG]sEr$
%,*^I\Ff*\aAR(P^+J)bnRL=H4l1ZbuL/)ma7tT!+Pp6VWU_kpQH%n%c0h'DF*/gC#"V$>APaBAY@2Oma/)LcRm"%mM^bnRfjQgRE
%PY-)MlFO8U7R-ZUq2A7'Wm)\XP1G=Qesu.1;IgXQ7VO/H6_nH/5j=*5DV>DeD[[RIANU)0]U2op@NiGLd.Lr]ZpR-m5TtR3EQgC&
%LhH@f;l05fh9f20.!B&pW2%1%[*f,R=7kg:G<&S]_2d%,BZ0>!IWE6.6gbZbN<Q8&=N;!'5QTkaM5XAR'JXr>9rEdW+fI^@k)s&(
%6l+2.\c%(B7A$8nXr=(,+dQm@$&r<M`1[l:4Gii/KSIlhk=&Dl&o:Db0WaJr854^R(+9rbUUkWHqop*igg2%6,N^u3W:AN8qTQV[
%]`;?c^#LCQe3TD2HkLjMaahHr-);b4[)GMn;94eP%YdHO",bkXVP?RrHbOgee,34#-8J[)'Mk+t$+RLE;S(pX>/MDViE'?].u4**
%.qBn67-gM(2cdbQb`-Xa8rhk$1>b`'%EaJE^.DHeeU<)s#Psib`+33m9,(PeQ9#Lo#qa.s`h$1%5:*G*aUhZ'/Br]^#'@icE*kAl
%8n,mFk_p9$8`@*XAdu<Q)M&ZSoaKA[;+aJ3_[75WBiO"%-^q8J87O\a0ks21/eVunN_E6f0S=R4p"OO;gqrtLD_T/6L,Pf',<6q;
%du$P;*ZZE06@@1YX->>.PRBMEr'_hK)jNn:S;oe.WgS%O=>9F^;8EP^ckW2kVue.M"o0c&6Xh=&Oh/O4C9Y-;,Zc_\pk]o[ku`m4
%[qF=n5u1&^J4P3/V3!Sc\g#+OcH'7V6i_]LdI%AcRb"j!(B0c6d3WC`3gCF53[k2A59M3RO(32t1)@YJ*s1,:P%n60%L*k,4q+6=
%jt0_!.fifc6Z,%m@Z_mo$I;1.r_alLpb78ZH2G?U*>4-]&W7U).-cp-f-mN#R"@T'?=u`48mjCZjtl!*8m*PHh:N'gTO;'"ImkPp
%A)GlD!sW7#Hkjs3XgFDF[_U<V%gET'`@bdlgd+me&m@rl=]>bVpUa!VY,loK6t0-<;36P1LaFTTRBk`u97&+lU$s6t&ug1Bq[M6P
%\:fu(N49X=X=Fu@QI#rLSZ'_>_UuV"!qXs8X3^V\11d^#MC%o!1(;fe)UUPolgJhh$nmPjK42lXHjrW>"@H%IiNNWj+gesVfEQ2W
%&i#o4Je$=mpa0$<U/t$D$=f!uIDfnHfZWC;/sE6=%)M1=NT`F`/dN_eP(B-(8JQj\77I\'K11'EiNT#Sp)3X9h_BM:J=o"jrdZ_S
%';HX1Y!=Y==ud'^9gdu3)/5no8ea&!FHM5WXYrI5g(G:.GtY5U^n=oqNk,fBU'?Qm@]5]kN9+KNJXAKHZ--#HO4Y6XOqPND)/GX*
%-C<(=MP8]e#Xf*p>k=85P@;\.7Z:2nL6S?nEWT1^PE7oFRA.<=^Tc$t7V$2sGkBWc*aNgn!uT/T-lXO+n.JnWC%N..M30N'0$mXQ
%Nf,/-g)Ds[+Y!gkNH>OF8G<6463r-ar-BP'&Fq)G'!:V2c\J1<7;N/?O#6,Hhi/`d^3XDU4cNrtQDaP8@l.:^d;_K>5s65Pc$3'D
%98j]d:L'o[HeSG;M7Taq7%BKFP\m;OHKQL9>QD)5n)j/bRW">n.YuIt7H4kpX+neiK.2!Y3F,0W%X(+)L+9N-U8R2(BF"lVc7"D[
%H%_jQ\4`*e9HLYcXB1*fHB`9B!GfWVLa/YS)>G.B!2jMT-M)EWZuaZrDQ#B_+=b;GlS9Rg"\-JZ!,O*`0gIShAI#$!368m57^6N_
%:t)e0.)he<7M-Gk0Jj?anVb03,=4WdGZu#bYRIaD/=qNZd<d&1^-F55^9hfl6]WYJB<@/_b'G=X`'k4SQQ*044qiup$ecZ?/X4."
%nEGd>2FpC5XThgm)=eq(1)<!L4IXXRAVhUq$,H6*]h'hkBS[Dh&\S@,:o%YQA/oeO$t31i6oIK.<oO]pZu'Q>"U(MS"4&4o;.N0g
%p7Ql#QdG.,&]-6/1?1msJll2"o)83=M@FF"O?+8^06/@5)DOrg+`hsCqbG*.61X:k<TQDT-A=s-b'7am.uE/H6'Vb)c@j6W%74Kj
%0FE1BOatMHH3&'5Fr8XtbKsDi`;j_/c,UaV,Ja?ggPom9V7k_5=&GT<?GKi=?QuVhoYi'^D3$+J8)l<WjeViCm>.IglXO](OerYO
%qA>hUPZ3YQfaN7-@_n`=>t4cK!%OftcbpLb%25^QKt1p7:4Z+$+:W]okoLQP0p=q@."fRgY,jrc?;T)fD2g'l&<J5,NOm@G0OGim
%(<S2J3cr3j2U4YR;MO-6&fo6@-q72k&i^S=RompH1abi\2JI;-7>43HaMK6(nt"r0LBPaAHS-qeC>9uge,c\j*d%]!Ip,>oNQbPF
%Ju9NU95)]5"n38edFT]7cKm?0;G?(ZINjq]MOfKrRDV6YLf7K92,#cu/X5V;3[6sVT*_=qL1j"A*^MD2!2_3me4lgY^^Z_^Bgpg"
%Q4!$iZ4NHg"4)0P,OHB0Ek`S=iRf!c/kIj6qk/rp+4<QZrT(7*,KWO!\T;KI[V@7RXuqQ4oMg2V@h1Zo1UP>e9S0(FS,l^=VmA&2
%n3R0oELY.HI$(^]7#"#%;&U0?!9[&i+#dKH+F(I,5m*?*;*n$2\3%P1_+,M.ML^49*AnnE7Z(Z.O_claZOinFO_bJ0e53hIN'J$)
%J5:*_F/0XVXi\[5^X2<TekO%CUhV7%`2P#c=\+)iBu^m9:<-2J[:c3S\;O3OG9T?Ce-E>H/&AeZ3D6U%:][Ie5B-=+-Mf$=9o4GZ
%N%g)6]7Uli8<_CKoeW8d,dd-@d0LX5?+q/-Y;X@*<hb!D:"*H@QWlid%n,nfeGQ.GPetZ/aFQ;W/qjUpkg;'rP&a8QEFnR$%l-mQ
%3R(2BDoJ(0)9l%eN1^qR?UUp9oQEH]i%juZqGcqfXX2cPA_A?C@VUL<i\Yhh7cRgGonL"E<l;\?-BU9=MLZ3_K2%`5Uu@.LNj/s@
%[81S4XN<$XVj:,SO;0$dEba6#-.g%U.=Fg[==,rh)'`"8:CJV8mPKkm/TC?6;[?#=?^G5YKk7ku*[ZXta@JMi9R]nQXt`\7@\q1j
%[#^#^__=42KU@-275\\<Uu3b\C<Wo4mOP9H<cSUN,$B&).u(8],ls2dJMOLXk]'dD6=1q],SnS&KuA.k9;=j*A\8Z;Oas^t6"t)B
%c36rfX\H^<9IE:f:-hu@K1HUZO_D7U-\:J\j!@)S;%1],JLh5T0sK.fl=Yt4R;""7WRNa<1RfnV`#fG/nJOjcCX/p%:qe9aq%@4/
%eL-kDld/?YHIfS>VGbc?=t$('3m-<$Kck7kP&q\@dkH;($oNU[k=u]FMU8QBW>mCK0Ef3q(LH@eN2XOIVa-cA[R*\gct#=,.1Vk3
%+<c#>b>6(i/@2#m+N[eu8^\H.-;n0amm>]+#t>A'?^G>e<#*EC7hRQu=LH%.VAh9_'^]S[XIgaN8#r%QkW./N2kYkaN@7h@S^@Vf
%X$K6S#KK*c^QGF.*+If!6V2'5=_!.G4$itI<\kl_*_Y`I-SPrH+D":P>U14i'.GC8j=cZq.T+(,iF<S'fWt3VA>q8IZ#*<dVp<R!
%+=jao$>MDHLuD)4BU$q`8in'4CY<0+(,58H&ZpQ4_=Aealbr(u:f.sXfZF)s`-Wp<"e0%q<obIT)$18_4"HTb!fk44VRDXa>gAof
%\!k\64rH,8#\&)&\kj7e#Z\?i<&UN<83Us[b3`Y5Ko$&qoas?)oXDE5.`UXc*&"&rTKpLl`clmW+NP466]pI)Xp_"+m6G5+&2)4J
%%%.q\JSZfF91i`hTdqOK1f5Q#l(ejD1D1?8f?qiCP[e\EB<,,KDUe>p.D.au8<VF1V':N<Q`tn_V,#&V:)8GqEQJQ!oSl^_@PfK=
%A9H"2bh#Yq*i[skK&J!WPn$)SE&E*E7cD/+!p-?-IK.H<+RVm[EHFK>9"csa1;Vb1Zg0)q7^OuV_Fcf`</Ze!)u?F3NYSI`FMnbp
%;8:8)"M3$#.u=]Vm2(p6+G$:[,pXI#W!P$aN:&Ka-9C[M#*CR;Q]&^I;`A9FR_6[o8?Oi37cL<8BagY-.+/fcWUVu@+b!u`_AS?L
%?o*WI"*-rD!NeS;fLHQef#QcCNm=f.-E`Q"d8"HL]$Qm=&YS;\BEe&5+c?sH(/Tr+`LXqAJpGJ5LmEVY?4B<MMBp>Bd7@C2</YW7
%k[9Q%hFNWcdLek?aYY:N:&51P$u(+;7/Z9b`T%nL)(TeE.]8BhG9_+dU8pn20K,[/)68uRY;1n_UcN0eSYsf4<O'pYa!5*bH!H(F
%lTj?,i6n5A-M`k6:bqMc8Vf!X:kD+^9/1N:Rc+?+9P^'Z6nbYij-*4d<C#J_^,^atb8ZB1@)('46$!W$PnFnU3!2aWMkiFhkD?Ut
%H.aD#65%o3P4KmfR=VP7aI.^#Mhlm86Bb4_\5'B(:i;NI(CKLAY07/3?d^PDI7XU4VK8epJNgIW$.oQ`\Or$,.*!u;H,.0_o"7Hs
%JiY!hGTCHZUWq'BLo@re)6Flb,$C#M]FtUN[Vf/%E$1gb8:=H6`MUX8J/E98,Xp'lK$lWja"m>3cmBH?(8Pl&U-cjWP[:8s9?k-r
%`cpIDa2M["KPkSg1P\FmJjT,L1Er8YG=L$*8R$R'8`f&m9LpKr7"L)dj$k&n'!<9S#,d#Sf0@g05^F(I.p8SQ?OU#4AgWfOO!bnQ
%G>l7&g38dtB+S,gkJ(P[nEEuN!Cqkn8fW,VAKWT;"mUq+]S9jb8WjsX@[Eb2'X+Gl[C+hN:M<-g-(m.1d@FL5RZn@I1%&cLW4:_%
%$UG#jA<4ace"lGkcQFQSJ98efK:0Tbd@<0gr*[N2)`4sLC<3](ba:8NbN;F;P`lk-3NAuRPX.RmP*aTO,AK@PP6j&X8^uk/J8!W-
%&ptEIFWaC?O<qmp,#XK+`784(%ZFA.$,e&@a*]SI*0QR8%A!h*FE*5.2Qt(pGSGcUdnj)p#\CT&`'?X+1W4H_/KC6goT7)n6RHo%
%'I..Nke3c:aH5c;D<TG[,GI(`,WsIhl-;,BfVAPa^u_MS/(,1]M(pi":r-TPBP>&S^eV7haM#a[>[#\fpOl$5n2),b`KDAse;fB\
%i]O&^(T"-@jATYEWolllEQXCh^5i<6.+Tf*!XHGA@gXXhW[bt4;$'3]j_lp87-/(D#rt24&g&ObctfXr9.I<7/j@:k;#Lu35,:?#
%HSnaifs%-^kk6o2,F;rudr@".`F?ECbY#u,ANZLX!%2A1>DGDj0mMn+-9n;W>`=t)(>4OQ1%eDO.iF&+ZMumG.OfI-7'\jea.omg
%U3R\#[]1Fk@e&(V+^B,Y:gmt173I`#3Qj5f3+a;+KOTX9(S2etWinm6:%N<IRb;L.%%>TuBbiKkJ<i7^ghK9W:%`Vu;$Df&C";E?
%oce!9('C*r-^8gh/Rt^rS[ZI!$3R*t+joe<2\9u!n^Ut(%(sf='%("BQ&<e7PGekDX%52['*Jtd\r]jdiDKBUfL>AMPCtBii6h4e
%8:FLUW%?Y!no6'._!!phR1WX@broNiTimHbA?@57Md9T0X-]4%Z8dnY^_SYZdZ[e4=VOB2U\1]Z?a>o2@cLFGRAA*[N'Mut6<1$S
%erH,27#@6ldtl)g;m-U^XA\]nMSKop)Y6MpklG)=%DKH[-dk3t_]q12MO:T7_VcBuR\J]#Mo$kQ"Y#\!5Da#<Ji"=$,\N<sAnA'I
%3Q5#/-?ICb5oCi2<fL5sR?/:"4F0QUQ$`c_0Z=J"#!g0uPgDoT%`afX"`Gu&2^;s)VLa9i-mke[676tSCSOI_;0&C0L^GJ0AR^I8
%Bst$Jd$c>25geH,3!6mZ_Z2bP<gbJ8XZFu,HC#Wm](il[.<\#.99&Y3lmcY(M8`Y2,#'Qq(a9eO<0e;YkuFcq7m2\E=(5RLi@,)2
%U3.i`DUM5Cd=C9+D_,PT9T2h!1.Y6.:.)2''Tb[YeT7'H98fNVL=6ke#s&ubBgUDobqWTnj2Ic86R%\\1)a&%OJEUpZ9=&BA,]gP
%A8/,B,k5sXVqp5<q6#"BbLQhk(;">pC4h\=*>_c",tp*UOrCkJLT"S#PUA?Dd>=c/;OE%9-W1:1%9L#9o<i2?L3Q*C2*H(:j:]p6
%*@FX$[u@3H3H;Z/0bg*^&g]/F@GDt-SiM3.UNOjE#)%i"b,8erU:m1]?1*61+AsEA&lE1@82UUt0fkbBQZQrH=7W^,aaXpbO)1VV
%6/O$4:\UB2k0YS*a(fSTeX?j,JqBiOQ],*[,jSS9Dm@26i]rMro,%NQE<6J:5>/]\oCQh?g9D%k<'M[_94bu32=C)E<W=>)K*Hf0
%Z,j0_&GDoYf%;Zs/*K(&LX@+TW9I6Y<*A"?%+%gT<%>e\5E[^>073+P.DG0.0^7OSib,)"7nu^Ma%g4sZggp@"jrth),sEZ6^L9f
%F5A0`5o7^aKKR.X1O07YHs\XM6.<h"3.l4-8K-e!L[)O4>TO1R:rRrNX-Ehd=j_1nTXM;MLcc?].81t'B%30K,>A^=eQa80I6*:7
%amh(/SC$cW=O%E;JL-UsK<K/>@M;H=WB1[r.M]l"]VLW(=NF=bP;dlXhpl=6iuIiH>KQg0P^kXu3BgoBG0ZYYk8fMFl\Q7uicW(#
%<dhB]Wp2qA9]d.'R2AY1-<A1g1L^pgWRsaXY8F!65a@9tEP7E/>lfX(eT!R=kM4N.TLX:#I;rcV7u!(]jZfq<=+hROUB^N&SBRpu
%A5\M<TUqsS1#OBXpN#4<(X6dUGj/UtP<s@i,t\hrLlP;IO1&rJ.\[/76LeT].4d.*(6[5pH%&=sAai'brl_i29`:H76ctlDHC%qS
%oL@#g4.:gOGeW7-HV=ML-*^3GPST`j'>GfD;X@4dO@A5)2l@i/o0N!o8hUd>+D3OXX"MG^1%%)6r"M;Tim!RP?/m\3,s!\i4K`h)
%btb1%0GdY#]"ePqaCZ-J$r`\Z^QOMS;5A`94(QFm8T-`823mB&`Areh+O`,Y_MC+un5qHM8FrfKd')_)qJON5(tpZgZDit1H+'E<
%i5?9ZXdj<n"#2*hF\SuZr_EVG'-_ZVK*K2t8&h\==!L;B_OAU?-!c@=.aSdT,j.d\;2^_7-?:eq0Hq10S0nE#PLh)#57sq3\$Tgq
%EX%r8V\+dO:jGnd_#^nr8YVfH@)SKXf#Ul#6ZKc,`!K/$a65O4^mLk78<tA=S.Z>KdNL%jLm04HC!f].'XraljklVp@]3clf0D-t
%`=)`H^9$M1q3n!-VmnDd00?e]\HsMCUIUL?:Qo'4VGT)-al*46Yf+aR6^<iMkR%bnB%j#`:j=YT*$4#^VQ!\=B,J15B)&SuMS#ZL
%4Z8P&0KPrSJBCi.<gf@LGXH#\r5<(]7:W5q6Sa&NodFsaSVQF.++]1iMTR?qM`<'Fr':pCBcAnsJ4/O9Vup>"6pan4KFOY$ejI?p
%p5:YAFl5BH:*cPBQpkdHVuTAfR'_j:SFh?#.!<PA<0KZ(_$4quM*Od1I:DE:-OVX5\fC:6fsG5b<NE#;0-MN4,cA7$q9]C_P-O0/
%W6sZ)4D.NhUFku!Uc<T'1lM7M*Fb^T>f<$O-V*sAf0c"S`!%7g%E`[BRJNRO`)pZLqM7qnR>11Raaoo:_K?8$mB!2jmJ=3`8Zn1`
%D'6m_d/$KnX)8Rt*uZNq.-72@99GP2Z^`Qp_pX?@7W:iJftG9G40m<GPO-LjC1U`>c.?4EC&1`NNj"mdps^$?q3/'2^,eYF0jmY:
%d'N7&=lM>46T;#)E/jrkT+\"L2>+3;5SEXObN:(&@d&najYN]7:d>4R*_`1VAS1U4L(^.t':4n(.t;/"&P^\9&:$a/:*6BX,*nFK
%.>btqH]V4Am-A(M`+S5]8=B=M1c<qM'N.pr,`/:f(nIO.c&OQh\8tGOTfAgS=Mk!;kMi]$i>8IT2Bb;T8r>tr;!_Y\Y-5p(kj2Eb
%S=+B^Ho)a;jRFK*?XeeY*[giOASqTJ8!G6B=CthiL")pef@:;cgZi=6(24&CebT2%_[86u</U?ffSERd<'-$2oJC0qamm;I'PjM(
%<7GEe7&lB"+uZA3<72mb>I\]QZu2cO.M?E@lAB^Y=U[>;UG@k&CKZmfB"_N?h<N"frIs7?PiBK$Vhpj?,Y&8GG=K>"N<pUC[2CWa
%R\J,"K>NMR5s'.h3=mU5LtDnmT:I.a?uFenoF+9V$'>ldVD^4=$Gg1Siq]!h0%PhG84QgQ:6_UE5dV#lXd<U^@17.rWq.D*m`A&\
%&uK."&5_p*4h@3F2"eg21qi(:[5]+cnnBshAeA_c#YhGjF0UJBJXB2aQ^;b77,7uLMk'G%`'Z\4,SbB-AoMer=(ligLcjt3Ue4D8
%^Z5kE$mo:.GE=@P3HnCs4;RY+PS"4pU*cVhP=H;Nq7ea!8Fl!rlDE@Uail01M*5sY/ZD1]'AL!d\!+-_0/RsMm?l_okoO;%A0`J+
%?,dQ#q9aYcVd)p09Ok[1(F]s^REo>2c*0R30lC2)e>#!o3b*hHPG=kLYT\\Ne%gs5g<6I90a!:^QNpuD+4ju9<@4>ogd+8iWu4+-
%MD\uummT@!Efl#:#fc[s<E^&q:C](@"/^@BM0NEL%7drpR]RIc7pU#`VL"Rt8u.odWk&-^[",(:9%Q08h!3;>&<:IEiu-Njm]jc(
%6n3QEQ9CjQcLTnrR#\%Ccb"4h`\92=P*YY;#Z4O[r'XP-SFJ?BSer,#VsLpXWeG9KK]e1I1b>LgctYfHV'$ObrJHAciN-(?B;/R!
%R7,K>-p-p;1(P'c-B_mO3t.k5G_BePA?ctl<],ptLt/UPoLWL7r6V;67puE-Qj4p=P3`r=X&+pm$rj5!d"GB#_F.)FFf_B;$&&pa
%O*o&:Pi+?3;1(qI/!Au8JSfZ[=cp(YU"d(dm`a5q*)abK>jCI"-)mDPIW<Z$QTAYb]^.%$=_)trT'\$57Z4c(!@A*dc8Dn7WK*^-
%\pd'kbW!)o5sKCE]#Vn=fHE.K$-b#`g#hI3W+,er_F.I%4i0+TpPpLY+(nJJOQFUsNRjb7/r,sTCQb+noh@T>8a`S9B``=J&p$0F
%$#e+)1%<O1Fl?9`Q2jJ<a/Y"])roFBb0VHF6UpOSn2/E[O%P5he.%8EQICo6F=7'f<.oRh#8*gWaVRS1-jDh)]MKLa7oWBKNe5cO
%Tcrk[<1-]_nr\nY@%u098M,5qOhAk&qB.8N-4/-2U&k@ZG>j^SYh0thSk;n>eKU'Z7iJ>ndF"D]52]$=64sY8h%''V,gH3]`04!Z
%WHLEo>mU;+P?H.!A#m[q3Q-fN;$R8pe[(sedO[N+6HP1uL4dmEd]3pM7MJGXJqPYs2BK=>LcLmY:l\O4H?O8MYVKK$NFUm<cO;Q/
%PU.h-Q98t2,rf,3`\pY<@!78EZL9K8IFHfbli?$:,,oj^rJ<]k6R$AIm5lEPoRu!n2*cc[2Nj_F-PY#4V&CWXamSBUE>]KFBNU_L
%1+nl&&`jc9_(II)Lq4TWk=A2#'&RsPj1tKe,n_pf^.cY6`3Dd,$T]tU>Z,#VpK_l6@[e3q74p?9XC$^J7MK:s+q@Ku8+T]?6oXZ.
%S9Nf#7umM)EQ_s,3:In.B2U\Va;1D'?>8t_lM7\_HDqg^EJW#M`.o54Am/?W%t1%1O])+@rZlYOPd:Td(_[\g`tJk-YMbsNnf6f6
%Oe*20/`B]M!&]i/:k(P/[5=bGLP/4pe:'"PKHfSlfiMZuc*KtS0h*P7:3Rm`Wj03gb`'LQs'=]r,:K\hH:6>k/f/EVe>76Oj^RSN
%XJmCQ,,b!h^rF#^-/YMTg]nEeei"CukLE_/,R]=o9NIeKWf#,-lu8tL,][OV9Te:09U-FI+q'L#Qt7&G4,1b"]?=X%;4bOi_,HBq
%:2FXq3bB3d]m-j"@3in`dB'12atVSA2E/;S7:F3B:U1g7G=R_trQruk#7Lh]C'VmE7I"B@?:+?KU['Iaa_(99YZJ@[l-oaR'46uY
%'h&Hr]u3V46n8R\eO'jmRSXX,Lp)Im],mh?g?gD-b@3i?7!_u$(j^@s25L;8g8+C<A.qNCpO)^u)FVOMDc7HV-Ah>70b2Mudd2jY
%kAQInn,s6E)`?\s#!#%A0)gtFBh2^+nU!T]`;;(Fd'KTp1pL9tU0'(HB1cKe9-R5R*@TOj6UWcp/;O[F9#>)IqpR+5169Bg'#uSo
%a(jc21%@Y/7BTTbKam,lk"sN@;u/;h[Vt9C,InF1En[?ZK>fHf=-kAEH:(.Q/b5bF@<*"QktZ21Pe5\6W=pe<bj'[h`kQik\Z14H
%d0LnYJ_[)34U5':q+ra%aJ0Fq'iDh3jn-']1pQhI#)MN(G2[#d]I8Yo&6QK$,3"?MBp'[3RTi1%NAP]\:=bc)ES27%.T\=FnK=Qr
%n9edoj81t(c/"#g+=25+:P%?AEal$?T#W#F=>ZVp]UP)p]ac=9r&kiQQY%%E3$2Dj-gn,A\L0lWkGAM0]8@t[aR)^Em..3(EbQr:
%gIHnPSG/2f!T4j/W_@?:e$HXmRp<CdKDstG@u^'&3>N8],e]YY>+(VOJR&`iSj=$S=qkH97-DrRO@)%<PI]`_4:_%k*2-`69*e%\
%fipe1$dj=i-5tZY4cBP23Rq0J2c(@&GSj4Tk]5'UcAZo1;k=t]_L!^>;WPI3<jePj%`F3'hCq'UN[KEUCm*_cd-,`noOmHS#AUB%
%NFp.FJcMSdX,'so;ma;ENo@:c3Fe`u>00"ll$Co,?API?4eO>//Q_j[\J?SnI8cnqM5R_'C]&/8iqA(Qb.6uThGbrd2T`*77g[Z4
%XW.>dfKCHFE=A6VT/?#tMO4T+3KH153e_J4N8RYGI<Uj/lksH4jVPTMMML'1Q'':1;StqrZ&JGlAQMPtfTEdCK16(<dEon,/p@dp
%BbhHS;#4[DS-0R/3Qs)"Z5YRfWa8t@Z;<mpP[oTPA=.(aT$`2="Tj7F=#gBBq'!OPUX]I%'0SHCp5@sZ4L.s7.iIN<_1^cJU?u.+
%eM+g5(hESb,VjXoZFj!$e;8MjUI+,0fe=Y:PI+F;6Y;bn3u$G$E4[!imUh;EJ]aB0:T?6Hj>Ct0T3RqORd@Tk\W8DP8t0s+Qtn83
%]tPJ;mlNs9/jpF@/N9#l\e3AL-'CmdD%i0"Ug>N2Am&pnm:#!.VB9*7#0[1t?m*&)eW.l#3o`fuGNo[YQghj7:in#PeQYJ%R)"r/
%Mbh_RNDl.KMt26bLWY2(3C@D9ShT5F8XB*-;5,fX7mSk68VcG2EjVG!;_YjdXG./TU$V1olXd%e'%SV=j$jMc93`OF>f"N+(MmsM
%nF[n_Q_o(?UNIPVb&j>1G=2TVU?#-,:9*I5<=)BWjjXYe'3c<s<2>g8nQnbSEF>ZE;\+qSO9s0fV6iTZcKoO2!cZaW;,-Ctd[AlB
%3/r-n!T*hT>?[Jb07A)kl\Q)3CD4m&`4Rjl*tfXn?=HrA9F&<[nP_/l_?f?[USjZ7,O[#Ro35S3j5cY.[<9(H=*P7,>V!TWY5Z2a
%hPF;>/Nq_NQW3unFY!QVXgh`,Yg5U%Z31VsN_^%J(:=Sab=8opinkEqo6qo>F2jSI8@3,5XN[(E,KAiW]U,q1-"R2^D,!=-"0fEq
%;k$8UTkMUu/fLD]:jRBK_@`'ck@diPm\F&%Jo:nY^%Apr0_NHh!B+SFo-tKC4A08%ojKM1Hb_(-hd8mA%UL,QPP*/Y^M:24W5l60
%(sL=]M#Hdqg@>BE_GV@@5umP'fqnL@cePSI1BRMW'+JDj6$$Ha8t?lUKJ&B]=dgoc0\=^9SqpK?FD*H:0]u?91cAJ??9R1ICX7%.
%^W]D<Y@g$+MH!<!nZ@?2gb]HD>H-t-mcE)YkDbE&AWW@XM,CB7`sR&DJJm28g\fbHhJXP\"`R7/7V3\Kb7dfNH.u#*c8FMnEn\T4
%@rZ_Nr3jnqOA&7%+nh??G2lt)(e'8&5=_`BM.iTO&5R$&O`lB@StChePu7c[EICih^$Ef+:9n.]8F=`7C<?t"U"26D$aW"K"r'\=
%h6!]``lfE3<'[ou3QQs(4.C9Jc][pZps4sJ^nEULY^0,tk?bOLDS3"Hda,ElW:g,#8tj?1@@7Q)#-_gbV)?S_Ij2"[m>]hLW9BJ*
%h*JNM96+-.ED-QE0r/!_=T;Vu#f<NBrq,+]5Na:f$Q(-ELGib-,1a5e6=mbb?H2?ppepQrU!+Cp'<.GGI*)$[DuQqUIf9$PXDJT>
%D2n4D4WgHK1O*GY+#cb:FPgP?d6>(5Uc!(5r2@]]'1.JYo1(B.36b(g=tIXi-Mtgu[.&h&Uq^3c.W^KqPaR`TAHkcuA>[@NU7e)p
%L2bBNJHC91?Jr_5Lr5IcM98W;*IdCp(o:'L^X?GVB4YcMGVIl.'NWg'VOs,Ir!0$B)J"dt=h2LY;/`IlS7R(mOMatnTSathrW2M#
%)ms+DNnb[3Cb&QZW4NP18$t-OL,m8p(;4":c'1uqgK!O5V`X&Re]Vs?a+dD')nZ1t6>Fb"(PYCc4MBU8ZV[0K6j49o:H7%?J@tW!
%N4nl0kfGE&F6`%BIMjONhr9IUA3=t+6WGr55J><6cJMPNAe`FkXi(nK8m46DLMIV&VtF5fLrf[uTi!+\'i,$/im(7RYoaM*H/`as
%VDEstOoB."UqOCc)uaG!4QfCNB(a3PpB$qiWW,0Na\AYmQG/dADonG^3c((q>8nba&Re<a6^q;AP]7tGF*beYj\S0Vp$#'`\:RqH
%oOs)^oE(ASGopmVq0Q(]fM=&'"J1DH'X.&VrJA34HeuJ*f#UmhWOejLKKM,p,%="VmaA1F`:U"n4DK@drr7oie^@^YeE/of&logu
%(b?$SZn@Gge_PUq6X1k8`F0O[CF7[l-:@rl&BlC*7p1>/3X(hh/7))qR`;Z@Cl>gg*!ZmC.[.2%2-;OGLs"5p<Ja!AH4!@AFc#_a
%BU#e!l7Q4[Pk%m"5L`nuq,fh1=2.j_%&@VCk&GW.XR=Fs&Ff?_B;FC]-Go0D]4A,ue^$3KkD-pP)1#+qbb'G/0:IecV91f]h$gB7
%`e5Ug*SK.4_I3%Q(2lfeL#V0JRT#VnSN6$R$`QKW%gj,?9s&M0D3ZZNmVo\K?,GOsbb=jDMS-QL(*q4%?&dh7Bm^7/8BItG"G-\h
%5@[*_,D/QLg_jQbNLm>-2bAIl)m?&q`k>EpGhT9)dD.GPkA\.p$:2,1S'E.k(59bk\g=\=XdWBQ3a6*,D,.65njH?ZU6X4lpOZ*)
%">RlPd:r#9,OL9Tg2_ZTmFO@`0_D,N<[?0A$rl__aCpVp#")pK[5E1Sj?,kep+p!/pE*G8B[`fANE`4=Jnb$aaM2T>Q"[*7e_9Kp
%[f(FrCO#p*_19=c:Td"%2]]s@YqPC[-m.u<aFZ=?L=S11/XS#nV]4nEA/#']lh?.4j5c%5qe=dsFf$p";0F8>TK7^]4m2L#(o%0H
%g17h4YG3f6jF2O&S_ZDU/rjf3/Q\5@36Nb#m1s+Q"fRTah4TdU_Ob>c5Z8h<jLFF,addUrB-Yj)Ma0O98E:0_npjE5jV]dXKY/R'
%(I+.j-O#jJb3'J)[utg<r=///mm.XaYZ^^TM&!d^,H-$PmCR+qE69bA89*C;F]4(PJqd@X3kjiIh2e?^Es])o:!h9W]QRdjACd.A
%q!ubd^kd`%pmmPYn03aX%=m@=Nashjm0[Y'..$MQERpi^%"N<?X?hg+4N<[.%h0tkU2H]=i%NN.O:Lg)("PpVXn-kRU^oL,8Iert
%F5p?m6FC=fWEIK_#KOqZc[5`KHq4kaTo(i0<mEj@o]UZNOjn,_%j<d3;;G:Dq369GO'Wu+G4)>Smnj%eaDR-<m!i8i?k,^IgV=J*
%F%J)QUBiD]C+oc1B0[dU9TY]oeWpImp15-a#KXC&.9R87>k$rFd1P2f9r4(G=a(b#O7@KW^0[<.YRGaD[I.hJd@hS@?mOR+BJ./[
%;`m@ZCo94'K17lP"E`%0$aMbcQ%ED1pN^d-LGK]np+/kt6N^>#RmVi?IJ_PO'$o0$8;&p%r]TPp%/<TL>b!t=H'#2n8oc<?1i8_j
%_&<Kt4mjuQAp*%9D)U%.T&*8hH[Im5)!bK"$/-YG>a#GrcT/&j+FdYU_]Z]^lJbqRopHoN3[BO[=e73G.9/e`YT8YQY6=2]`(\]Q
%Fq-dirCHdBH:H&p(b_k>B-G1\LI=FO17A4=e7@ShFVnqF_Jd?J9*iY::Q^H[$;5FPa[>Zgomk1S9N$:m,=U-_H?)lshjP?jdat,f
%nJJ15RCKN72b/H8"VUUQ:UVq^U8_aNRpr^%8ia!X8_rq@c=j1k`q]/c]>K`c8"89g(2.2'Al)%(N?mPfDX-oK7qkF@.ki@4ocX7C
%DF=!HE+G40h4bsA$H6%$LRaoKIo'I6,mh-4/OHj&jg"!RS3+s*)nC`%X?\,j7'as*`1,j_hSVn+Mq;KK!q]Jr$Nb$9s-;72oT+u(
%@.=)T61.EZ3PES1+@>111Yne(Z=M-_LN"Z1\.jTXHbZ(*e1IWnl_@0j!bQG&q-.IG0\@pfi,(0LM?<7G[hAu"7GqigNUu?lmAZH4
%p9'c93&pFCLh4e(4=XU-?4<TLG>$<i/L8V]e!l64X4P;]1#M-RrIRjBSUetS]9aMqWQ_-cFqmkcZOtke`C;^uRW?t^"Ep6_am[aM
%?>?[MK@]%nTok-_%;C,%&Dn3<8,>A#YgIiRGj20K4HA^U,ckKb=\a-d?AW#%;`XGYVY0>(5%eLt^q?'@>+AMa+EKefKU&8q+q&oP
%_+GSOZr07LlNu2s=o=>kJ;S-<a1Gkt2?mhHR+81Q1*ih?6!PoJ;"KL.2%]pg8Mk9SM:o76fG"rLPKo,c&KGUmBc40Q-q1#hEYCSK
%CD,a04h_[D1PS''jc#l"i:a[`V1+5^R:qR[&)eVVOa3Qde!\3#-ehse7eh)Wk']r-aN!N,E,l8QLG6ClG/iPUXGfS"q\d@dD/Fg7
%B[B$[aNjNgiF>9+Gq)N#1p!,[ZbA9]IIE<6hDc/Kk%pjJ"T3eI=&pMlBiB!Cgmf3-RVJ'Wel]lK\9D&)VVs'EK2YiD\OBKYiF`!q
%ME/X2NT>d!ZM@>l`omG?Mm55eXA\Xt>2BXY6'8Fj?#IR9#66(52CTk?*%I(PO(Z6M5XuPgP\56_)BaVZ7]u=X2I80[!EdT)iC$n9
%%1t4P#pPbrTbHulS!k!FY<*CGW32ZX<3oZm4I@;5+>4ci5WR&N#QI`]>!q<@.,>Hn:o&Gae]s\$`%+OVUZAAIfDm`gA*TPbE=P$[
%3&-qP;PeB5a^]j%=4hq))rPkdGrR%YJG]k;4,1&R(.":)g/>X6&ANJt6F[k"\J%bFY_kX>#E3)>4s\hJf3ZcnOMgmXG'_8f<o%=:
%Yl<Z_Zpa@2#sjX?Uj9ard8cXqco3gO15ocl3+:>PZ6)ikP.I77,b^U1/Of6.L4[]/jbViJ@(i`0,FZK98tTi'f73qfP**q`jRm<V
%1o[+m^Y,m7_h/\0!m"NaFK:h)ZL0])H&K_FL`hurWuD%hCQW)A.5;X!;OX$'cU"bTeVfIoo%Vbaja:DB#cs[*;\TD&!=0L:A+]p&
%Q\m5UBbl_X!7"3R$>Gt[/tDUt9-rk,N>a/q2e5js!a:CV?A>.1.@>Y;l@>q9#Tb9XE$E.4d)-ps9O[TT3\qi%UutF23Qa+ihA!L$
%e*/j-;)t%BI$k&()-3-S8YdAJY(8SfIBLAZl:i#pV802_-)9Z>'F-ISBRE*l\Bits+N[k?mP1)UN\qL^KK,2ON5im7rp#m]l4Lb(
%-#g'r?CY:F]gBhEF1QKm*1sCm"5N@;#FE#f?3]Wn-2fmi<n^i?AY"09dVUn1h.I$Bi1;F/#Cq<K`N?q,kc+%4k@*E?TRP1VO!O"I
%A`8pZ,Q"Ucj'rp5<:F!'B0[6N$@%jL3RKj):G79V(p?(cKtt2GZY/"IfV;5=:`25$SN$<ibNE__b<I9OMo4NpZi(ppZ,0IuGP,,_
%LF'K?n<))c[bX?%AHP>*r=#lr^$q+?/p;5nW*k8n"u,u!R6u>9UYa/C4I(r(q>d0bAYriaGILP'9dUZ,\igliiQ:Z,hCK;UK3l+,
%'\NK2@\6Ho??[`Z'<8=T\<p1/=6^<oBE><kEMBKjQiA_AW\NQZ\1/N73JZZkge+dC+r!@,SHuU(dgZnWddFW"@u+ln6e!;LD57kl
%].Q%jiS\\jgf>)Y6-c>MjQdeDEkf=IJj*c?H'G'j?`X6Fkh>LRA&_uhW#3VXr>A1hT_37fU<JZ)ob$9C/:(&)p2oCf@BW*3#<%Tm
%PJ)N>X9pnVG1ZFq0mcZqcl)4GPRR=rG/o/iG[bXd.od%j"s^t;#,(A1%$F;Rrj=lE[nB\4a#HN%>ohM'Y?jGF<QR)UG;t5G=k3jd
%%AfbYIS8tYPDn79b6F7n*Y=]`iUE""1$P-"A'&G,0MXo-,;H>b"&ZELKB%iKmudIb&V)OG`TpRI*_LL3^dV<aars:UV0N/$s4gS-
%Bjmik%],g2cn#K4KfFrU`T&ouIJBWp[DL4&^TA"MPRM5:_hr/.0ojuQ+`2\%`GS"h2FHckXGS8Dq,nbjDeM/#Hd>qRA$L<SE_"_*
%:aZ`(e#6"Jn=ik)mH?SQD_&cCL"_/INKhe?Q<7MIVC:EeEhLE;oDO?=2X^uP&BuC#bKfR=3\%RaN]@2n3<Q+)N+G,,pM+IB1-DOL
%$=-^s_>WPuS0AdQn2$1:<FJknqJ$r6p.>f,Nek:/P+dj=UH/^6IMqVQ<OZpT[/j9@AZu$u9$Y#o-$AnB:%]8<iMA[[N96Or^Z)S;
%i2=kic>O[O@:Rs5L&uPR"QJ*Y^/XQ>#bi/a%/gQr"Wg(I;cs\W"mSWBn;%\A1o<aHSY]/,]qdVZM'.kmrD4plFK&EE+E]WR`#btK
%8\p5:YB&dlU.PoU[R\ma8q/thqp%uFU;R*Sn&I1##t'MR7/pZMZmf(dVOAFTp614UF4h$[^&#07^m_grqOAMW:O0lkC@)oo#]9ag
%N9f(d:@*u;eXLf]%QK3m$FhR_]`:.-E]t],J-ou1>64[?LK#RG8#e$WWNu&S1or%!DiVg"_fk/H@&#.:dp9K7M#ea_VB@uMW!H[,
%Z`OY9OM;C4p:=jkE4ooQIG(i\!nL\j)C5C.7SfSaHr]PHcc.(IqtjCh6>jJmO9t5q]q/hPj:OcHq.D^cNIh>9G0pK"REA-kd8fNq
%o(sCekJWE+-8F+C-<b_$`G0Cghm/U4,"g<nX'"u0P/i,*Kb2nAHaG-QQH$1ejRIP9<@]F?U;Yb5I]5[RaWWfq9k3lpFP$Y>:nl,W
%OPJu]1/JmojgT3c7<K5YgE49<krO.U2,4DFAnfoRi@&1iG;+#T[4.<;]FBH$/n4#,BQYZT2(=mC-=*O9,UUdCYYac2*XX?Z@tc&k
%q!D7h\4+A^]<'JZZ<a!6Mh26L\CA#4n_+V7l?),J9C'K07T>XZf$#@l85&&\.^WI7$(NGS$+W<(N$&/&Q0_e`[q/+E*i8JXn&OcG
%KS>bF"%r12*3g&K:-mu?Y=nnYaf39C!FqeWFEgb_`b9=XEOu+=W437=%3Vg-`8Pa4R\5gXiF(p'3j.SSUnrg[76obt8B,PmR&00q
%ap&3WLg]=LCeKID#CY4VrY5_`S'K5IZMZgBP.Db!^?3[=cO%8DrogF;k>p^?ORYV+#&FBZWHE0%9o8k%''.GhRjohZ#et;,q`4/Z
%;j1Rp=U4q[RK<9c8K1/AfnUHR?K&c32JOJ">=Vd[MI'+RhoaEgI=d'Hgb3g;.+(o-[a,b2*Hc%=p6Y0<1'Wp81!OUrT`kuX':g2,
%CS1;eKT1]q<dBCo138]?gOt]$;^@T8=167::+t]tg0(rtR=Vc*/^'^UZX1i)mTC^Z;0n_keDd:,,DP4H7,2c5#rpR>8X(Z]Uu=X7
%@8L,Y4Wp*T9!,#lT:>pdPbH[%kQ1>=-an`XqNMRP]-tqZ;`=,"eNb1Tp`5LIS?dRDUi+?72TREb"Ul9h*5`lT7&s%E$CT,dOCO&5
%$$&2Abrd"#'cKPOI[=I8>!R1q&Xp6g=QLab4@.0\-ib*tCrBRhe5[;/;AWtZCdnqpP+s=g'`>/JkMCh?p`#@dMpMT@-;jMfg+>8'
%0UXdf\GCS7]i>&)GXL1+--L:&W]VTGcs8nFg9\Y/F[:i_+=0EW)%GfHS9P`GYM$:p*_)';<[%+#=ERqWinFGnhEB]+n.>N(ind(X
%^kllsD,'5B$b[%hkM\=\"g0\Tb(k_15-@Bks/BhJML1CSHuH,2#((b8A:X=_RPt?mf*bY,>IBT!g\?>e(F_%#dO>4aj'm,bW(-9Z
%id2"t>IXC`2XL**-jcf4cRe!1m*AVcN"7VhS3eV[OAN5fY6<c70q)lhS0IC@<Gt&-$0JK0pX)oCJ`E:R-lWXh[!keV-ZpmjX3%"(
%/&t^/H8Et]Ucb4noPl1[;pC.nVW.F]]mps\'f;\8W6b`eR?0dOH`A!FdHngZUX[%$^(_Pob=6HPOGU,1XQl\Fi?:J;@2lJm9eg5.
%(:h^J9hI:r+nmJ.7We3$#$Rb-k\1WlP(_hpB@<,2c<+.++s,^'<*%6n\(tGY%[-[E8(4Zerjt('c.^Cs:r^a95\(:a^@U8)=o#Xo
%D.]4j7J.o)9kg<O.7`c*]LurL-&>Z\$=i`[b+k!g`/Z7VDBM\fL;Xhkrh2A.<EUF]BRr?>QK@_=d=Fc54IX3"[]HTfhet7=8[lGE
%`:L&_1-;Lkkp1qHGMGUGY\,E;E,&0K-Q/C2"WL.BrmCibMGZEb1T3!?MEHL(&RPj@!/'OJP'2iR:o^oPif.8kN;7h\90&_V%D,97
%Ti%qI^'#*J>SF]Zji=8/_F#c,"tF_Er=1HF,X7d`s+lM#9Wh,_@WN2U&P;_+*"bo,*SoiK"@SQuO)h37Z$4hO5:KIpM/8)7`6-V0
%[4N9Nnfo*oG+Osk7eN6sHjUO_2&ZVQ2_o..1;2KL^%e7d:>snP6'Jk_15Da;a?6":rDLlM.*pkKZRh(-<sA436Js5J,X^U5ftspt
%$]HUD;,QupBn]+)[+2h!^,/mt>e,qjjZDgbk.PjD"i)PoN.-OhLD$/hXrch9$PU=AZu4>Gfjo/`;PTSc!<)aj_3B877Jg+Y_eM5^
%4O?n&^=KbdhE-5DC%V6I1kD$0DC3aX2:$8hhd.'KXNEZL&I4QRX8ABr'AI8!gmsn`$+]34Y'J%FpTdD\"W@6YEEqBO?;SePJ4;H*
%ZqB_Oe%q3uE4^%l/J\W7g\E'GBkbrLA!JQ[QV3N9.QGIN$I&Q[@LG^,3<TZ,cE%]hr;2]dk@R=/T<>#WpqgBpr0bF$gi8C,^dYI-
%R8W2k-5eDom1kKTFhN[X[c`@f5EmiJkkXuS4NID;LI!P*)WIf?,^Brp915t]NNlq,J=8L%FRgsA.OMlBN8WY-3<G:=.P_._Mu<bf
%Pl7Nu!V[hO>^.&D4',#'_LCi)W'VpNT]ep%]^'4H&=anr8GKc?Kl(sY^,?.b1a:t0Sk%HlA+^Ej1t:h?ju^Lab'KT^$2$d-k/`YP
%]e,qWg5UmUK#bnX!F3%S^0Ls$A(7\Dnk`4?H<gkfc`)1sEsO4s$"A@3F;9IB(Qi*JoGUW%Hi/W=i!5h('You#<(B;u@YC^im9k3S
%QL+YYf)!C3PjGL#=p#*qH'#PZ!%5PqFFLgleYCcSU\l=;/,M?>PL8&\,4WZUHq8?dLI)[D<p6OD>,p6ginM`\EbJ7@Et$N%LjA'e
%5UDYin8f@ph:/.`H%p"0p$te-P4,?b2AQFlE*/-%"a3YM!r.laJs*n"%5);((Ed1MkY\6.XTe2E>6[*MB/;pYjY8[65-Sut7?:AD
%QAX%9$*+^-$6nrpr5[)TGp\bGb4X[)i_$kJg@fr?%!]mJ/LKpg5Ha6T3>IhZFdX!/I+.UEF+(,OK%cYkqI-[QX,.o%b^RfdC0eDH
%3j=@VY:K;sRpbT2F^Ho)FZdf7H@)%BF2,.AZ<dRb89-:n8[J\qK+*$q!se'D6tY]_!%6*!q3$&qK52<hDdR4d6P*J`e>XBCr6U>r
%3!qK1M3+)A=:#t^H1d>T,nT8@d:pLuC;c>jP7)8J5N)]6=UDU4!"Nj-E?QCc"uo%2+\FaJ$$W?FngO2YQSI^d#$ArI$mlD(RmAJS
%9K6<Jgc;J26PH&SCs8^m2;f4L*Lb;4l:@YH$ta71+oX&fA!L*r"`_VX8RP9NlV%#a.LF9c5_aQpX];(M'j?eZeh5/,0?MqAk*\PA
%6An-b:T]pOJfhfe4)"%(BQBC7(juO.W*P+!,DLBdY>6X@]ROtVS+Ft+7[D)gD#qY$9i&?WjHe#k?.['RQ]jNY8;,JY[YP,cAg;'f
%jZft+lQ<7/dn3tcA\WRCT#:99+/&HW$;X<F/*'pXXS49t)pF@9@VVAWm8Vo]@giktL8.-e[_KI6l@F7EXF"s_e4p9L$Gdh]`Y>(D
%/0ndjVNS\hHcu$uJINi7JqDos<]0Lu[fuqE&BTm$?E[<_X6XG?C)BLKkWWFH)'P4SXkOYc5?3q8GUA#[m,L`@hfGas6Qm8VWW64%
%S2:><S)(=.>2pURd3AF;!X&@V+0hQ3_F8k]H`-eGCIpMiY@Z/^.rE"Om5/_cK4ptu1cJG;c=7U>3RAqH3Bic.LBr0Ya*<$`-0[/2
%KRsa^%[YDnaS*@=1Sc;.R.j$\qb[?]pG+tR6JO=q9FjH["$f@9Jk*@/#6nQ,p$!=A.[Daq7,YerNGcS.hU`&)Um7ZUUKuf!ADSXj
%QGa0mHFan>NPF*n0m:=O).A\^9q!:-T:m>@=tG]ZXY6L]8l_P2$Tf]/r^0<02fb1-XDZmC7Cee9hX=+dS7)Z&^PAUik/+JON)(!G
%B[d&NU(0e%-lBa;7Le58&Eon0$S0<`Q>&]PB7\c?&6i-j^()/aS>_X*R$?3u@M;aB%d]sHH`Y)0K`S=ReFa'Lo6:E\Fq;f<6sm9c
%@ZHS[4cQHEESa8?"h,B<GSNDepZIt05/OQK+6ZEPXXJ(_%af2E4)^ib,6(dWK@iQ_VL:$Gg8nVla@lc:q2<$^@Qlk!32U1$`V4dV
%oK"KfF1e-"cjN[Z>RioO3KAUIoi:"PCBE;gMI5.k0=`aa49=IgU`Fd)FiHei.t/q"U^#<*)g:G4J\06m#fDho1m`p^F(cYN+rbB@
%*V#t3N]Il*!_+u7%_s&8>762Ij3#dc^)Q/sP2<l7H-h"358)&6`Kgf>ji@L$h*%JCjYX'-bSAZoLp<PM$<:tD""LWp9.;5IUcRT.
%hVV*UqWE\=q(q-O"[jhPH(m=LBqn<8ni-4i4ff?d.KsN'-:9fE#%-LK/C@`?$\N^M/6CS&U$Z,E-"X@5$5RYPds*,"WWFV5?`]o;
%!L(-GV.c+;V+>&qZ4c9Kmn2X2<"2d$WN?/TECP2VIu-B2chU<ifAq+uY-t=r)+D`_NnS9B;HZPsh>5lHX&p?o"*G#lDV!*Xoqii@
%"3+k][%Q=)2uFn-of`F>ChhRu`'cc%_<hMr:_@f(Saa:G0,#8Z?ejA)SKU-+30dPTidi6"E]M8hgV,IVU"E'Q<e0n#N!WRn]\!SY
%N+g%MUV[dEq8Jb(bqPqE[a\KZ8-r2Dh[HM)<+=-SGgfX>m^m9OfL9M4YbSXBTPSal`aDBJ/G`AQi5=M#'^`?4e<;LX65;=+?;mfR
%ddK1EmnFt4o+>Bcb6s^=,=J9!6bA8kabbM$YHg@PV6PnL$/R8U&l5Z<J't1CKi*:q-3WR%63&nUlEufjd<nTe%btscEKj:m]j!,m
%g*h17^<?D26Uo=gj0N$uUUIr:\pAmRasmF0o!N<?OO;:+?m'q(VO"L-@n8YS'fi0O8+pY@'Gc>2+O2C3.+d#@>U5GV6V\>+S6XkD
%Q(Q%l?)4s=O(i25HCXbJ/fs,^C!@]U_Sc-mKIJ.%:$G.kpCl,Ub]UTASp1&)p+>h2JnR-P:ku[A/=O"&^SPBW\R%PsoP"U<k"0%$
%RNU<!ZeK-P\C'WNrmEFZ+4r5H9^@pn'r3DM[II3+5`?DTN^h_*bTX^\e;jGCM4lQ7@qlnf:H:88q]q"%4flpk&^g1N4"h86!-KU[
%J0W5B2TF%$qQ)ga:m11g$gAR8%1clnR;1j/"oucgG/@&),h+O,VJV-pmUjubf%0_/6Y&b(b#`&\)*DC9VOVP#Ed&XH7%lh`p$HV=
%>+otJW6$gn'fNW3:Tu4^+OcU0LV-^QS0NYWEL*aK`71J$g[u_50iBDp"uWBuoC4U)`i\"d*l.9E0K8kG[aLD\lAOp9qXC#()XG8b
%C3<'iL@F2fO\-@Uo^'@C4!2'Mn#eXCJ#\UH5=87$?XpiL/0e6;:Io:*3BRMCf;qEX2%n/3TViD-V^[+m#n&._Z0&NV&j79j"f%G9
%ZFO7V3IXu9muO4'*qLA"W%CjgCD5U]7?UW=%PU%D*K&f-(1=%0hrIIeOX](Zf[/I+=uInVo^td:ftiKp%rFOWO8^1nm2F\,Oj2!<
%_5Ys[`bL2[;>]hfMpN%$i'YG/JGsn%W6[>fmTJWKcNGLt%a%i`<T]0MFk`R)MhRT^5$j5K@B2Vh2H?dF\_5D%/5Ui8gsj?gi//jh
%#=Je#_SP^JX:IFc\i4JVga[&djW.pGWMVfC2?Je:5YU'9]`W8[K_L*&qQ705j`-@AX,_/4qh![B_Y0\qbZ<_8Mt(HXn4pt#/LQ17
%\"WYANF6a`b3o/gUC]Rh@e3qWfDu"kSS.eTXgb.fetiAjZ1&t<hK5VsLT*6YWh-6)M[RM'qu\(=+:"3gfd+#gl0%hiO\fpe52>Ml
%:i:S_JTWGJ(00N*&g<KF#bP^j;&mI5@^\M4C:q6WN&Srr=PC0T/`Eu!pA/HQalAO=a?"T1G]tB8Dd.$gT83b>;EQE5:KQ@q_Ue2j
%5^Jnif3D#N/BAbt<L9Hh&8_&261/Aa2?sdS/(*9b92cN"eb5+pU)2i+f$Q4UAN,LCG:Y.KT+erCme-8H7qnd>CM5dK[),epaL(R"
%+7k4QF'XEKO[Bn2)&(d;iM0C;G'$s2a@7[S)p\5oSB>kgH=XH"i8!+32GGBpk<ZD2#P#6gd,Ne;]WT9VNP$m)6WHk_[^!aNmbTtd
%PD,#fA2Ua,MN&qAgLtk;)^6e91<fO0"ejk]9gZiWIW#Bt.<(4m.R_Zc4,fG=8J&.4$.9m.]pQO,k&_D$A2Kh:qgHo#M21/jF)oQ\
%a0><8/JY%:9eo&u<f4_<Km8K,p(,3k-F,2u3;URCP&)erq6Nq7Xkso<'dGYY#c^m_$LtH)8/$aF/;LdS8?FCt!f=>f!-pIs:0mTK
%)<,@>f=Dbn8n[Ul\4]He0+GLb:96"-R"-E*[=<T$IdWh^>mXC9%]G.-Rbu]kJXa]]UGHR*rA)90(%%sDQ`uK;?tqbrUX@M2)9To5
%lX9aSi.gH2l^1p9L4NNY)q6(`3Gb7`Zp'm<fIS-iT8L4&*_XBo['UT4QtAfbo\/;K^'(Pq7T@0["?3rdn5hL"fUQiTp'B<T>VI<V
%8Ks'4[ZFg7peq8-m#>+1.%$X,p_)rt!S]m^]Nna`q.m[V?)II0dkAt`aQ^nL`V5,#46*e*%bB`O$=VTWh'@&[e^A/5i4C$bhJA4i
%pmt8c6,'>&L0oi<QF[tZWh+f"jn_HGH>+#Nosni$b\u(1'J"<&2TA)_.DL98NUBTjWG[kRc36/h;jZ-*J_2CsrE\<m.3a=p5Hq^t
%VTr12kQGZAlt>6hpQK"*(K6O\@(f?X22i-kU,o5mR7#)&`f?'<8sK-;\l]ot#EQ4ZMTg04ZYh?1\K\n444q7K]HQXH'lmLP[o509
%`ekD@N&\SQ(A84@]P5_Ko/>>OK5n^]^]!YED%GZ5C]WVS!^Ihr#R5+1?uUqo^1>I$EF?dB$j+1=bSic%3Z"7HJ9!Y-?QS"FM^iG_
%(V#(TPUu5G@L_KTf:g@&'?)#mUtb?R=%Eh:C&G'Sm)Ae%;Dj_eo1l\-'kqp,VV\nW`_I^Q!Uk[Id^U:^6ekaSN5Y.'TXQ/Kjm<uO
%8Q.4#\'(7[a<UT1:n[Tkn1S_3g7NJ1^Fk0,'b1Q/^glbS6]W19T;%PG;m?M^;_:_AI]7EsOAr4Q"@F3\2tXcdQAE#NN]pPY0(2aT
%W7<j2\<OW=HFoKJmT9l5h6][pIH\<r@rin;RjmWSWQ.ib\gb4+RArc;cZGTf=k]1q:[LX!0<f7BL,ZI>[=Vp@C'+B^oNiQ6\[Ab`
%\9t6-.+rVm2<5Qs=h9jL>_]QeZ0[Sc1s'[no]E+GOJfD#-pgC,>;i7<1c2R<n44DooO^EPMT2K;HAH>Xe.e^(K`ISoiunI=a2]"4
%oE^ufRV1XuHQX89p8</JkB"@3'5]1t=fnuL6E?=a5i^4GBWO*pnd%Sb<i\q:VC=*@e:d1qnK`al#EQaKLC"<r*An,q-:S<AW81hi
%Z.>C5Ch$dE.S!ne8K6gH5-V#:U*(gJaX4Q!/nHPhA=ln-./m1RQ"!pAT5G0<di\+9ROT&@oWGcC6Ig><p\h_P%+P4m<G^<i0&@.0
%,Ta@=<`iK[bFf1LeS&W\`7an[+rR\ard!dHFmbR]C.VA"gCXd)1Y%0Xl[.m`>`1kZ"5Wf:7Z8BU@jQ73;0T^fOP%"i9&u4Jc)HZe
%NfLt.`1EO(7gU-&WBnl3O,)_f1LO03"iq.$H-nbmaYUN0q5Qp;oi7*I&ZPs#$"b3k<.Uus'/h)c?g>\sMiGnd9mR/fWH^OtojbHU
%,p6(AQ7CFsf`<_#M6n-*MkSuXn-!&:iYJ8?0$XplQ/\o60prQTVE.VspX3@\(2$'OdA'1YQhf4F<ajY?(c];f\)o$$Yup`oo"Cng
%I:)O[bY<3FrZIWVJM[PhpUH_Fa@/2/,OQssO"&Sjd=t)i6F9BWVNiTg;ri#$H?4ugZrX?&oSrZrI9_Ip+i`$[-Zt>WC7KW#QC?']
%ZIp_QHS/)2TW^)&S@g9f>iU.:^P^H-O/Nf.4gkJ\846<Bl#eLsEm1a/p\[3FmbeDeN=h4I6t!2h(WF:c1&2O,h:65.eX.2KhC`5M
%TA)A3#L.]jlk#FT*)PL*Nf.`P!bI(boWk3686((S0UJ3i4g:n%-1-^"DrR3m-.N#kUWTF[b'C,F(.?[u6LFTY^"5Bd)YLK,0-X5e
%+)dM%E#,c;\r6GO2=L\X*Tq0uZ*dcWFBbQ3-CPg_:SW7.2Ou@^MI*"QMS:4\].G+%416AWho^a+Q=)=&#gN=>2uNZ8'j7mm`?Y[J
%*Ms:bAE9.Ylm1!sQ/`O!Yn^st9Len.>?n:Zec9Q'B-;OP5E)<WW3;6cMKjQj?tLnu,K.U':6>4i`t-,.$,hjQDsS"M#Iu;/>,]tD
%VVtr'6:#nQiuG/(g=m'$*qm356K!Emf2A!D7?"`R_&OE`42$)K3S(P]P]a)lUi[%rF0g&>BD^gZbE[[[\]1SPq4^6>>j$dZ6P/H>
%[]Il<CmIZ]=WCZVpZ,lm2m1F#Xa.+Mn2XXfh%d_&'fOj*a0U5*D<Mjha]%nP/<g9+8^BM6<EA]R#F8NRBOq">p?;;6.@3g-.sYR_
%L7`H=6Qb(',!&cF#lTs6Xs[eU9@)6.bHF3?7cis7bZFbT=VLRMs#_CY)tpu#,<Y/F(oI,LlMt[$I_I23pW#\9P=</snoKcdV1^EW
%8?*uf*Mk$ASshE4\DBi?R)QVrn3H"r:d9gPX"HeelL.;oVZ>!nBrR#BI+l`6d#M+VMj#5"glbup-gb53+&AW"%5kZZO43l[<Uf$d
%5DiL!_Q$'?&MKJ@44i4U&a<4$ZIk11!1CkO$;F)]?ZEt'=?s6N+Y52ZS,iPbnT<sRPO`^Qos1Lc/:l^8)+/0'CauaalNMi7YZdE9
%\G\LY;nb;Y]Ai,g^-67T]864`XX:ZFNWuHQ=nZd7s5d/?0iqthI);&t+gRP2dAHk*@#C[U7c89X95&_m5hcAp:Z>/$%55ph+=%TL
%B.*cW;S%P"ol3$Sqb;ltD;f>PMr*%X"g&ii'6E8m:'h5$95pL9+J,V,e81`n2`6ON)hto7punZ2%&*AFU_aJdO#".Ca9U0H..'N(
%qp2o*RVPb0s#Re7NCV+$!,\TBC'L817geaK.=tp,!,P5FMS(g28'B=k40qAl'>uhhXV?Ik/K5_6pUKo&hh:&cS_#Ep-'j5`g(@dd
%D1b5biE[nKb\GM7ZO"P1@eX>lFEq+:<`G[d?%%`5R<f;ek%:ajTcGRpZrc@45VX(UK):9+;1Zcf5pH/I[`0(7F1,2^U1UV0*"`>M
%Yr5t[c7!nK=p+F.-$@ffj4`!Lap#^.29$I@mFl<6P?L7Llf'hRZa9n)mN0nB7flelHF2*be3cK(5NQBg77R'-[Y[]f)4+u8?.W!,
%_dY;LJ"Xd'W24pb3f4gpIMj/u<Pni^"g^\&o@id3@EaP\YG3Rns1p8&VOg:2=6^mV7VNRJ1tH.uA+e4RK;#/Z,!N]lH=*\%H578-
%/ID)]I0;A%_hAaSkVG7>+XIRT,(S0nhgs6]/Z[l=88f(3]$uadogh6KEF\Z!/;^9p5U-0+38!XGIgKB.g^kCEXkf)T86>kd@ujc0
%qcq&if(s1Q2ph\ViH1FQo!a4'E;VQ0;n#r=+2*g%*kl`aTNm$932(',qd[nk,-j$3M?0k^Za&I4+loKLNeQ^U<aQBQNFc93;hOSn
%WR11fP*jFLIl2Htq:,&X=$\eO0\NOAed;mt(haq!Pn:'B@0RWcl%E\aY$pZ0'.CHtYL*,1LOTTZPS99uUFUd$01%`8MlZ..<Wlck
%=ThB[gj>(1a(?iPGR*i8H?`kLooT8Ph.!0IqhAlMc2%P/7jKgK$]42';#bp8k5s1D^qDX2gDpb*n^-sh,KY`A-n\rF.AJM7Ua`B3
%8f5BW7K-\d`@7]2]L8_uA9;570Se9)n]rIJ.<NcAQi^)u:%gJW#+4#$=OJHB5\VlZf9[IuV0RQQEIqK.L<E#U>nrkEAq+g9I#N#g
%UP7q[]Or[6>0m@]r9bdNiG@Y06P,ScPZ9c?m(FK"9%)2B=ARWtWV`htQ+R2."Eq>2-?O`=rI+bZi_&M]8k_f6*\q$)"6ZcbND-c1
%>MajF6k3b_V)02mh"SFmS<g@>pb<AKSW#C^o2tN11]sNAon_qB:>>j'eiHr(E3&hr8-5_.$VXj(-66!lZWKF@CJ`F1\Rq>SpN&*]
%c6TF#Zdq6ah1<\S?0V5]H*fI2P,p.cF^rSuO1+<O9C;7qP5t*,U>&R-e`B@?@P1C!TP[['+]$V_*;.<e@8&EG;4VVfm6S,e/R-(A
%rHK2P\*<U$&?d*q,ud*O?@&Rg1]&V8^Z:?7UB2<tQ_Hfu^hui/:Aa_]O5>N%^[%4EXL8\X<6rZu*#<]2,?@=?bcS]6&MIS9;9%$s
%0h,&s?;k2L'e<0^&TX^'Lps=gXlYPU<R,N`NkMERcr3o+^SJg!68VtXf'F)e@A%Nr[+L&Sa&!ocZFPOVbU&pOO%qoc&,r"&PC`^,
%%d-S;G6)Y;(%JlTaTMZ::6)I'!dYSI3YoGT=(jj>n>gZ=$-fAY"C=&INqS*Bdf)Z7HOP5;&d8tH\0nq.^q<JbDJSDP4ZDQe\3/6L
%_:8MnG`(E%Ic\>Oqu?MOH29opRh!tb-'6#mHH,N;b7@85-9+BuKGpY_BkQVr^&4AlU3CNf#")a&k6/Sq`%C0#dQ$2E;*;C$9_=C,
%WVUm)rVDTeB1,%ei8le^/_5NDHb5J$09>_j<c2\bDZu5qV%&<R0u*miBtsb<?/*Z]R'b6Bp)diU,QWW"dH/QMh5"Lq_;U&`VoZ-0
%Gou$[3t]CGWT!)IW$YN.6pn,?/I?-:7/b$+X_nFD,S,"o^YOrq)oVQ.KJ[+D;W8%3L;0An*YCt;PNfR]B:pO#:pE'/5Tt[Oo5l7K
%D\OgW[^!2fl;P%qNbV[di'6$<aGDmr=Sq@B$QC=<cRn%_IJ6+a^4&6KC1P0e-ln)"K\VpX,?cPf+nY3u2VNLEh>ImGF:t1!MeQE5
%U)>r"8[C9/R]>qQ$)`JRmc_)Q]C5:`<6INcfm#E)90h3C7rs2AmlV"qnE6Ia[Mq\!.^E[G>Y]8bWaep=XVq$qgjGm:%7C/-Y0qM'
%h0=eE9-b<Gk@CO4Y%C?`]=T/\RGmr]\#I"L3?ceCKoKg.eQ^SgN+e3Yc$ta3,W8?ggd'H]g;9[Il/1/f?Xba`O$3'-^o16d+6+:r
%Suni,\nNM-E_o_[/O:?ujS$)s:NfrMpgcX7-EYWu9EF`:BcGMq+]j-:9`<n^gW/IBGa^87n^Am_\>1;7][\:<9gm\Eg`@]sJ.g$`
%;_)XMDC$R]pGt1cf&uh98PF9D7MLiU,@3o=fM'Y9IFAlC.@0f;C"%Lr5To'nLNgBR5.E_Ob(ZpU/:?<2D=:V3\\4U#G)0hXebgZk
%^34$qZA[R2OdfNP8](b]k.2pr+VA;$Ae?mE32h,QHIo*Y^[6esHtO^B%^#'a^]=kHY9%Cc;Vk#k?BtI`pX6&%J=m7@e0RZ+<@.0X
%/u=d<pEH7O#^<k;m&KWJ-$F;jLYPh.)2n:R(3/iU3V-f&/QP[r36fah>`ohon*Osn;I^Es8>"'A$3>C2*.)[,c-7]BK7[B\.BOBB
%*-%F[c9c,<%K$_P9m"Q.@&2:U7d]lGqh^d,6[#^th9;]%a>*CQ;!B0%Cplei!MIN]q3jj4M,,8X,cOu(_\j7RTgshuX(QQane*qt
%kK,nWA@"Oq>;r3Jf1tl`[*e=;QJq>1;-0Lhbq?VT83u;akD&dH"o7=h\,C'p;k?hCFc/5[g1kec86HJ^A?'AcZG"%mb+(mST-K@'
%`*Ea1iE_#?PWis0LD%pLUM2.eHlf'QM=9U7fso!mkn-h,do6DMH4Omedi>g^P#gLLS11H+*D@b+W\0l6@DZ9mXJ5Imn8_Gg/`)il
%0%)GK:O[f?I!Jq4EA#=3B&XMIqjp?<fU^iAM%3."`IA`T8BYS7C\N/aIGP8kA9pNO'&j\'@?*aa<e8.n$!J"<XM?E5f75#$)krP-
%B05sHc/`Q21GqDaF)(:&BfM74&+K3"VC@rK>9.$2RlHnO*V'g**lK6O9'eigXu%6]gt)^YEbbG#FU_oYYiqDN\[TWW/TYnc)F'cf
%`_e'mY]33>R0_5"fj4o6$hoqH-oZqYRm3Z;YJUb0)65d%F;1Ffjr$##I6dmu'E[]<Uib2$K8@8(1\G;PdUk-GZ^Kr>';l^/-Ep=E
%3Mh)MYB374eq$k#\jK0;)<lEq;qV]TE;GueWn!D'I7bMEnoVDiCcO&I7[,-=E8LYZ,,^k#PDWHo;lLVoP3)tu4t-t8oGF(%.fqI7
%dX2Nt*g;RM:i0-_TLheF;XGA*cO^;r8E$+SGb[M?oX^fCPu8'k%)+_9<VfHB:dt5eb.d#nKKN?ALd?;]LYB%Qg9Sp-rRYY:^_'3k
%[]b]X^d;9_?^]DNhF[q"HLQ@)XI8i\21tdYqI`WQ50nsOkA8&GFT&hkCDhnZ+Q>k)9#3)R<->uBF3cKG`sfngn^unBl'GN;7=&^*
%*dA[&$>!b)7Jt7?olts(nPF4R6PUQ[S(:(@j"[N)VC;28JuVce?ohMe?ZTjh.eVF-N[hO\5Vp4Gb`;(F)G'H+G^kmj0Lh9dkkRf3
%bh."da(QpS;24ip^g^sY%WdhEAj$<9hK1\LL9h2-Q3J_ai[tt[3iH"5a-9-%gJtiIlf>!IF)/2n"h:M4[e/<`-8keT'I"l@TRe7Y
%Y*m!8Y\QJmk.jA<HW*Q;g6`%6q2rsVnj\I@hc]hFl1l@eWR+_P.khp`No:Oa<IdQ2CpT9HN)j8Y*<_&tPRPQ[>hf`NoLac1m>6>i
%<%?g5ZiM.tpe=%\/8Sj_\A5%?Cr[Cfg:Ip+RBgJq+-pq,4%j_F)S+iUB_*<81Ln'=25Z[Z5;#B-!C3$K9Q1Ur("'OUG$#1B;.u1j
%aLd]UU>)?&6]E%Hc3;O+"PPi*M9.p90Vdc@Hp6UqkqC%u-C8clcj7CB)c5[2c,,$>A0t%*,mNKs3NgQY9Zs1DG-T>R'=6tcps/<-
%_T*Op+:t[,WB%q)Di-Y'&q$TLAni8m;L+LM)a-J,.Hm)=RQu;7b3G(1p6A0^$LIhXSpNGS_m.nlqL#LCh?[Z/,17#Kk?i@+J""3O
%=p.k8iAC-ZBp%8+fTN/?;EKkT1P:mNZk0&kSIaYV&F0n7Cp>nqr98MR]RR_uTPW41>km9\7NI4l*u=lj]u#6\_Nc^2=94u,,:;sl
%J"l5XS866C/Gcp$f4a'!C"O2nJ`D,a;Q^==]8:m^1mnsqD\[&f&gh2pckmc7]&(H9?Re!%0n"'?TE]\_6hB#_eLI![fX/_i3I>Q&
%dq@Ef"NNMIAc>-c17LP\J&hc@q2dY2&$n\NljeA:<IEp)Y)V`HTjS/^A'7/,JS[!OV;1Zh]aPa/gH$6!lYasXD9a)A[F&m$iOFQ+
%67n+F*1E>_Fh\\*BZ3WU]D:EH[oD*<):P^dq<M$IIT?<$+r2>iUFnWj[D9eUV"3u;k>256Q3T7;rqlV#@&(?*1J*L!@BUqcr:,%7
%'p,0,+E<J7fhOcD"He8k=emkXmFc8dCU1oMO?i#,;W[*J%1*mD<0r97T")Br#fS55MF)?86+`;<2+`GG6O`I(-eTs]&4u2#9Wiaa
%>9ndfWd&k!+rVVLD'77"g<PrAl"UkJ&q9\':4goNgHV_IG\TNheEp%##pg<jTqT'Dm$/D@ZO&6.C/[^E@[S8C$@pfP:+,q3&j/Qf
%;\7RXX3-oY0:Gi"M;Sr)DBkVq1aX^nWsH>@D^t@9DJd>E+c1_$pD"<<NH02?DB+@oSfYZ)K@rnqXkD$N%^^0RZW[a#9(&(c)Bl]L
%'sS5ZJhL-DJJ4<Mq_V`RVUU's4/Q0l%+\L<d^F9@<B,YecVnBhr:iI?`u0tV<M0q@R4Kb\R5o3Js"n,CM?q1uMAT_CGeA+3&#^4>
%P8K9VO4`bMV4sdQOp5)REC<-P&uB!(^P[=Z;OA>2?DHaS*r*E./:$A;_n(MG#jGcR71!tuiL(]nWr%Z.,JmlphV-NN24mfZ[Z8pa
%_`pA\SW:rXH9&<&fJ0m>MpEg*>4O;d'Y"dK)i)4kV9M(IMd0'RADkWSKYbn>/:^i%d[$>U["_(#1in$N6#W1jMTf*%Rhg/3>%jed
%?/JPr1PVc_Si<o'\>=K.]S70up>$`C,Fs#>R:RZM0[*_I)VdT+No9rFJ#XB`qqOM3Xor,nmNNC#+M`fM98dpF:JTF/(H'`sc-u(J
%%.[W4"i2J`1`0W$ihrm:g@PrT)%gS7<R_7@2Vl*B+Ji]\#m9^+F3_BQUgbFPTq1+H2iXhC$Ml_Xe,(HVMGq3@f2[dJ(<-qM,R\D;
%0g\26CWH+"HI&0A^[><QI;g+oS@5Z,=\R5eCJ$/C&R-Sp!OX(S?7\*ZC=Z[J:&Lf!("dW!Igf>T78GFOiQR50`uMZQ8gs4Ce'(i#
%Qb@uYJH5I>1Pkb^K^\;$l%\ROljp=)[?B.#?F`!i[FZ^eS7Nl6G*NJdgg)@`<CRJ*&Z!f]1DMH6e%l'H(rH&qY2KS:p'@i4!3X7@
%.ATo/bmO*]GF9V7kAjHm\m?H]Qad7$:o=S7%QWS!-kKH_QFWg7g0`VSqGs#-S"Prk>%f1B6%5<PeAgPGMmeZC+I52@`TUB_7-"id
%D31*5,S%CdmB2eh+eXs`N-P)O,LVsQORrHPa_\!-U00j\kMMijj"\;T_Qfr:DKAYjb,/5QXhe:9dHg2"eo(AR6N37LA2(H4Gd=GB
%2pM2IFY=%VY(-5oH/@/kKGYJ)O@2!J;G*qk@k$3FN=(!(p;6^P";Y\1MALSEEkg>O.JLPKYT;b=&T./2Y[/@a"-QJk/ka)Bp;/n)
%D2LtS$o1r.P3#ldZNWt%$L-#c#>.7JW]uQGOJFsIEfn[E]/?M9R#K^00t_Up2GM__nSX-__B'*WNd$HcLDA:_R"GM6.*N5RMV+EU
%OjX;+5&H`7\33S:STmBY1U-;P"=9'A;5$.2k476>?G#:(Pnn^nn@QKk*ZTQO,*\;j<,/g6eQ8\&Rf1=S[)kTeE#TGQag<$s.DA1g
%KsH]O'[49[`cWWOQQqu5,46"QE!)[B't15jm"CoR*Y;+LMjM5r#m9T0@rMt6)B.C[3DZG/>ETYIOLaE=gfnT7BXHP?%e!p5^H*[r
%Ud!1)TR:ZLoKN-28=h`\]Jl6039."nE%kVgI08r>.LJA2o509!WO0=bTQ$teBL-/fP"?:n-`-+Z88*TV;Lb<:L,f=kTt/Q,,dkER
%<l)R@p)NPN&H7Zf_e+po=k-%:OuTidDg0LAY:@qu*1C9K[6WTe44j<9O@O@GbEsh%F@SX8(@GS<S3R>?nYD^Cn(n`-n)"3Kha@h9
%5.2f+&=POfM)M31HQP$.$^KW9)AQ3INP&:g*'2V^L2=1#\A?N$Cg(J^WhPWVP11M:!lSB2Tk^fRo(TK\$S;"9!r`(ed]3NaOGh/"
%#$:.+.b!]?V1LmrHH9iJ>Ik35"V>4+#ttiV\?h=g*1s^^,S+"Acu<h3WdQXK0RpS,U_hu_WD>+FBm3G@H$^N7E+>]O-'Pp*Mk`C3
%gKV*s(,>I<nl!c(*P1*M^.M,<<+VGtdu&%7"W,p6lqc=QDbNUB)!/r3Zh/Q*pUitDrJCXl%2\ECX/\!^B,@SPbuF(&FQ5+Yk!531
%KUSF\1`?R``ud\@RYCN-ljD=:KXOl-=UMf_Fa/$^;kkS,-"M[rs#,,G%03bt1,o0gdpuCJ,A,&rXTfDpSp.<'d^JM+oUHAtD:s4J
%7Z2ITS&&Y>PlC'6(_gqM0sJ`[Wp4q#MROaB?*pEV;U/=A9*8YC4MD5;mZprOH,TBm$-O+*S:M;,`mSDB[ND'HAU/o.njX@Ggs2E#
%#QB;>mS-$(b)*5Vpg6dTfL9[t&n(.P!JmPrV-lN>e<XWbp(akf@P&Il*TjaA_n(iOIXWD-@?HN-Eu`FA:RmFKM*WllJBZ>@0-%aO
%5VHui0D[[],u5>$["4EO.A6ml%qk$qE/mqNPc8=<TFn%q8@0[,=PeC]bA'!n=(gfS<Pr-jX=NuXAi-'\,.Xh7Z^&=GDI-7Q<XNUf
%qM(Y5AnVfeYcj0?FL[p;rO1;hCrCC\#EfH4^X=^LhH.Kk!Yq0CBe?a=d7l,sap!B9!MP7CUiNZ^j>)/u\[k@$D@/?eo%Q#[Pq!!O
%?X@7n+K;`W%[>]3llq@(=+u[4kRRJBp@9<ZXcjD.CDJrm`!^F7jo#h\@Lo9mm4,D@f*8""A8sD!q`'b26e46uHa$kXpH=1K%nZ[.
%kdU^jm\-$FJEID!\r36L@ZGg!j;s,fO*?$bc1-r].aAb9i3;EL-<0(T:JKXOa4cEK&;Co6abITkI@\S>/CZa\bcH+<>OgD-e\S\$
%3Q9^Tab=>^h1s]G]UV%NPTA9Q8+;T+iDE?phL"_9GO-7n+S>/KI%!?M@iO)WR-aWFIUcO6EOY;F@")UQg%3e]=`APD,PrOG4YOsl
%CLtQDZKHkn\'04u2qS3K]P\OQHHD\9$Irf&_:^.oRFZX/Wp6?`;d-KdYZ.C;ECE30(ZYt.4D'Jl%]"Z-+jr3*DE-og9:WK5[u@R$
%Hu2l+UC-Y&]umTd-dCMPAmYr;XQ0!tKnp@l.WSE^`.P_&r1.KhbZZtLGr\-O9"J*7<1=9ci].,!M,jqG!@n5QH6WfU7CD5*f0#e/
%FO_0-:FGSRo:EWRp4H>jnQ1NJ3?errFFQbMa_F(qDVEfADFN+RfU\*&NnH=2UK;\<ZjuZ_o0ZTC]I5kR,'K]QO0oOC==NZ2JSbOW
%Lo+N1`OIIZ[-gC-rcpH^(*Y83NmkRZ[WUi'eIas/4.3uV0pI<_)uEH">gj_/*g9/q60;M-ICF@[W?$gl#4q".P'k!CO-tI`c,#MT
%+7\?oH7V],[O.af7[c9UcB683dg"CU/p'Ep>H)b?6kqX2Kc9M'\6G50'[S\@TWNGh(U",GGb+^MI?5$AF>kV0@F8WhmXHpfi$n8a
%@6@=qkeCrT7g;3Gmn45[Bt<FoC*/,5/d>UN$6\r`LcBRbcudmYkMD\b,H^+D'0F+_gY+a?Ecs^?-?NOs]"_uqpN"(83TYD.jgmWt
%ID<A.ibWg#i,sG<\s@Y\G(4;pd_ri.5Kj`k$!4Uq7GP2/D`dCa[FYWUIehjDUf*L]FmGEAD]6FlZ6/d,)+U2HD"421(:.7&cQWO8
%A/7At^&-raL8hrQ#l*\eg@J_NcE=S8m+QN2rPgCsk:><[TDcd0[c;,WF2.,=[<A*H3sMqH=iL)>AUEjO?)-,?1mJ&2g$$8BPmF5?
%c&med;pL,9;o`LIOS?j[?3(n_Fk8=G)(Yjf'3g3@rGmSRIn%qQd]t&u`F;n.riOIP<8\=)Y:s]gpd,s,9]X9*Uk3KlrIXjT6%;KH
%)cF:(*o$p6`3G(KL&1a<n&\r.p5:TtYBMtdNRR)0>B^L[]2%$b9C8>Dp;`.L[)USV[3>L_)T)3,A&%W&mF]h[Chpe*\F"P"FtIe8
%Wk7]d_u"QAmG%L2%=idp_/F5.^[X`M'@sX:$5Y#B3OV74bNoe.B8sDdgdsUnJ*#B`p7P_qZlP-]pFpfe/K**/Hk?;H2AC<eAleN[
%"K/.?pLVMVV\*@d;j%G%4kJe/No-Y+P30(e)V7]/inEcbbK/>bXLE:R[^6TQ-GLY2^Oekck.huJiL\fn8$T)SZIRT$%n!L[ES!,j
%?X5atNbd9+raJ#@ZArL!c_[[\kLHj9l5PD!SA]`.@sr:$Qa-o8gmY*BAbI;9Q3,B'Q#mp2R9cl^DS7D,+mR,.#J)?IP:#j&$3-(5
%7E#>VG$Moj6uHJUX!ok%aA#e*";9Zti2hk7o;V=\R]__KIdO[Q\^<Ug(]O&j@=@aNJ%MCs%I(O+o-3$R'X=YV:1q-s6@U<k*riB@
%I2#-So/,]iM0_Ja8*T(Nb,jgaDq&UFfO('$%rV-*s8Dg"n\nQ")Mi66Pfisrkf$="#\cO7KU5PAC#U@:4H2;E@[.C]b1dUo.4SFd
%'%SI8<=cUe?s]WGBeWmR1CmAXO*L8]Sb(e.]KKgH@o(C([F5UGj2p6C0g2+eO=+h>9.kL1:nBe7/t:rgH$PQ^DU-IEEF3b;43klC
%>d:r++1iC??uWQ]0fPf=4r3@%?i`$'6:9:0QT@.p/@Ih\78dBUoW9=[P5:ajq\_Esm5TuD*!`h>9s:Me4Bk$79)#/W($bYe?ltVr
%Q;']i[T-e&$"8sD3Qb$$46uH&:ml\?l<'c<m35s:Cs\snGB]s`1H1Fc)!mH"dp_;/BKMhEnILe;!Uc/rdG]KF\KMIj8V^sL%3_Rc
%>^=b%H6ek*<TZTFH/mZWp)_$cV;t36l0qYuKU,]BTM-naYqat2NJupG@5<e@ee.eX;H70Zd^o2GreR>j$$W=1h5!`RVTUhU\"/Y/
%hPoP,fXOIQ*=_D5kVnQd*E;`U,-[H=PE,*9BpA$#U"qTDH]jGgM4SO!YMWo7Uos5Rm+Gsk@VB57n`=o/m'gp&(o"L(ik_XO6cg/4
%9o#>3ipZeG@@lF^7;BbRER23kA*Z79MG@hXZHbPSXe>DWdP9a0Y]ua5T,o0>1Wk(@LDf2rSAol0A:<pPLW<QL#d*D6ei+N5(m9=1
%?1rA#lZf,r?.7YHR-r"8MCjh^4dGjh$:W-G'!^4q.BUI8IBFiO7qe:U?4-uqPk5&-2;d7H'OBlQRcEcL8_j2HZF$`E<SfocCo,Ad
%%^:6jc^XBgFZK`m$DV^UfR&qOhjD%MI,MVcnQff'Sd0\iX8X&Bqlt-Oe79`I6&]=p-paW'Z3eG+UpM+A=.,CePD(!Vl!>k=iY`>I
%NFo"nn4o^\Z[CY`^1UL(osMPISp4?"_n$WB6#ADTl!"MPqoB)hFA&*F,DYf&5uTm2K):u=UV>=OnO_"fme/9U]WR2m4Lb#Nl`*+/
%79<S_CuT&h5op9/nXL8&0mp+3l'6l;ODWBcBDk]MF2?hpj=YfDcJ7kQQkpC=g1t3S70Uk,4;)hF]C(VZDmFRlm9J!Y"2(d6?Je\b
%B><&>l0I+"Fc??H#(^&M]rq*9c_I[^kP++;3)raIc(\,&Va+P$*-UI5.@BX+K2jL#JJCS&bXNCgB%>*K`F!_V!Fq/hVY0a6*YP,4
%eP!235K5`tL?ngb+iRRCb0/GQa/2#R5,i&HNl%pT>0W3+\iaLlO,K#6DT2t5KImQ9<(Q34Yre-Ro^T>Q0G1PT*TM;M5!mhWd>%l-
%!'1/q[9pM^gd>N%o-h]X=O%R?Yq5X073"Xo.tn87J0!iH2S=]sbM=pb*=Db/68P1jaHsSVQCsud07_akD.eFk=OQ4GBB(J<&$Lan
%ArlUbV&uQVSVMW_-Tg]g=@3]=o]7YMIkfN8'$8c0NS9k0Hb,6!+8"q(97F*ue4,D-))C+$mefFD/jh@L(@u[dB\\=Z5^hDjMs%p`
%$-Z[K51.#g@J]CR;2C&**U`HY#SuB.4II)eCP+RURA_pBr;(fj0%*$],c?)"1_LrCbm%*e?QM^[&fhWr><+0sGD*npgY?&d=&Xu$
%L)]de$T95.Pm2pfV'#sn/[/3p[93PgV?YlGl\G1YfYh-2'GjD^5Z@D5H3%SSp[dF5#%33qW-F<<_ZA!;`XM`H@4DQ;><5W8&DKHL
%;g+Z,WJat(V[9>H'>fZ>>-gCMV'_%+J9i"EI8YNe"^Zu'4dqpms2];J'!W?p@rbt@l_)]W8ccfO&jfImW:nkJB'gL^ARQ=JHFu98
%i+>B?c<Qoj=kl_@4`-4<X,:S9^I(Y]Cs._%+i.&u1-Q,O^gtG30l/i`>jZAY2.gm*;7(tKj<K[4KsnT_P)27qc,-Ia-<%7<\tKo6
%d2\X:*,!<^1.Z?AqJG/GCLR(1:P6QV&`S#+M*64)Sdf2eYd%j.fX$+pRmhL:,s1OYIDa"+[pm[9nZU\)^,\8u*$Dk*O`+Oh]gS'&
%ZC#RlmNYX=:$,*7WcrlO-KEU3r7a@>0@eiD)4@i;d5Y7[!&%NRA$S"gJAUVU>=bA\&IN]taq@l*kQ,[GW!TuN'3'.;b/j70&s!l&
%qPY7*jr3khbrS,7!QL+QJ0[c"**\-WqCL]k]V4!`<[:S80Y+!f7\:pWN?=e\ZmJEd,MSgKm<@Es*?3h+h<nWmk'`Zmp<8!#nHJ>`
%#X=<'qpr9*(Yt\9DVpbhj5A[5qX'aR^SU0Hg:K8PI)WRh\"Nq0B>e6_TdA$0oG0m^$8@+&6S`,A=qgd..7+skVtYZ79sbVM'T@Y;
%10`G=`+ZtsO:Z*3C*DtsTMZo3/L+.ld1ELHoWtEZi]g2;\>O%0WOK7^N!Zk+"U:",1:7iD/@Lk"HuV!q[?95$fV#p/lcaZ55:I=>
%dI.[,T634Hf=_:Z4:LEXC)lmDXc_B/hhL]E.k_dK!tTqld@51e'84%'U7p<PC^6YF:lCf\$%;q"0<\;#76^B?Jc-.\WVHR8a\jZ7
%AL4YY)Z'83GG2R-+,^Vm!m).4GPfBTO&3/T-2?m772FS"ciO*6dDlMRF@?i$%++TZdY^8a4WlMO!mj]`2h`Z#B^I+/OU5FkJ?k!u
%(7J=:?93k#KU%`+jFJ<!NHg3siq%$"/HrR$:Cgej_BZ]Cat3sCWBc5rSBaaJFFrMKjUW\nR[dQM7s-=r%U4!?O;_+1jNq_Z1o"2R
%5"9dlDhbX/[-6ar)qTg=XB/U4-"=?,/Z,LP54YS,rP2h1L:(8Drj`Z[Z8I86%m5BB+NYDHPJ_Q7;ih)#O_-q'np(rcGiIo%]I#\q
%.bKJ$86Tk]qh-DDbt0059Dr(cql*p#`t\T<`@8GQAg6Ic1oE=(`\N4FM!!(C4Xphkj#tLid'\^9Aq]"uVK;>X=*jh[]m?*2Ik-jF
%O%-H_;N7EEY9?5]E;W#&Hn@Z!D].4<3l[$i]#PC6L2U_2VV810V8p^]7gj/b*BpZ("7iVHs2#fl%t37TVJT/1^"Ep-f-<?fHo5Qi
%>]@&;4K(($bKItRU>9k:@Ui:#d1OEAgnpERIT8[]MUUgtWDM6DT;Q!!GWG,PoDi:9!:$2Ed865Jen>U8EOh#X&`eU\4%5mZ7"arr
%6t%+r*]+0TYrK^*'>H3Zg=N;9n6"(J[ZI7@p*5(F?pl!tB[3?Entgtgce8[7A?h#mM=E@^4H!,0If%?QHI)]%:03q%LuUT')gF57
%$^089jVV3[jb`&NlL@tOIjR*20ZI^QW?M\eWb#]R;m=DK3=AicLRH>A2TJt."0cqVP-K(3=2PRIRTL%`k*n=^Ot'#+@c*;#LA"["
%,hJs3ADo6L^2u*>@9`Uq&]]R>X1R#iGT=ij"-@.`[Fu]eVYG&u@_)*YK0YQ.7qe9=N@:ZNcb>/%mnOc,Y:ChfF8#+77'0NB#f+:.
%'\nto]$?&r5IMkC%r+U(k3TMYK7p?J)a!j%XX0O_1b\":fif1Y"S-P0C@&FM;3I74M\O1olf$jaHc.m7Gm4bi7Mae>:3GAT3tkg2
%LQ"]J]J,]4F%"n\)bsEK@,cEo*0::p>/%[-^aSq0^1_ShC/F<W=FhK>>52qNVidW%*o\9n*dh6RapU43;m.0\%eJ0eYnO`%Sm0-n
%.#r3KM5t2FaRJ4%KLLih10nUhc+#+'[`P[6-/LV,g,NLa%KZ6K-UP=lAM8$%[2Xc@\*/*#@1`YELf[9gEiQG?F_onQM3)T,V8uRu
%%[Cci,(P/M,Rr2qC6n?X6:sYi?agS$*Xr2j?j-B.rQH_j3Il)#(NCjA!jL;VTaFTR"<DN>-g</jhbM@\As#rL0&<=5!t&r"&=/bm
%j(G->)_7i7m"o/q*]^^q83:0[;I0,\KhgA[Jq_`GB?[5rh&eLd$D-,A95#,&ZZ_/kB9>:51]FR4HOT;./`J3r7tgM2^jE*BFiEu6
%RX7h9^7N!n6Nlj$PLn@5q^T,MeE#pfpY@+n(AC*JguI%HY<$sK0dKnJWB&?qcn^C`<b`k'T?J"!PT3^fXHTN"Lc%">iHpsp^)3lT
%HSas+XT/bsQ&,?fM@h;c<.TuaE5b=S,a]&R8Al!2Pq).5[k]?-qIm(o[P(3Gkn`jQIT74@/uj"$?-#pM)h#DSBY9"3,VNU;gg;Kg
%XZYc%d6i?$A+V>8YURMlBrh@iok"268>(r@Zm0^o!7F7dMSR8fCA&di$u2<QU@H'iCM3b^q8G:7'M-]%O:,XB`<OJ7C6KMIT-e>"
%hI:n;Rpn:9dS<o*#a5761%geB^rBKOm(l8n2W"dh'??;Y/u0(?*],%K2%f]cgrd[^hXcmaT:>-:QIGrV(Gj42"D[I6hV6ACn&Z@J
%N6$N6X>2hs)IIkNI_2.1Ra>G@s7^(;$jL)Ac7/UeX+ufmg%lr7%9#Hgr%oS'/*2kqFK?ab3l,_07#b.m^Psh"HWIjD1f-8nkUi*l
%9C,>(.U>]@RASaXNq[VM,*1-aJ!bJ&X?OAg"Sp7/+h,K_f8\kc)MToB0YXEUJ'?ASk)12'rHu(K9SCS2Ahne`RBAd!mqpL#>("ut
%m(%[0>sl>NMqg7j^)SW/hB[C"Ql\kj<l%s4=$8_e@W(GDqbQ&%I$p<3T9-dX8DeZfk>B\!1?mMajHY0Ogk]=Ye!]7Thsot$d2qaO
%'JiR^`G[h`(']8I)/2dMdd8d^V>>9!_Y@sE&?O&,[1W$qn14NUDfb2=SaUo=R<@rVdjh0V-IQrUahIDdqB@N`Va\VS8>GX`dBht[
%(jLFQI'dOtPH<nA+KH('LKoK%SEmT#g<nGQK-dcpOL#[oobPKM/ENJ7GcRZb$u]9u9;)hFabZ-/5Li\$HZE(q<bK,8bTh8(Jp\&H
%WG]?F3tooqIl7,e>(ZC[6_5VL*@m;EAVmbliRd"(mhe,KllY'n,2,uO6#G?j@X6&W&Q?r&O3JuQa06_AC`H^M_`j8!46h?"E]Zc/
%"q<8rKUcb*YXSB^*E3NqDW&tkU?a/R\"2aX;tO<G3d)=BPD?hBJ;+RRP,D;Ocd:a2l,ggYjhj'S%7LXrDGqOTSDZ<U^f7^m>K;:g
%'b6+*![Yp6VUA-t;"?,&Q86`L7*^NLOq@'K;oa.ka]s=7&'L=A9[8!1^6YisID0(K*=TB'DkUY<<'D=)H7gdT4-u#.ae?uWY)C!Y
%G).^naGt*!I;tMTJgDrZAjDR$^I9oKn0[*:ocUh?PHCDA1Z32sOE]Ym?C<O8XYK27d!#4'@F:8+";93dCQG/gXu52,gU)Mc'U5J*
%<bV0-kTULo_^:>?9['k9&5_(:5@]'qn#tKK^G<Qqof4:9=k$*FE*@1:edX2(U5[":3#?4\8e>%WoJ%GUP!j])16S)'W(aaE0Dj8K
%&kFJPgNt5UnlI;#SZ+j-7p.OH+)gUK_FWWsUt18^YGWKl3`FO`P@sL)%%Q$E`2gu$WKh3C,$%2[r2"Fd>E(A?o@I`NF=G),]]u-,
%dd&3Q(Tk"NYB;C5<?dGhD7Cg3KIdmM%tlQ9h.!:&;CB5fnk/0J5\S&8R,S;/KA1;,(JMh<>/"\3[jGf*BZerF*3j087"TW_@V;.g
%G?0WlkMSJ"cW>fY&=jK40581O7KU#hAGQ5ao)[`\c@X6$HA9\F=143$b9CtG[VnOT?oOVj+<+1mf"F#aBUUC`8'Vg$9TlA<o@p/1
%rrogR3>`p>-;H7'+gcO._O:G:YLfg:FQ^>t%?S4PPa*eS(a@I`XVg>VGUiK&)D5T=-EA)O]>SutV,9S*<:)oKHD'KCAG@\ET)jd_
%.X348BChAq$iG@CPkVhf)Lt/9c)c-eJeq0VB!1e$hgjp-V%Q;cP!0S"(.Z&UaPJf@3H/op;4CkPl!B#r4_R<.)Peo#jRY4BVb6CA
%G4"#A99(f9"#tLV5?BX"Rn[tVA(O(<k$##9,'*_3S9Dg\:'r]mH.*\FK-=msi2Yl?!Uqjngo(jsBJjSBmCHTOE7Yq_cr+SaSKF_r
%6H,RJ+V8%&hLXuhFPfdKfQEnN&e71+VA!k<2`I__Q1RI-;Ph;3]e?@ODP:i/B?QXZAlfNbh[H">8[s;%9,aJcG_KPQEKe,>0(c<'
%4.:;=qb1$9r6Et[G/d5O<37!%OD.K8pRXN):8a9HW:);Ri9a2[<1O<'keS:J%`*m)5=\eh=D!t5KPf`"YBd\eNp"^0VU%im3-de*
%qjVU[*2dLB`$CZt=83UPG`<^b"7rs@&Gun""cTXH#`DLt!l)F8'"bkj!"_PA;5mPMPiGhNpn;4A&%I3,ObGR\lj.igc't]S.]5(A
%jn5`]%4I\'3eLd$5?^1(IhM:f]K^>@Es-0PaKE2^81<XP^&%48i.cl2RDu$eZb""gZRh=3>Ui^j:-g1i;_lNG&g]lA"#3("=.r8c
%la/76D(SC(8su*D$[pl3S.O93eF[FT7-VuD+&"8b#I</LIM_g7<N%hc8VMm!73m`oG%C"F*b8ECL`'D:ieauE7<R^*_@]TnmP42g
%de[f!DCJ3BG="UBXg"^GC9;O\3XG=ZS%j`&'ip`)<PnJU<t"47`g.Q7(A@a,J3Atfni$NN>D+`h03:rr[t_1Bb?eG47LBiH(&6Rc
%G50Xelr&R*rb&CY;F.#`kr?BrTT$#r]BuN(oH:9MdLSg/66_TM-'TbC6VKQu6H%#eM9bR(<)3+HShA(\/Hn&6&4Ce_>WmhG)OGDn
%`L<c2J;d:&Mf0'"U0M$&gnKBV/6412o_u+_&#etX<4t_^PmZFfLr`BoSPse!qd(/CH?R2pNa@t.<&5M4"@OE46JmIW.T57?Hb.^5
%_t'+<6WPB\%#$Eqj0Arj$D[TpD#"YA^s&<]eL8;S>6,!LW2/$hWF6o@EXJf\)21\mfNGRRCZ0U/LO(mJ,i&,R%41X2XJPPocY*9%
%.!9fS&1?;W#lWn`Pn=0=CB93VP/XL/b&DJWU1QCPW@/LlM^k!5(+t1QZD/!^@Hq(FGeT`X[@iC7e[o&(2:d7M$8O.W_m5((92o@C
%ZE>dg$Tl)QA2BpGXQO@c%HV=_QX;A&Lp#bVCf*g.A>XU=B`%)+@\8$!7oKEndcBgBZa7L=OP.OOrYV;e^sY.4.DAtEMqm@ca,n**
%[_e*l3=Y&Z;2.0k5a/q=-+N,'FV_hO%S(4:+a#8djk%1><C!Ae6*j4\7a8qBXLTOI2pe!)BhuW^XUP?jiJ=,,7gAa"3D7prJ0u%6
%X'eOi!-l#6[*1&/,9aMXiQ,fko;F2Qp@g(H<V+bMX1Bg_#em8sIR^>sRA=i.MbFEF;W`do-d[]c'PJJu'&6\VM[g1Lcl9+]WMt82
%\n'"O+;=1QilB]1/XA37Thfq7Mg_tA_-eYFK476Bf8ArT2J?W<23EWr5PI2E?A:&G#%^J.nFMA(V7\MVkHf3?[m,.FoBX26'X,2'
%hfJ'D68tn+SS*E;[%h,[-ri)46QcC"!0f9=b?F1tKGU:XLJ-RZCfNg3raI1s+T+g?[kP,pJRfK)l8WZk;b1.V:=dAKp$81_i'XNI
%/"/h!fe&(FlH0gqZ=shhQ2Eb-S0(sh7S6"F;.&0j4i<fa^6ciR^^i]%eY$a$]Z8Ar0b=]6K?+5j)2T%[,p`j$AP439q7N3![I25o
%],jhS808&OgY!Q63b)Km5=@)>b&`a6B.8XF^NrKf)MAF#iKqP#P8d=p3tQ8.m=mp^r,3dlcR*is`Qu^#T';r<=j!dS;5pY[\>U#]
%TJ0#q'L0L.V\3S.^quXK.4b$J\k<;ibG+n0%Z?ZBjt4HU(<CoBQ.Hn(@+]U4Tq?H(Ul0TY+:][G;,\A6=4F[hl`dakKg_?t<b[`#
%T+Gm6JLN-nV9GFk]uD?Z5$aqk#Ee/mD1qXAn`MU0U^ZDsqTEp\Y&jB&9V;"761%!b07/g_*P`U,qYK;t9^%CeE.^KtPnG6#*\@HR
%ZVc)f3d:DL=k!kI?F59*633B/Xq^^J&@Q4*0<Zn\&e-D,fe2,OUR=+;Cg7+-RsWB%00*ga^?>;,+\9VL-:K5H<u^7pa@DpJEg0Yl
%^*SD`-uB3CgZ#T:LBUC5Y^nJ?Bqg_`3'=Q/FiZgaH6.iN2R`727oI(Q*c,@'LmWAMdRsGi`#Cr]+16^.-We$j2CWsiTZ5jKW0/)B
%GBQtcW-8b=69REJ_l@)X\U!O3Sg3p"70mA"RX-WrOIF4/#g1dcq6E.7Z,%E&5+?65ppkkBid._\Z]-4JrE?d*iSd`2P,*Rc=*i>c
%ZQ^5XZET\9bc)luJE>XV#:sOPl=k-(<7Y+eY6o_T/+-63o;qE$;DX#^H)u=dX?fGgB^!.H[X0BVdV\Z*Uh[HEUKGOhk9B;=J<5CN
%W!\*Sr<VL.rBjoWRPE\-m\uq[iMfTgoF%TT)AsICa;qjYqOLFW?1ft-kq2GPB+$-`fEguma8NTdo_5*6^S,4A<CSFWi_ZRC70?Ct
%hC)d>3DqK]UfRDPXB<^g2]Ob_C2[/,,l,SN_NJML,\GI_/!<3reM7GT@nTrIrGckQ$)2D>YA36'lah/UatL*Z%jdN6@unbB!>Y:G
%\;n'`#UG/IITA<M]>n(1<h@m$fnqmjEt&FhM&;hNcF-09d`BmX29=iI\rUFO3E=&D.)2r\Im/i._6%`k[M\"?f#c^oehuOc<RpGM
%ID<-hDqq8$Y<!;;HQ4q9&=;+mX*#V,j#td2Xe=qjIoc[eTHOTIUl$;(<k0LqK'+YTc#ga[c/F[(9!pQ+GilX4mntX#"-Ph89GUD)
%<Wp>(.`6r(DLm9XVd<E1ScsN"Zkf(f:'VaT$+A@1im>9TEMBj\7Z5aTmO\&j>9!B'?>[gk#>K-kkcJT,.O7Y\Ns1?Le&eGYQNCHa
%o@s'`np-'IqAKW$Ki7H95H?GQ8:tfqR`R)C#`1F4X`W;WPV<X]TXY`b1[B[..8>(*rgYjSF3qGfaNDdgrD;+SaHVetV::<Tn)2X5
%<9"*3-GKW*ZH!6#S2>'dhnP_Gk"P$&=OKg>Z2h`m;&C&E3T?1-,7Gau\Hl3&3!E5bMdFViN9Y2IKT-n`(]%!O`G\p#<4&el(?NXq
%N_2UtZ)&N=@^UPrC7]7rSn%uR)$]DU%]P8j:#h/8:YM;!+[4?e"67@+Rg'aOZHoqZ0=a]r57oR`IZ7O<>O#CH"5/K5U6(#W@7'?@
%C\ch-UHsi-+ecd+P_o.og:lj,oXYN/ZEu?=4-Mi6jt<-!Bh,F'Zm;!C0SbQ_J5]XpdJAtB%#m9+KmFOl]G06)B+puWUiP(Tq\k(L
%=M<%^WA3dY`l,(X5i:<sjB9Z0J8jMJNt\OenP&[i#VstnFP'FOj*Yl(6?!so?`WRA/]!gdk*\W3jK4#i2^Fa+I@[Wea]/!5:,sSp
%0eT)DBOLD[&K7NNMT';US*0D:jqgGgk9D*k0_J&@?W5$o$-[=,PjkH,ok)g5FE\Yc<,g'S[h@p>;aHHn9aTq#g'9!f)O>r/Zl)'9
%]+H2_$pX/<B^/hhFBXU7R.itIM]F+0QU9Jm@D';ng-4M/6\>3u_nOHX]BgGDHkdX\jMA#K3P+R&*'7s*o-?,VEQD!EZ(=\8Tc?;d
%1sHD.5]&ZB\.TZ?E7i8*;[lQ_`UAES5b0%MrB,<>JINJc76U+M]8'Y+,sCYPKG1_ql%%'*`#A'3:nh5e5NnD8!4hQ('LVR(4($%V
%SXk=X#riW(WA,O/R^Ed,Q?[q6$12I2)&o+F*1AB7J+7e%OIB6C,^X@_oBK(3n+5o&"PXZXRS)8fgW/`q_pI&PI?)_PgrN4DTJ%$M
%lQ;;K6"I@'[B*e<GXSL(1H*oZc]KOuhPB&t\#sU<9]/2ZQr_NBSBZP^243hbl1K'*,ZMHEl.76B)`EKq7f#NL%O9BTi9@jTJ-L[1
%<6b@Ucc>EJX&^kZZ=GK]Ep/3R#@P;^s,_)<hHl#%YktigS<E&J90ADrfb01VIQPB7IqhOqCp,?Q'G<`sf'\SFE*Tk2Lt=el5UuT`
%?A0ZuL@tc_,YR(Mp!q*H^<_d#?U596-ut'BC(Z;pJoDW:_aTOc<J[mNmZDdMR*jg6;]o)9E)`>(pT=H3DS<aAf/#VZjkkF-EH<"_
%EbemE7)mA+.6o@?&'N*AME8d+(nJI1)M+uA1,%)^n`25nd\=7@Wtr`JFlQ="0FS"#2L]>.Kocl>P5g#JqRj"MYm&aZ\c6i7=JkD2
%L#;4Mj9.[hmu]%r^R9_t2cH.YhR..ZAf7:33st>D/+U2WV@ThsR<h@l$&TLklE%Dd^"mXsqlaWS?UU=Uo_1Lr^!YI.6SP.PU5[%N
%oKW&%EE9%6b/9SsZpuS(cCBQX^,%Lo5PthV?Y`5@8%i8:%JaqGIQNU5?K\93qkKCN7>E*=2%7Y@Ta72tImOM]j?Tam^0q<XV.u2.
%&>I7>S?V^b,Pc-(/"1A!V[Z.BG<UBi<TdM_9c,&iVh^Eq!"rKI9:>T:pGa^cE'qKl3MpD`"P[4Jht'^GSumt+(.#hW+jB:8//uc)
%L?6%Tfk*`n&]0ph7AGM5KZ;+p.H6*c1GCN-"ReU!i!\Z,$ZBTnMY4J.`0FMFXH7oppaf9k^#u#I$;n&U,$Ht591i`,7=D<I83l'#
%W8go"=.hm@Uj%Guka^r-C%)Kg$YJa[aF`X9i7XjDrGjeK!V#44(-)TO/MZD#_X\d99Fhp*!r-\Y)+2:"+oX:NrT,T2`S\=b43s:L
%moU8[R3,JL*P^WQN00_BarR,9^)qF:\,#:Vr944[gT<J"^H!N'm?F67b?]&KhjKE6j)1gF:P\D!%sZtc]]1R"nK73=GBY%@HTp@n
%_si\mGfP<HDcH]t/_,Ws+t_?C).V"!nc+6Tj3%b7k8=#S\Ra$Ao''6/[qY4(3HeXLs/J4mo4I<u:%iEQ*QtXXXpem^qmGGqqr&ar
%gF^?-h=LU0"oHh%[VI>hqg3qfZ;c55CgYs6HS1:@:W0D_@aAWU0,cTpH8kO[*rC,B.V:e+pJRu8g@KH(r;)G'4`eE1M.#4^YA_b=
%[INQErcQEcHR=>m^Hmj'T%5F3fc?EFSt!n^`\0K9R#[HU2kDfGGFG+]c)91<Dh!.5&qATKHt*uAZ^#esd+G+CRPI<Hj^I&rF*[W5
%&F*[EeT7,S`f-q\>Li>Sl5N'4]q]lp;gg_Wj1M9&pTKVopJU#=M0j`M"5]:Ommr@\KtP$dhd(*gY)IUm=<B^\d]bcU0ca>`n,-gE
%<](mjS%aeShf,H*9_7bWnKg?*VgV&uQ0OBsoj:b5I]6h$,db;ug[=9GGN?C5_UVqKl])Hu?SK*iXo4LBmV6l+/Y8ER&]oL%0D@l'
%qf9t&iTH4boQNpU*RX,C3-A<K\Zbqd&W#jI8UG&3Ua8/Z3[0eOZ-)NW/UJ+t4fQZ?WiGk-i9U_lI\Z/\Q2g3mKQ_Jmq\#><WQhRo
%kO3ou6VmC%gpneofFq0\7WYg^ce+G$lmk9n`$'IOP'u$%^;/`,L[c>*`h'\M7g$%M(MUPVd/C@7hba[I.1(JO3o&+1mcbR<-[GV(
%8+((>Ij__\;eH#e$I8+/`EdcLSd]X@0\LUKZt94/jmqfsg+dp@g8]<:=M%>1I8eahs(g46[VI>hH^qsM8Z6N2,LBN.^bMk15N-JL
%_phe@Q@%`.>s]WLMMgEJ<>j$4He>d([Ho[*<uQs;eBi<@T(e=[;#6D&VA&k;d*(]>S-iY8U,BG370L[nT0oW3m?h9kSgoF&,uVPu
%H!o6UiFoJ]<nQf0.%HX1fZkVIY7,K+_PY2f]mMn/<V<)[PVb.L;]L@#4_c>*QM@>5o`@QhmlW_J3ZeF)7/C\&A$h5mr=CE/pgZYr
%e&1l*bk*N\DaX-']<E"XCmmu^AMF3ld#\*d(24C-X><IbKHeI"6cY9/-aGJt-_l@:k6#?>-H_B:"M5PceAC%>[A(a.CG\.d$+rQ'
%Ba>gi&QVDuc&<Ya$AAZ]EU/S>H6<-/\tD"0i+M:gTknu5s$l#eOhW$)DNm#Dk<ROI:<PHlq'JXT73JDBaL.2X\oYsO5Y\TVUd(=R
%hA;SRkmLkK1`q==4]Td_FQZ$Ho2EHc;aKN=`;(,5ltUkG*a898*:'dt0Rd)?I4Dl&"^iE5Z!Wc,]5k5R<SF?kD-+cc,PV%2K^J$D
%536@J$FDseg>AUN:,/@p3BDe'[Dmt[a;MPG=ZYoS3O]o]s*ts"F'-t7$S1IbXr)8m\fR:'G`oJ>&6R=G,CEcJ6d6o98o`?=rY"Le
%8:EP1.L:]:U9^O$bb8dA[fU*K?OF"kPe`FalI1V/35;g-e\roYBBYHlAe8OSCSP0AGh81(q-mQncQUHXFkf+%:Z^'uULt%apCQSV
%NH?^C\qV8%j,]3^8C'Z!j##3S,O$,5ACGc7B!Q89\2>96c8T"!%]AJ]r9:LuSueA%pZ>\K:63fOAcD<m65ErNjL"])5?M_bY1kn2
%\-IA`_m0*!NRo?A4o'M3H<Z..pLMEhpiIP1?&tN-Ab#`ua$4[57PC4Z(J[kh]C_mZ[J3t61^uh4*eRcq_Ifr>+1/pDo'6fi;MVmV
%*QtG"L[*6`\caP(j$B5]i>k-B2B=,>T<cr)p@K1eIB$,!;q,4sodNKR1/iu"e6tin?!-B([;OMA8d%`&+;2nN>"sc)j=BROMk9jA
%*`'n@gk.i]WtjpVBbjJk`]&j9%^i'!!9k+bSqN7:mA.qYk`S$!'TaqKjS.5/pcth!2Y7#_mss9lkkGXH^&thDCT..II/f&nIj3Z0
%3;<tc^5o;__!a?-r@XPr[JW:nrjn!i+#):V)"nouC^4;D"QB(%\ij0a'E$TRc$&'R:CqC[X_Z;Q&2a/^NQ*Wo#<dKgDhJgrM@1G1
%L;&2U;sC!N#LQO=kf>+CZk[m*$sg,mNhf$<qgl9UTqeB6h,h"TV]\c2\*#4/o997?$3`TSKV">o?"Kb6qF+2:USeaQcaX0#`4kjn
%K`'8>dik2-YXk%W;UE`<'7CH,H>!f]P_lItI?e%B5k7``J#^!P7G]+in.3))Y,M7sHiC!?hj%r+._7iEhn.n;*=_hBc?rEJhAYf`
%=,$:D^R-Z:r#,>`%M,n$V]eIc2r\7!nSk/r<:0St*<#0un8sBJRRc"UqC4<D$JH:ZqM/V[Vq0t-eE0,)rZOPaQ`5J7ffoW.Ha<D^
%#J]Pjs,+A)LW]Eo)>((4H:Lm3.D+G:B7G`IJ!G<Jl(rm[<.B_,GGWtYMg^]k8"Ak&EqiR;]IuSM:b(piR6MG4^PJUK7+4A31dCUs
%^Zq)6eMHYbSdUm4MLR,egX?IYaGGDo*<5D,mr%(/W*;Jc^\d<Sh[#'_,fb8SjBWAhhoc.WX^oEh[`#d,a@g)[4B@m55K9]Q(4*<G
%mL.fQ554[`,8jAOb:2;XBX"==rUgtBDG=d;8jW`6IuY,d6*RE*rn.8P)THonUk9$bH/q^-/U?JRLkhhNX9nc*4$eXUF(MTu5M>$L
%eCt6Y_SIcO?il[XDkosqZ3pf)7XG]F5e/KmcX=+:Gs9bs>bjPiBlGOtR\&t/K;m1Ok"Dd]G@P//f6Gd*+4PUh'<k_JYdc:2IA>p+
%%Pe3`:BiTt3Z]CYOdA,285t;`Qtd*8h2lCme#/-bV0fckQl<!S=.#i1dCBcFTUK(>XnI1X/TOjOGAiti[tu=CE&SNtjjf[hL#+5`
%VKdX_RrFWlL/^.5>Du_l]WL;WPrL5>X&;7!%q`-\B^/O8BI>eWKA(Ss_D#&PL=Y5s*ZjS:N?Qu6,mZY6)Nl#]?8Bd/>AZOEH_<De
%F=3-'n/?2d#pE]%Tu<"3i*E&pbn4aZ8c5-Fk3EQUQ?E-T;?*\&\Jmq2#Q7So^8GK@j\PhU46&]%4WEE[b5ELYr[A33[`&cdZ_smO
%=8]b0'(=(.ABlFbrR=2aW2>%oX1+RF2sTZVS9K,&]6`]^?1k,jH;C>"VpSSJE$+Bp.K3=jr)9&s4k.)0:e+j).mi)k.hAiAMfeZr
%!q^k;f`%nfrLq]rDX?0sV'DA`PL]*eDuW8"m[FI3PPqA2nPrQ[f.H4\0"q(BkNp?$G#U;j8t-hacA-)r;qA:MrV??&gil\NVZ6Z-
%O+-:cpJn/a@b"7?l`T[K=*<l-J9G!jqB7s!'W1;S=$IG&+"GoKZ##mC%oTQ1QO\AO_t!++CV(#1%Sug<6LU-6gYiD3Lr=LCr.><E
%>2#/qqBVC#)5nRUC5:0iV1SChUE*ZTQ[mduWcn0=?/fWLdpE4o6K*7s1Ha2,qB?GG/Vp!+6q:><.6l2lWT\(ZFN#AoOqBik#tNo>
%.==FM5IcJEJmt(dpgcHM(m,gsifgYBj>?S?O2aX"g8ibe%R9YYU4!SXSW6JmCnEK[Ut.`u-&gNTEk@4t%tXJ1#(04/]d)>3'R,%?
%_#MuNMLXF5^K6F_66XC&jlWFJ@i?&e'G&tM"3"b@VG5#WnihXO6'@A`PQ5'2gNHNuX[bB5";(8cR;iicUW-u4H8L%VCZT0GU]qP/
%[^h!+[Q)737]L0<3gu_=^i.:g\;%%V`ggG9L5[FbB'aIb$j`b*-50'2*s+0nWKoFh4@*IL'S'*^b2(PD3d.s+Sp#i?Zh-IfJ)\Lu
%oj@aoL]@:m5Q(J0pW#Mrc%#UTXT-Inr29Sfn,N%[r:s_!p2@,BJ+Go'ko]s'5QAp!rqHHQci<RV5Q'QVror>?r8UTQoM>MbDh%Vm
%5Q@A-5Q1AtJ,/]NrnB[;bFa:^li6\)s#4$Sdf"m7q4%EZ5Q:D,r58OBTOR>L~>
%AI9_PrivateDataEnd
